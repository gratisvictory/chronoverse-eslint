{
  "configs": [
    {
      "name": "eslint/defaults/languages",
      "languageOptions": {
        "sourceType": "module",
        "ecmaVersion": "latest",
        "parserOptions": {}
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": 1
      },
      "index": 0
    },
    {
      "name": "eslint/defaults/ignores",
      "ignores": [
        "**/node_modules/",
        ".git/"
      ],
      "index": 1
    },
    {
      "name": "eslint/defaults/files",
      "files": [
        "**/*.js",
        "**/*.mjs"
      ],
      "index": 2
    },
    {
      "name": "eslint/defaults/files-cjs",
      "files": [
        "**/*.cjs"
      ],
      "languageOptions": {
        "sourceType": "commonjs",
        "ecmaVersion": "latest"
      },
      "index": 3
    },
    {
      "name": "@chronoverse/gitignore",
      "ignores": [
        "**/node_modules",
        "**/out",
        "**/dist",
        "**/*.tgz",
        "**/coverage",
        "**/*.lcov",
        "**/logs",
        "**/_.log",
        "**/report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json",
        "**/.env",
        "**/.env.development.local",
        "**/.env.test.local",
        "**/.env.production.local",
        "**/.env.local",
        "**/.eslintcache",
        "**/.cache",
        "**/*.tsbuildinfo",
        "**/.idea",
        "**/.DS_Store",
        "**/.eslint"
      ],
      "index": 4
    },
    {
      "name": "@chronoverse/ignores",
      "ignores": [
        "**/node_modules/**",
        "**/dist",
        "**/build/**",
        "**/.next",
        "**/.nuxt",
        "**/.vercel",
        "**/.output",
        "**/.cache",
        "**/.temp",
        "**/.tmp",
        "**/temp",
        "**/tmp",
        "**/.turbo",
        "**/.docusaurus/**",
        "**/storybook-static",
        "**/.vite",
        "**/.vite-inspect",
        "**/.vitepress/cache",
        "**/__tests__/**",
        "**/__snapshots__",
        "**/__mocks__/**",
        "**/fixtures/**",
        "**/coverage",
        "**/test-results/**",
        "**/.nyc_output",
        "**/cypress/screenshots/**",
        "**/cypress/videos/**",
        "benchmark/fixtures/**",
        "benchmark/tmp/**",
        "test/.tmp.*/**",
        "**/package-lock.json",
        "**/yarn.lock",
        "**/pnpm-lock.yaml",
        "**/bun.lockb",
        "**/*.config.{js,cjs,mjs}",
        "**/jest.config.js",
        "**/auto-import?(s).d.ts",
        "**/components.d.ts",
        "**/exports-unused.ts",
        "**/*.min.*",
        "**/LICENSE*",
        "**/CHANGELOG*.md",
        "**/.DS_Store",
        "**/Thumbs.db",
        "**/.idea",
        "**/.vscode",
        "**/.log",
        "**/.node_repl_history",
        ".nx/",
        ".storybook/*"
      ],
      "index": 5
    },
    {
      "name": "@chronoverse/javascript/setup",
      "languageOptions": {
        "ecmaVersion": "latest",
        "globals": {
          "AbortController": false,
          "AbortSignal": false,
          "AbsoluteOrientationSensor": false,
          "AbstractRange": false,
          "Accelerometer": false,
          "addEventListener": false,
          "ai": false,
          "AI": false,
          "AITextSession": false,
          "alert": false,
          "AnalyserNode": false,
          "Animation": false,
          "AnimationEffect": false,
          "AnimationEvent": false,
          "AnimationPlaybackEvent": false,
          "AnimationTimeline": false,
          "atob": false,
          "Attr": false,
          "Audio": false,
          "AudioBuffer": false,
          "AudioBufferSourceNode": false,
          "AudioContext": false,
          "AudioData": false,
          "AudioDecoder": false,
          "AudioDestinationNode": false,
          "AudioEncoder": false,
          "AudioListener": false,
          "AudioNode": false,
          "AudioParam": false,
          "AudioParamMap": false,
          "AudioProcessingEvent": false,
          "AudioScheduledSourceNode": false,
          "AudioSinkInfo": false,
          "AudioWorklet": false,
          "AudioWorkletGlobalScope": false,
          "AudioWorkletNode": false,
          "AudioWorkletProcessor": false,
          "AuthenticatorAssertionResponse": false,
          "AuthenticatorAttestationResponse": false,
          "AuthenticatorResponse": false,
          "BackgroundFetchManager": false,
          "BackgroundFetchRecord": false,
          "BackgroundFetchRegistration": false,
          "BarcodeDetector": false,
          "BarProp": false,
          "BaseAudioContext": false,
          "BatteryManager": false,
          "BeforeUnloadEvent": false,
          "BiquadFilterNode": false,
          "Blob": false,
          "BlobEvent": false,
          "Bluetooth": false,
          "BluetoothCharacteristicProperties": false,
          "BluetoothDevice": false,
          "BluetoothRemoteGATTCharacteristic": false,
          "BluetoothRemoteGATTDescriptor": false,
          "BluetoothRemoteGATTServer": false,
          "BluetoothRemoteGATTService": false,
          "BluetoothUUID": false,
          "blur": false,
          "BroadcastChannel": false,
          "BrowserCaptureMediaStreamTrack": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "cancelAnimationFrame": false,
          "cancelIdleCallback": false,
          "CanvasCaptureMediaStream": false,
          "CanvasCaptureMediaStreamTrack": false,
          "CanvasGradient": false,
          "CanvasPattern": false,
          "CanvasRenderingContext2D": false,
          "CaptureController": false,
          "CaretPosition": false,
          "CDATASection": false,
          "ChannelMergerNode": false,
          "ChannelSplitterNode": false,
          "ChapterInformation": false,
          "CharacterBoundsUpdateEvent": false,
          "CharacterData": false,
          "clearInterval": false,
          "clearTimeout": false,
          "clientInformation": false,
          "Clipboard": false,
          "ClipboardEvent": false,
          "ClipboardItem": false,
          "close": false,
          "closed": false,
          "CloseEvent": false,
          "CloseWatcher": false,
          "Comment": false,
          "CompositionEvent": false,
          "CompressionStream": false,
          "confirm": false,
          "console": "readonly",
          "ConstantSourceNode": false,
          "ContentVisibilityAutoStateChangeEvent": false,
          "ConvolverNode": false,
          "CookieChangeEvent": false,
          "CookieDeprecationLabel": false,
          "cookieStore": false,
          "CookieStore": false,
          "CookieStoreManager": false,
          "CountQueuingStrategy": false,
          "createImageBitmap": false,
          "Credential": false,
          "credentialless": false,
          "CredentialsContainer": false,
          "CropTarget": false,
          "crossOriginIsolated": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CSS": false,
          "CSSAnimation": false,
          "CSSConditionRule": false,
          "CSSContainerRule": false,
          "CSSCounterStyleRule": false,
          "CSSFontFaceRule": false,
          "CSSFontFeatureValuesRule": false,
          "CSSFontPaletteValuesRule": false,
          "CSSGroupingRule": false,
          "CSSImageValue": false,
          "CSSImportRule": false,
          "CSSKeyframeRule": false,
          "CSSKeyframesRule": false,
          "CSSKeywordValue": false,
          "CSSLayerBlockRule": false,
          "CSSLayerStatementRule": false,
          "CSSMarginRule": false,
          "CSSMathClamp": false,
          "CSSMathInvert": false,
          "CSSMathMax": false,
          "CSSMathMin": false,
          "CSSMathNegate": false,
          "CSSMathProduct": false,
          "CSSMathSum": false,
          "CSSMathValue": false,
          "CSSMatrixComponent": false,
          "CSSMediaRule": false,
          "CSSNamespaceRule": false,
          "CSSNestedDeclarations": false,
          "CSSNumericArray": false,
          "CSSNumericValue": false,
          "CSSPageDescriptors": false,
          "CSSPageRule": false,
          "CSSPerspective": false,
          "CSSPositionTryDescriptors": false,
          "CSSPositionTryRule": false,
          "CSSPositionValue": false,
          "CSSPropertyRule": false,
          "CSSRotate": false,
          "CSSRule": false,
          "CSSRuleList": false,
          "CSSScale": false,
          "CSSScopeRule": false,
          "CSSSkew": false,
          "CSSSkewX": false,
          "CSSSkewY": false,
          "CSSStartingStyleRule": false,
          "CSSStyleDeclaration": false,
          "CSSStyleRule": false,
          "CSSStyleSheet": false,
          "CSSStyleValue": false,
          "CSSSupportsRule": false,
          "CSSTransformComponent": false,
          "CSSTransformValue": false,
          "CSSTransition": false,
          "CSSTranslate": false,
          "CSSUnitValue": false,
          "CSSUnparsedValue": false,
          "CSSVariableReferenceValue": false,
          "CSSViewTransitionRule": false,
          "currentFrame": false,
          "currentTime": false,
          "CustomElementRegistry": false,
          "customElements": false,
          "CustomEvent": false,
          "CustomStateSet": false,
          "DataTransfer": false,
          "DataTransferItem": false,
          "DataTransferItemList": false,
          "DecompressionStream": false,
          "DelayNode": false,
          "DelegatedInkTrailPresenter": false,
          "DeviceMotionEvent": false,
          "DeviceMotionEventAcceleration": false,
          "DeviceMotionEventRotationRate": false,
          "DeviceOrientationEvent": false,
          "devicePixelRatio": false,
          "dispatchEvent": false,
          "document": "readonly",
          "Document": false,
          "DocumentFragment": false,
          "documentPictureInPicture": false,
          "DocumentPictureInPicture": false,
          "DocumentPictureInPictureEvent": false,
          "DocumentTimeline": false,
          "DocumentType": false,
          "DOMError": false,
          "DOMException": false,
          "DOMImplementation": false,
          "DOMMatrix": false,
          "DOMMatrixReadOnly": false,
          "DOMParser": false,
          "DOMPoint": false,
          "DOMPointReadOnly": false,
          "DOMQuad": false,
          "DOMRect": false,
          "DOMRectList": false,
          "DOMRectReadOnly": false,
          "DOMStringList": false,
          "DOMStringMap": false,
          "DOMTokenList": false,
          "DragEvent": false,
          "DynamicsCompressorNode": false,
          "EditContext": false,
          "Element": false,
          "ElementInternals": false,
          "EncodedAudioChunk": false,
          "EncodedVideoChunk": false,
          "ErrorEvent": false,
          "event": false,
          "Event": false,
          "EventCounts": false,
          "EventSource": false,
          "EventTarget": false,
          "external": false,
          "External": false,
          "EyeDropper": false,
          "FeaturePolicy": false,
          "FederatedCredential": false,
          "fence": false,
          "Fence": false,
          "FencedFrameConfig": false,
          "fetch": false,
          "fetchLater": false,
          "FetchLaterResult": false,
          "File": false,
          "FileList": false,
          "FileReader": false,
          "FileSystem": false,
          "FileSystemDirectoryEntry": false,
          "FileSystemDirectoryHandle": false,
          "FileSystemDirectoryReader": false,
          "FileSystemEntry": false,
          "FileSystemFileEntry": false,
          "FileSystemFileHandle": false,
          "FileSystemHandle": false,
          "FileSystemWritableFileStream": false,
          "find": false,
          "Float16Array": false,
          "focus": false,
          "FocusEvent": false,
          "FontData": false,
          "FontFace": false,
          "FontFaceSet": false,
          "FontFaceSetLoadEvent": false,
          "FormData": false,
          "FormDataEvent": false,
          "FragmentDirective": false,
          "frameElement": false,
          "frames": false,
          "GainNode": false,
          "Gamepad": false,
          "GamepadAxisMoveEvent": false,
          "GamepadButton": false,
          "GamepadButtonEvent": false,
          "GamepadEvent": false,
          "GamepadHapticActuator": false,
          "GamepadPose": false,
          "Geolocation": false,
          "GeolocationCoordinates": false,
          "GeolocationPosition": false,
          "GeolocationPositionError": false,
          "getComputedStyle": false,
          "getScreenDetails": false,
          "getSelection": false,
          "GPU": false,
          "GPUAdapter": false,
          "GPUAdapterInfo": false,
          "GPUBindGroup": false,
          "GPUBindGroupLayout": false,
          "GPUBuffer": false,
          "GPUBufferUsage": false,
          "GPUCanvasContext": false,
          "GPUColorWrite": false,
          "GPUCommandBuffer": false,
          "GPUCommandEncoder": false,
          "GPUCompilationInfo": false,
          "GPUCompilationMessage": false,
          "GPUComputePassEncoder": false,
          "GPUComputePipeline": false,
          "GPUDevice": false,
          "GPUDeviceLostInfo": false,
          "GPUError": false,
          "GPUExternalTexture": false,
          "GPUInternalError": false,
          "GPUMapMode": false,
          "GPUOutOfMemoryError": false,
          "GPUPipelineError": false,
          "GPUPipelineLayout": false,
          "GPUQuerySet": false,
          "GPUQueue": false,
          "GPURenderBundle": false,
          "GPURenderBundleEncoder": false,
          "GPURenderPassEncoder": false,
          "GPURenderPipeline": false,
          "GPUSampler": false,
          "GPUShaderModule": false,
          "GPUShaderStage": false,
          "GPUSupportedFeatures": false,
          "GPUSupportedLimits": false,
          "GPUTexture": false,
          "GPUTextureUsage": false,
          "GPUTextureView": false,
          "GPUUncapturedErrorEvent": false,
          "GPUValidationError": false,
          "GravitySensor": false,
          "Gyroscope": false,
          "HashChangeEvent": false,
          "Headers": false,
          "HID": false,
          "HIDConnectionEvent": false,
          "HIDDevice": false,
          "HIDInputReportEvent": false,
          "Highlight": false,
          "HighlightRegistry": false,
          "history": false,
          "History": false,
          "HTMLAllCollection": false,
          "HTMLAnchorElement": false,
          "HTMLAreaElement": false,
          "HTMLAudioElement": false,
          "HTMLBaseElement": false,
          "HTMLBodyElement": false,
          "HTMLBRElement": false,
          "HTMLButtonElement": false,
          "HTMLCanvasElement": false,
          "HTMLCollection": false,
          "HTMLDataElement": false,
          "HTMLDataListElement": false,
          "HTMLDetailsElement": false,
          "HTMLDialogElement": false,
          "HTMLDirectoryElement": false,
          "HTMLDivElement": false,
          "HTMLDListElement": false,
          "HTMLDocument": false,
          "HTMLElement": false,
          "HTMLEmbedElement": false,
          "HTMLFencedFrameElement": false,
          "HTMLFieldSetElement": false,
          "HTMLFontElement": false,
          "HTMLFormControlsCollection": false,
          "HTMLFormElement": false,
          "HTMLFrameElement": false,
          "HTMLFrameSetElement": false,
          "HTMLHeadElement": false,
          "HTMLHeadingElement": false,
          "HTMLHRElement": false,
          "HTMLHtmlElement": false,
          "HTMLIFrameElement": false,
          "HTMLImageElement": false,
          "HTMLInputElement": false,
          "HTMLLabelElement": false,
          "HTMLLegendElement": false,
          "HTMLLIElement": false,
          "HTMLLinkElement": false,
          "HTMLMapElement": false,
          "HTMLMarqueeElement": false,
          "HTMLMediaElement": false,
          "HTMLMenuElement": false,
          "HTMLMetaElement": false,
          "HTMLMeterElement": false,
          "HTMLModElement": false,
          "HTMLObjectElement": false,
          "HTMLOListElement": false,
          "HTMLOptGroupElement": false,
          "HTMLOptionElement": false,
          "HTMLOptionsCollection": false,
          "HTMLOutputElement": false,
          "HTMLParagraphElement": false,
          "HTMLParamElement": false,
          "HTMLPictureElement": false,
          "HTMLPreElement": false,
          "HTMLProgressElement": false,
          "HTMLQuoteElement": false,
          "HTMLScriptElement": false,
          "HTMLSelectElement": false,
          "HTMLSlotElement": false,
          "HTMLSourceElement": false,
          "HTMLSpanElement": false,
          "HTMLStyleElement": false,
          "HTMLTableCaptionElement": false,
          "HTMLTableCellElement": false,
          "HTMLTableColElement": false,
          "HTMLTableElement": false,
          "HTMLTableRowElement": false,
          "HTMLTableSectionElement": false,
          "HTMLTemplateElement": false,
          "HTMLTextAreaElement": false,
          "HTMLTimeElement": false,
          "HTMLTitleElement": false,
          "HTMLTrackElement": false,
          "HTMLUListElement": false,
          "HTMLUnknownElement": false,
          "HTMLVideoElement": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "IdentityCredential": false,
          "IdentityCredentialError": false,
          "IdentityProvider": false,
          "IdleDeadline": false,
          "IdleDetector": false,
          "IIRFilterNode": false,
          "Image": false,
          "ImageBitmap": false,
          "ImageBitmapRenderingContext": false,
          "ImageCapture": false,
          "ImageData": false,
          "ImageDecoder": false,
          "ImageTrack": false,
          "ImageTrackList": false,
          "indexedDB": false,
          "Ink": false,
          "innerHeight": false,
          "innerWidth": false,
          "InputDeviceCapabilities": false,
          "InputDeviceInfo": false,
          "InputEvent": false,
          "IntersectionObserver": false,
          "IntersectionObserverEntry": false,
          "isSecureContext": false,
          "Keyboard": false,
          "KeyboardEvent": false,
          "KeyboardLayoutMap": false,
          "KeyframeEffect": false,
          "LargestContentfulPaint": false,
          "LaunchParams": false,
          "launchQueue": false,
          "LaunchQueue": false,
          "LayoutShift": false,
          "LayoutShiftAttribution": false,
          "length": false,
          "LinearAccelerationSensor": false,
          "localStorage": false,
          "location": true,
          "Location": false,
          "locationbar": false,
          "Lock": false,
          "LockManager": false,
          "matchMedia": false,
          "MathMLElement": false,
          "MediaCapabilities": false,
          "MediaCapabilitiesInfo": false,
          "MediaDeviceInfo": false,
          "MediaDevices": false,
          "MediaElementAudioSourceNode": false,
          "MediaEncryptedEvent": false,
          "MediaError": false,
          "MediaKeyError": false,
          "MediaKeyMessageEvent": false,
          "MediaKeys": false,
          "MediaKeySession": false,
          "MediaKeyStatusMap": false,
          "MediaKeySystemAccess": false,
          "MediaList": false,
          "MediaMetadata": false,
          "MediaQueryList": false,
          "MediaQueryListEvent": false,
          "MediaRecorder": false,
          "MediaRecorderErrorEvent": false,
          "MediaSession": false,
          "MediaSource": false,
          "MediaSourceHandle": false,
          "MediaStream": false,
          "MediaStreamAudioDestinationNode": false,
          "MediaStreamAudioSourceNode": false,
          "MediaStreamEvent": false,
          "MediaStreamTrack": false,
          "MediaStreamTrackAudioSourceNode": false,
          "MediaStreamTrackAudioStats": false,
          "MediaStreamTrackEvent": false,
          "MediaStreamTrackGenerator": false,
          "MediaStreamTrackProcessor": false,
          "MediaStreamTrackVideoStats": false,
          "menubar": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "MIDIAccess": false,
          "MIDIConnectionEvent": false,
          "MIDIInput": false,
          "MIDIInputMap": false,
          "MIDIMessageEvent": false,
          "MIDIOutput": false,
          "MIDIOutputMap": false,
          "MIDIPort": false,
          "MimeType": false,
          "MimeTypeArray": false,
          "model": false,
          "ModelGenericSession": false,
          "ModelManager": false,
          "MouseEvent": false,
          "moveBy": false,
          "moveTo": false,
          "MutationEvent": false,
          "MutationObserver": false,
          "MutationRecord": false,
          "name": false,
          "NamedNodeMap": false,
          "NavigateEvent": false,
          "navigation": false,
          "Navigation": false,
          "NavigationActivation": false,
          "NavigationCurrentEntryChangeEvent": false,
          "NavigationDestination": false,
          "NavigationHistoryEntry": false,
          "NavigationPreloadManager": false,
          "NavigationTransition": false,
          "navigator": "readonly",
          "Navigator": false,
          "NavigatorLogin": false,
          "NavigatorManagedData": false,
          "NavigatorUAData": false,
          "NetworkInformation": false,
          "Node": false,
          "NodeFilter": false,
          "NodeIterator": false,
          "NodeList": false,
          "Notification": false,
          "NotifyPaintEvent": false,
          "NotRestoredReasonDetails": false,
          "NotRestoredReasons": false,
          "OfflineAudioCompletionEvent": false,
          "OfflineAudioContext": false,
          "offscreenBuffering": false,
          "OffscreenCanvas": false,
          "OffscreenCanvasRenderingContext2D": false,
          "onabort": true,
          "onafterprint": true,
          "onanimationcancel": true,
          "onanimationend": true,
          "onanimationiteration": true,
          "onanimationstart": true,
          "onappinstalled": true,
          "onauxclick": true,
          "onbeforeinput": true,
          "onbeforeinstallprompt": true,
          "onbeforematch": true,
          "onbeforeprint": true,
          "onbeforetoggle": true,
          "onbeforeunload": true,
          "onbeforexrselect": true,
          "onblur": true,
          "oncancel": true,
          "oncanplay": true,
          "oncanplaythrough": true,
          "onchange": true,
          "onclick": true,
          "onclose": true,
          "oncontentvisibilityautostatechange": true,
          "oncontextlost": true,
          "oncontextmenu": true,
          "oncontextrestored": true,
          "oncopy": true,
          "oncuechange": true,
          "oncut": true,
          "ondblclick": true,
          "ondevicemotion": true,
          "ondeviceorientation": true,
          "ondeviceorientationabsolute": true,
          "ondrag": true,
          "ondragend": true,
          "ondragenter": true,
          "ondragleave": true,
          "ondragover": true,
          "ondragstart": true,
          "ondrop": true,
          "ondurationchange": true,
          "onemptied": true,
          "onended": true,
          "onerror": true,
          "onfocus": true,
          "onformdata": true,
          "ongamepadconnected": true,
          "ongamepaddisconnected": true,
          "ongotpointercapture": true,
          "onhashchange": true,
          "oninput": true,
          "oninvalid": true,
          "onkeydown": true,
          "onkeypress": true,
          "onkeyup": true,
          "onlanguagechange": true,
          "onload": true,
          "onloadeddata": true,
          "onloadedmetadata": true,
          "onloadstart": true,
          "onlostpointercapture": true,
          "onmessage": true,
          "onmessageerror": true,
          "onmousedown": true,
          "onmouseenter": true,
          "onmouseleave": true,
          "onmousemove": true,
          "onmouseout": true,
          "onmouseover": true,
          "onmouseup": true,
          "onmousewheel": true,
          "onoffline": true,
          "ononline": true,
          "onpagehide": true,
          "onpagereveal": true,
          "onpageshow": true,
          "onpageswap": true,
          "onpaste": true,
          "onpause": true,
          "onplay": true,
          "onplaying": true,
          "onpointercancel": true,
          "onpointerdown": true,
          "onpointerenter": true,
          "onpointerleave": true,
          "onpointermove": true,
          "onpointerout": true,
          "onpointerover": true,
          "onpointerrawupdate": true,
          "onpointerup": true,
          "onpopstate": true,
          "onprogress": true,
          "onratechange": true,
          "onrejectionhandled": true,
          "onreset": true,
          "onresize": true,
          "onscroll": true,
          "onscrollend": true,
          "onscrollsnapchange": true,
          "onscrollsnapchanging": true,
          "onsearch": true,
          "onsecuritypolicyviolation": true,
          "onseeked": true,
          "onseeking": true,
          "onselect": true,
          "onselectionchange": true,
          "onselectstart": true,
          "onslotchange": true,
          "onstalled": true,
          "onstorage": true,
          "onsubmit": true,
          "onsuspend": true,
          "ontimeupdate": true,
          "ontoggle": true,
          "ontransitioncancel": true,
          "ontransitionend": true,
          "ontransitionrun": true,
          "ontransitionstart": true,
          "onunhandledrejection": true,
          "onunload": true,
          "onvolumechange": true,
          "onwaiting": true,
          "onwheel": true,
          "open": false,
          "opener": false,
          "Option": false,
          "OrientationSensor": false,
          "origin": false,
          "originAgentCluster": false,
          "OscillatorNode": false,
          "OTPCredential": false,
          "outerHeight": false,
          "outerWidth": false,
          "OverconstrainedError": false,
          "PageRevealEvent": false,
          "PageSwapEvent": false,
          "PageTransitionEvent": false,
          "pageXOffset": false,
          "pageYOffset": false,
          "PannerNode": false,
          "parent": false,
          "PasswordCredential": false,
          "Path2D": false,
          "PaymentAddress": false,
          "PaymentManager": false,
          "PaymentMethodChangeEvent": false,
          "PaymentRequest": false,
          "PaymentRequestUpdateEvent": false,
          "PaymentResponse": false,
          "performance": false,
          "Performance": false,
          "PerformanceElementTiming": false,
          "PerformanceEntry": false,
          "PerformanceEventTiming": false,
          "PerformanceLongAnimationFrameTiming": false,
          "PerformanceLongTaskTiming": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceNavigationTiming": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformancePaintTiming": false,
          "PerformanceResourceTiming": false,
          "PerformanceScriptTiming": false,
          "PerformanceServerTiming": false,
          "PerformanceTiming": false,
          "PeriodicSyncManager": false,
          "PeriodicWave": false,
          "Permissions": false,
          "PermissionStatus": false,
          "PERSISTENT": false,
          "personalbar": false,
          "PictureInPictureEvent": false,
          "PictureInPictureWindow": false,
          "Plugin": false,
          "PluginArray": false,
          "PointerEvent": false,
          "PopStateEvent": false,
          "postMessage": false,
          "Presentation": false,
          "PresentationAvailability": false,
          "PresentationConnection": false,
          "PresentationConnectionAvailableEvent": false,
          "PresentationConnectionCloseEvent": false,
          "PresentationConnectionList": false,
          "PresentationReceiver": false,
          "PresentationRequest": false,
          "PressureObserver": false,
          "PressureRecord": false,
          "print": false,
          "ProcessingInstruction": false,
          "Profiler": false,
          "ProgressEvent": false,
          "PromiseRejectionEvent": false,
          "prompt": false,
          "ProtectedAudience": false,
          "PublicKeyCredential": false,
          "PushManager": false,
          "PushSubscription": false,
          "PushSubscriptionOptions": false,
          "queryLocalFonts": false,
          "queueMicrotask": false,
          "RadioNodeList": false,
          "Range": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registerProcessor": false,
          "RelativeOrientationSensor": false,
          "RemotePlayback": false,
          "removeEventListener": false,
          "reportError": false,
          "ReportingObserver": false,
          "Request": false,
          "requestAnimationFrame": false,
          "requestIdleCallback": false,
          "resizeBy": false,
          "ResizeObserver": false,
          "ResizeObserverEntry": false,
          "ResizeObserverSize": false,
          "resizeTo": false,
          "Response": false,
          "RTCCertificate": false,
          "RTCDataChannel": false,
          "RTCDataChannelEvent": false,
          "RTCDtlsTransport": false,
          "RTCDTMFSender": false,
          "RTCDTMFToneChangeEvent": false,
          "RTCEncodedAudioFrame": false,
          "RTCEncodedVideoFrame": false,
          "RTCError": false,
          "RTCErrorEvent": false,
          "RTCIceCandidate": false,
          "RTCIceTransport": false,
          "RTCPeerConnection": false,
          "RTCPeerConnectionIceErrorEvent": false,
          "RTCPeerConnectionIceEvent": false,
          "RTCRtpReceiver": false,
          "RTCRtpScriptTransform": false,
          "RTCRtpSender": false,
          "RTCRtpTransceiver": false,
          "RTCSctpTransport": false,
          "RTCSessionDescription": false,
          "RTCStatsReport": false,
          "RTCTrackEvent": false,
          "sampleRate": false,
          "scheduler": false,
          "Scheduler": false,
          "Scheduling": false,
          "screen": false,
          "Screen": false,
          "ScreenDetailed": false,
          "ScreenDetails": false,
          "screenLeft": false,
          "ScreenOrientation": false,
          "screenTop": false,
          "screenX": false,
          "screenY": false,
          "ScriptProcessorNode": false,
          "scroll": false,
          "scrollbars": false,
          "scrollBy": false,
          "ScrollTimeline": false,
          "scrollTo": false,
          "scrollX": false,
          "scrollY": false,
          "SecurityPolicyViolationEvent": false,
          "Selection": false,
          "self": false,
          "Sensor": false,
          "SensorErrorEvent": false,
          "Serial": false,
          "SerialPort": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerRegistration": false,
          "sessionStorage": false,
          "setInterval": false,
          "setTimeout": false,
          "ShadowRoot": false,
          "sharedStorage": false,
          "SharedStorage": false,
          "SharedStorageWorklet": false,
          "SharedWorker": false,
          "showDirectoryPicker": false,
          "showOpenFilePicker": false,
          "showSaveFilePicker": false,
          "SnapEvent": false,
          "SourceBuffer": false,
          "SourceBufferList": false,
          "speechSynthesis": false,
          "SpeechSynthesis": false,
          "SpeechSynthesisErrorEvent": false,
          "SpeechSynthesisEvent": false,
          "SpeechSynthesisUtterance": false,
          "SpeechSynthesisVoice": false,
          "StaticRange": false,
          "status": false,
          "statusbar": false,
          "StereoPannerNode": false,
          "stop": false,
          "Storage": false,
          "StorageBucket": false,
          "StorageBucketManager": false,
          "StorageEvent": false,
          "StorageManager": false,
          "structuredClone": false,
          "styleMedia": false,
          "StylePropertyMap": false,
          "StylePropertyMapReadOnly": false,
          "StyleSheet": false,
          "StyleSheetList": false,
          "SubmitEvent": false,
          "SubtleCrypto": false,
          "SVGAElement": false,
          "SVGAngle": false,
          "SVGAnimatedAngle": false,
          "SVGAnimatedBoolean": false,
          "SVGAnimatedEnumeration": false,
          "SVGAnimatedInteger": false,
          "SVGAnimatedLength": false,
          "SVGAnimatedLengthList": false,
          "SVGAnimatedNumber": false,
          "SVGAnimatedNumberList": false,
          "SVGAnimatedPreserveAspectRatio": false,
          "SVGAnimatedRect": false,
          "SVGAnimatedString": false,
          "SVGAnimatedTransformList": false,
          "SVGAnimateElement": false,
          "SVGAnimateMotionElement": false,
          "SVGAnimateTransformElement": false,
          "SVGAnimationElement": false,
          "SVGCircleElement": false,
          "SVGClipPathElement": false,
          "SVGComponentTransferFunctionElement": false,
          "SVGDefsElement": false,
          "SVGDescElement": false,
          "SVGElement": false,
          "SVGEllipseElement": false,
          "SVGFEBlendElement": false,
          "SVGFEColorMatrixElement": false,
          "SVGFEComponentTransferElement": false,
          "SVGFECompositeElement": false,
          "SVGFEConvolveMatrixElement": false,
          "SVGFEDiffuseLightingElement": false,
          "SVGFEDisplacementMapElement": false,
          "SVGFEDistantLightElement": false,
          "SVGFEDropShadowElement": false,
          "SVGFEFloodElement": false,
          "SVGFEFuncAElement": false,
          "SVGFEFuncBElement": false,
          "SVGFEFuncGElement": false,
          "SVGFEFuncRElement": false,
          "SVGFEGaussianBlurElement": false,
          "SVGFEImageElement": false,
          "SVGFEMergeElement": false,
          "SVGFEMergeNodeElement": false,
          "SVGFEMorphologyElement": false,
          "SVGFEOffsetElement": false,
          "SVGFEPointLightElement": false,
          "SVGFESpecularLightingElement": false,
          "SVGFESpotLightElement": false,
          "SVGFETileElement": false,
          "SVGFETurbulenceElement": false,
          "SVGFilterElement": false,
          "SVGForeignObjectElement": false,
          "SVGGElement": false,
          "SVGGeometryElement": false,
          "SVGGradientElement": false,
          "SVGGraphicsElement": false,
          "SVGImageElement": false,
          "SVGLength": false,
          "SVGLengthList": false,
          "SVGLinearGradientElement": false,
          "SVGLineElement": false,
          "SVGMarkerElement": false,
          "SVGMaskElement": false,
          "SVGMatrix": false,
          "SVGMetadataElement": false,
          "SVGMPathElement": false,
          "SVGNumber": false,
          "SVGNumberList": false,
          "SVGPathElement": false,
          "SVGPatternElement": false,
          "SVGPoint": false,
          "SVGPointList": false,
          "SVGPolygonElement": false,
          "SVGPolylineElement": false,
          "SVGPreserveAspectRatio": false,
          "SVGRadialGradientElement": false,
          "SVGRect": false,
          "SVGRectElement": false,
          "SVGScriptElement": false,
          "SVGSetElement": false,
          "SVGStopElement": false,
          "SVGStringList": false,
          "SVGStyleElement": false,
          "SVGSVGElement": false,
          "SVGSwitchElement": false,
          "SVGSymbolElement": false,
          "SVGTextContentElement": false,
          "SVGTextElement": false,
          "SVGTextPathElement": false,
          "SVGTextPositioningElement": false,
          "SVGTitleElement": false,
          "SVGTransform": false,
          "SVGTransformList": false,
          "SVGTSpanElement": false,
          "SVGUnitTypes": false,
          "SVGUseElement": false,
          "SVGViewElement": false,
          "SyncManager": false,
          "TaskAttributionTiming": false,
          "TaskController": false,
          "TaskPriorityChangeEvent": false,
          "TaskSignal": false,
          "TEMPORARY": false,
          "Text": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TextEvent": false,
          "TextFormat": false,
          "TextFormatUpdateEvent": false,
          "TextMetrics": false,
          "TextTrack": false,
          "TextTrackCue": false,
          "TextTrackCueList": false,
          "TextTrackList": false,
          "TextUpdateEvent": false,
          "TimeEvent": false,
          "TimeRanges": false,
          "ToggleEvent": false,
          "toolbar": false,
          "top": false,
          "Touch": false,
          "TouchEvent": false,
          "TouchList": false,
          "TrackEvent": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "TransitionEvent": false,
          "TreeWalker": false,
          "TrustedHTML": false,
          "TrustedScript": false,
          "TrustedScriptURL": false,
          "TrustedTypePolicy": false,
          "TrustedTypePolicyFactory": false,
          "trustedTypes": false,
          "UIEvent": false,
          "URL": false,
          "URLPattern": false,
          "URLSearchParams": false,
          "USB": false,
          "USBAlternateInterface": false,
          "USBConfiguration": false,
          "USBConnectionEvent": false,
          "USBDevice": false,
          "USBEndpoint": false,
          "USBInterface": false,
          "USBInTransferResult": false,
          "USBIsochronousInTransferPacket": false,
          "USBIsochronousInTransferResult": false,
          "USBIsochronousOutTransferPacket": false,
          "USBIsochronousOutTransferResult": false,
          "USBOutTransferResult": false,
          "UserActivation": false,
          "ValidityState": false,
          "VideoColorSpace": false,
          "VideoDecoder": false,
          "VideoEncoder": false,
          "VideoFrame": false,
          "VideoPlaybackQuality": false,
          "ViewTimeline": false,
          "ViewTransition": false,
          "ViewTransitionTypeSet": false,
          "VirtualKeyboard": false,
          "VirtualKeyboardGeometryChangeEvent": false,
          "VisibilityStateEntry": false,
          "visualViewport": false,
          "VisualViewport": false,
          "VTTCue": false,
          "VTTRegion": false,
          "WakeLock": false,
          "WakeLockSentinel": false,
          "WaveShaperNode": false,
          "WebAssembly": false,
          "WebGL2RenderingContext": false,
          "WebGLActiveInfo": false,
          "WebGLBuffer": false,
          "WebGLContextEvent": false,
          "WebGLFramebuffer": false,
          "WebGLObject": false,
          "WebGLProgram": false,
          "WebGLQuery": false,
          "WebGLRenderbuffer": false,
          "WebGLRenderingContext": false,
          "WebGLSampler": false,
          "WebGLShader": false,
          "WebGLShaderPrecisionFormat": false,
          "WebGLSync": false,
          "WebGLTexture": false,
          "WebGLTransformFeedback": false,
          "WebGLUniformLocation": false,
          "WebGLVertexArrayObject": false,
          "WebSocket": false,
          "WebSocketError": false,
          "WebSocketStream": false,
          "WebTransport": false,
          "WebTransportBidirectionalStream": false,
          "WebTransportDatagramDuplexStream": false,
          "WebTransportError": false,
          "WebTransportReceiveStream": false,
          "WebTransportSendStream": false,
          "WGSLLanguageFeatures": false,
          "WheelEvent": false,
          "window": "readonly",
          "Window": false,
          "WindowControlsOverlay": false,
          "WindowControlsOverlayGeometryChangeEvent": false,
          "Worker": false,
          "Worklet": false,
          "WorkletGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLDocument": false,
          "XMLHttpRequest": false,
          "XMLHttpRequestEventTarget": false,
          "XMLHttpRequestUpload": false,
          "XMLSerializer": false,
          "XPathEvaluator": false,
          "XPathExpression": false,
          "XPathResult": false,
          "XRAnchor": false,
          "XRAnchorSet": false,
          "XRBoundedReferenceSpace": false,
          "XRCamera": false,
          "XRCPUDepthInformation": false,
          "XRDepthInformation": false,
          "XRDOMOverlayState": false,
          "XRFrame": false,
          "XRHand": false,
          "XRHitTestResult": false,
          "XRHitTestSource": false,
          "XRInputSource": false,
          "XRInputSourceArray": false,
          "XRInputSourceEvent": false,
          "XRInputSourcesChangeEvent": false,
          "XRJointPose": false,
          "XRJointSpace": false,
          "XRLayer": false,
          "XRLightEstimate": false,
          "XRLightProbe": false,
          "XRPose": false,
          "XRRay": false,
          "XRReferenceSpace": false,
          "XRReferenceSpaceEvent": false,
          "XRRenderState": false,
          "XRRigidTransform": false,
          "XRSession": false,
          "XRSessionEvent": false,
          "XRSpace": false,
          "XRSystem": false,
          "XRTransientInputHitTestResult": false,
          "XRTransientInputHitTestSource": false,
          "XRView": false,
          "XRViewerPose": false,
          "XRViewport": false,
          "XRWebGLBinding": false,
          "XRWebGLDepthInformation": false,
          "XRWebGLLayer": false,
          "XSLTProcessor": false,
          "__dirname": false,
          "__filename": false,
          "Buffer": false,
          "clearImmediate": false,
          "exports": true,
          "global": false,
          "module": false,
          "process": false,
          "require": false,
          "setImmediate": false,
          "AggregateError": false,
          "Array": false,
          "ArrayBuffer": false,
          "Atomics": false,
          "BigInt": false,
          "BigInt64Array": false,
          "BigUint64Array": false,
          "Boolean": false,
          "DataView": false,
          "Date": false,
          "decodeURI": false,
          "decodeURIComponent": false,
          "encodeURI": false,
          "encodeURIComponent": false,
          "Error": false,
          "escape": false,
          "eval": false,
          "EvalError": false,
          "FinalizationRegistry": false,
          "Float32Array": false,
          "Float64Array": false,
          "Function": false,
          "globalThis": false,
          "Infinity": false,
          "Int16Array": false,
          "Int32Array": false,
          "Int8Array": false,
          "Intl": false,
          "isFinite": false,
          "isNaN": false,
          "JSON": false,
          "Map": false,
          "Math": false,
          "NaN": false,
          "Number": false,
          "Object": false,
          "parseFloat": false,
          "parseInt": false,
          "Promise": false,
          "Proxy": false,
          "RangeError": false,
          "ReferenceError": false,
          "Reflect": false,
          "RegExp": false,
          "Set": false,
          "SharedArrayBuffer": false,
          "String": false,
          "Symbol": false,
          "SyntaxError": false,
          "TypeError": false,
          "Uint16Array": false,
          "Uint32Array": false,
          "Uint8Array": false,
          "Uint8ClampedArray": false,
          "undefined": false,
          "unescape": false,
          "URIError": false,
          "WeakMap": false,
          "WeakRef": false,
          "WeakSet": false
        },
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          },
          "ecmaVersion": "latest",
          "sourceType": "module"
        },
        "sourceType": "module"
      },
      "linterOptions": {
        "reportUnusedDisableDirectives": true,
        "reportUnusedInlineConfigs": "error"
      },
      "index": 6
    },
    {
      "name": "@chronoverse/javascript/rules",
      "files": [
        "**/*.?([cm])js?(x)"
      ],
      "plugins": {
        "js": {}
      },
      "rules": {
        "array-callback-return": [
          "error",
          {
            "allowImplicit": true
          }
        ],
        "arrow-body-style": [
          "error",
          "as-needed",
          {
            "requireReturnForObjectLiteral": false
          }
        ],
        "camelcase": [
          "error",
          {
            "allow": [
              "^UNSAFE_"
            ],
            "ignoreDestructuring": false,
            "properties": "never"
          }
        ],
        "class-methods-use-this": "error",
        "consistent-return": "error",
        "curly": [
          "error",
          "multi-line"
        ],
        "default-case": [
          "error",
          {
            "commentPattern": "^no default$"
          }
        ],
        "default-case-last": "error",
        "default-param-last": "error",
        "dot-notation": [
          "error",
          {
            "allowKeywords": true
          }
        ],
        "eqeqeq": [
          "error",
          "always"
        ],
        "func-style": [
          "error",
          "expression"
        ],
        "grouped-accessor-pairs": "error",
        "guard-for-in": "error",
        "new-cap": [
          "error",
          {
            "capIsNew": false
          }
        ],
        "no-alert": "error",
        "no-array-constructor": "error",
        "no-caller": "error",
        "no-console": [
          "warn",
          {
            "allow": [
              "warn",
              "error"
            ]
          }
        ],
        "no-constructor-return": "error",
        "no-else-return": [
          "error",
          {
            "allowElseIf": false
          }
        ],
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-implied-eval": "error",
        "no-inner-declarations": "error",
        "no-invalid-this": "off",
        "no-iterator": "error",
        "no-label-var": "error",
        "no-labels": [
          "error",
          {
            "allowLoop": false,
            "allowSwitch": false
          }
        ],
        "no-lone-blocks": "error",
        "no-loop-func": "error",
        "no-multi-str": "error",
        "no-nested-ternary": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-object-constructor": "off",
        "no-octal-escape": "error",
        "no-param-reassign": [
          "error",
          {
            "ignorePropertyModificationsFor": [
              "acc",
              "accumulator",
              "e",
              "ctx",
              "context",
              "req",
              "request",
              "res",
              "response",
              "$scope",
              "staticContext"
            ],
            "props": true
          }
        ],
        "no-proto": "error",
        "no-process-exit": "off",
        "no-restricted-properties": [
          "error",
          {
            "message": "Use assert.strictEqual instead of assert.equal.",
            "object": "assert",
            "property": "equal"
          },
          {
            "message": "Use assert.notStrictEqual instead of assert.notEqual.",
            "object": "assert",
            "property": "notEqual"
          },
          {
            "message": "Use assert.deepStrictEqual instead of assert.deepEqual.",
            "object": "assert",
            "property": "deepEqual"
          },
          {
            "message": "Use assert.notDeepStrictEqual instead of assert.notDeepEqual.",
            "object": "assert",
            "property": "notDeepEqual"
          },
          {
            "message": "Use `assert.deepStrictEqual()`.",
            "object": "assert",
            "property": "deepEqual"
          },
          {
            "message": "Use `assert.notDeepStrictEqual()`.",
            "object": "assert",
            "property": "notDeepEqual"
          },
          {
            "message": "Use `assert.strictEqual()` rather than `assert.equal()`.",
            "object": "assert",
            "property": "equal"
          },
          {
            "message": "Use `assert.notStrictEqual()` rather than `assert.notEqual()`.",
            "object": "assert",
            "property": "notEqual"
          },
          {
            "message": "arguments.callee is deprecated",
            "object": "arguments",
            "property": "callee"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "global",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "self",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isFinite instead",
            "object": "window",
            "property": "isFinite"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "global",
            "property": "isNaN"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "self",
            "property": "isNaN"
          },
          {
            "message": "Please use Number.isNaN instead",
            "object": "window",
            "property": "isNaN"
          },
          {
            "message": "Please use Object.defineProperty instead.",
            "property": "__defineGetter__"
          },
          {
            "message": "Please use Object.defineProperty instead.",
            "property": "__defineSetter__"
          },
          {
            "message": "Use `globalThis.crypto`.",
            "property": "webcrypto"
          },
          {
            "message": "Use the exponentiation operator (**) instead.",
            "object": "Math",
            "property": "pow"
          },
          {
            "message": "Use `Object.defineProperty` instead.",
            "property": "__defineGetter__"
          },
          {
            "message": "Use `Object.defineProperty` instead.",
            "property": "__defineSetter__"
          },
          {
            "message": "Use `Object.getOwnPropertyDescriptor` instead.",
            "property": "__lookupGetter__"
          },
          {
            "message": "Use `Object.getOwnPropertyDescriptor` instead.",
            "property": "__lookupSetter__"
          }
        ],
        "no-return-assign": [
          "error",
          "always"
        ],
        "no-script-url": "error",
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-shadow": "error",
        "no-throw-literal": "error",
        "no-undef": "error",
        "no-undef-init": "error",
        "no-undefined": "off",
        "no-underscore-dangle": [
          "error",
          {
            "allowAfterThis": true
          }
        ],
        "no-unmodified-loop-condition": "off",
        "no-unneeded-ternary": "error",
        "no-unreachable-loop": "error",
        "no-unused-expressions": [
          "error",
          {
            "allowShortCircuit": false,
            "allowTaggedTemplates": false,
            "allowTernary": false
          }
        ],
        "no-unused-vars": [
          "error",
          {
            "args": "after-used",
            "argsIgnorePattern": "^_",
            "ignoreRestSiblings": false,
            "vars": "all",
            "varsIgnorePattern": "^_"
          }
        ],
        "no-use-before-define": [
          "error",
          {
            "classes": false,
            "functions": false,
            "variables": true
          }
        ],
        "no-useless-assignment": "error",
        "no-useless-call": "error",
        "no-useless-computed-key": "error",
        "no-useless-concat": "error",
        "no-useless-constructor": "error",
        "no-useless-rename": "error",
        "no-useless-return": "error",
        "no-var": "error",
        "object-shorthand": [
          "error",
          "always",
          {
            "avoidExplicitReturnArrows": true,
            "avoidQuotes": true,
            "ignoreConstructors": false
          }
        ],
        "operator-assignment": "error",
        "prefer-arrow-callback": [
          "error",
          {
            "allowNamedFunctions": false,
            "allowUnboundThis": true
          }
        ],
        "prefer-const": [
          "error",
          {
            "destructuring": "all",
            "ignoreReadBeforeAssign": true
          }
        ],
        "prefer-exponentiation-operator": "error",
        "prefer-numeric-literals": "error",
        "prefer-object-has-own": "error",
        "prefer-promise-reject-errors": [
          "error",
          {
            "allowEmptyReject": true
          }
        ],
        "prefer-regex-literals": [
          "error",
          {
            "disallowRedundantWrapping": true
          }
        ],
        "prefer-rest-params": "error",
        "prefer-spread": "error",
        "prefer-template": "error",
        "radix": "error",
        "require-unicode-regexp": "off",
        "strict": [
          "error",
          "never"
        ],
        "symbol-description": "error",
        "unicode-bom": "error",
        "yoda": "error",
        "block-scoped-var": "error",
        "complexity": "off",
        "dot-location": "off",
        "max-classes-per-file": [
          "error",
          1
        ],
        "no-case-declarations": "error",
        "no-div-regex": "off",
        "no-empty-function": [
          "error",
          {
            "allow": [
              "arrowFunctions",
              "functions",
              "methods"
            ]
          }
        ],
        "no-empty-pattern": "error",
        "no-empty-static-block": "off",
        "no-eq-null": "off",
        "no-extra-label": "error",
        "no-fallthrough": [
          "error",
          {
            "commentPattern": ".*intentional fallthrough.*"
          }
        ],
        "no-floating-decimal": "off",
        "no-global-assign": [
          "error",
          {
            "exceptions": []
          }
        ],
        "no-implicit-coercion": [
          "error",
          {
            "allow": [
              "!!"
            ]
          }
        ],
        "no-implicit-globals": "off",
        "no-magic-numbers": [
          "off",
          {
            "detectObjects": false,
            "enforceConst": true,
            "ignore": [],
            "ignoreArrayIndexes": true
          }
        ],
        "no-multi-spaces": "off",
        "no-native-reassign": "off",
        "no-nonoctal-decimal-escape": "error",
        "no-octal": "error",
        "no-redeclare": "error",
        "no-return-await": "off",
        "no-self-assign": [
          "error",
          {
            "props": true
          }
        ],
        "no-unused-labels": "error",
        "no-useless-catch": "error",
        "no-useless-escape": "error",
        "no-void": "error",
        "no-warning-comments": [
          "off",
          {
            "location": "start",
            "terms": [
              "todo",
              "fixme",
              "xxx"
            ]
          }
        ],
        "no-with": "error",
        "prefer-named-capture-group": "off",
        "require-await": "off",
        "vars-on-top": "error",
        "wrap-iife": "off",
        "for-direction": "error",
        "getter-return": [
          "error",
          {
            "allowImplicit": true
          }
        ],
        "no-async-promise-executor": "error",
        "no-await-in-loop": "error",
        "no-compare-neg-zero": "error",
        "no-cond-assign": [
          "error",
          "except-parens"
        ],
        "no-constant-binary-expression": "error",
        "no-constant-condition": "error",
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-dupe-args": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": "error",
        "no-empty-character-class": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": "error",
        "no-extra-parens": "off",
        "no-extra-semi": "off",
        "no-func-assign": "error",
        "no-import-assign": "error",
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": "error",
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-negated-in-lhs": "off",
        "no-new-native-nonconstructor": "off",
        "no-obj-calls": "error",
        "no-promise-executor-return": "error",
        "no-prototype-builtins": "error",
        "no-regex-spaces": "error",
        "no-setter-return": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": [
          "error",
          {
            "enforceForOrderingRelations": true
          }
        ],
        "no-unsafe-optional-chaining": [
          "error",
          {
            "disallowArithmeticOperators": true
          }
        ],
        "no-unused-private-class-members": "error",
        "no-useless-backreference": "error",
        "require-atomic-updates": "off",
        "use-isnan": "error",
        "valid-typeof": [
          "error",
          {
            "requireStringLiterals": true
          }
        ],
        "arrow-parens": "off",
        "arrow-spacing": "off",
        "constructor-super": "error",
        "generator-star-spacing": "off",
        "no-class-assign": "error",
        "no-confusing-arrow": "off",
        "no-const-assign": "error",
        "no-dupe-class-members": "error",
        "no-duplicate-imports": "off",
        "no-new-symbol": "off",
        "no-restricted-exports": [
          "error",
          {
            "restrictedNamedExports": [
              "default",
              "then",
              "prototype",
              "__esModule",
              "arguments",
              "eval"
            ]
          }
        ],
        "no-restricted-imports": "off",
        "no-this-before-super": "error",
        "prefer-destructuring": [
          "error",
          {
            "AssignmentExpression": {
              "array": true,
              "object": false
            },
            "VariableDeclarator": {
              "array": false,
              "object": true
            }
          },
          {
            "enforceForRenamedProperties": false
          }
        ],
        "prefer-reflect": "off",
        "require-yield": "error",
        "rest-spread-spacing": "off",
        "sort-imports": "off",
        "template-curly-spacing": "off",
        "yield-star-spacing": "off",
        "init-declarations": "off",
        "no-catch-shadow": "off",
        "no-delete-var": "error",
        "no-restricted-globals": [
          "error",
          {
            "name": "__filename",
            "message": "Use import.meta.url instead."
          },
          {
            "name": "__dirname",
            "message": "Not available in ESM."
          },
          {
            "name": "exports",
            "message": "Not available in ESM."
          },
          {
            "name": "module",
            "message": "Not available in ESM."
          },
          {
            "name": "require",
            "message": "Use import instead."
          },
          {
            "name": "Buffer",
            "message": "Import 'Buffer' instead of using the global."
          },
          {
            "name": "process",
            "message": "Import 'process' instead of using the global."
          },
          {
            "name": "isFinite",
            "message": "Use Number.isFinite instead https://github.com/airbnb/javascript#standard-library--isfinite"
          },
          {
            "name": "isNaN",
            "message": "Use Number.isNaN instead https://github.com/airbnb/javascript#standard-library--isnan"
          },
          {
            "name": "global",
            "message": "Use `globalThis` instead."
          },
          {
            "name": "self",
            "message": "Use `globalThis` instead."
          },
          {
            "name": "addEventListener",
            "message": "Use window.addEventListener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "blur",
            "message": "Use window.blur instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "close",
            "message": "Use window.close instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "closed",
            "message": "Use window.closed instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "confirm",
            "message": "Use window.confirm instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "defaultStatus",
            "message": "Use window.defaultStatus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "defaultstatus",
            "message": "Use window.defaultstatus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "event",
            "message": "Use window.event instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "external",
            "message": "Use window.external instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "find",
            "message": "Use window.find instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "focus",
            "message": "Use window.focus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "frameElement",
            "message": "Use window.frameElement instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "frames",
            "message": "Use window.frames instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "history",
            "message": "Use window.history instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "innerHeight",
            "message": "Use window.innerHeight instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "innerWidth",
            "message": "Use window.innerWidth instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "length",
            "message": "Use window.length instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "location",
            "message": "Use window.location instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "locationbar",
            "message": "Use window.locationbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "menubar",
            "message": "Use window.menubar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "moveBy",
            "message": "Use window.moveBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "moveTo",
            "message": "Use window.moveTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "name",
            "message": "Use window.name instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onblur",
            "message": "Use window.onblur instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onerror",
            "message": "Use window.onerror instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onfocus",
            "message": "Use window.onfocus instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onload",
            "message": "Use window.onload instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onresize",
            "message": "Use window.onresize instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "onunload",
            "message": "Use window.onunload instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "open",
            "message": "Use window.open instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "opener",
            "message": "Use window.opener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "opera",
            "message": "Use window.opera instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "outerHeight",
            "message": "Use window.outerHeight instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "outerWidth",
            "message": "Use window.outerWidth instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "pageXOffset",
            "message": "Use window.pageXOffset instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "pageYOffset",
            "message": "Use window.pageYOffset instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "parent",
            "message": "Use window.parent instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "print",
            "message": "Use window.print instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "removeEventListener",
            "message": "Use window.removeEventListener instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "resizeBy",
            "message": "Use window.resizeBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "resizeTo",
            "message": "Use window.resizeTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "screen",
            "message": "Use window.screen instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "screenLeft",
            "message": "Use window.screenLeft instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "screenTop",
            "message": "Use window.screenTop instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "screenX",
            "message": "Use window.screenX instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "screenY",
            "message": "Use window.screenY instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scroll",
            "message": "Use window.scroll instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scrollbars",
            "message": "Use window.scrollbars instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scrollBy",
            "message": "Use window.scrollBy instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scrollTo",
            "message": "Use window.scrollTo instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scrollX",
            "message": "Use window.scrollX instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "scrollY",
            "message": "Use window.scrollY instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "self",
            "message": "Use window.self instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "status",
            "message": "Use window.status instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "statusbar",
            "message": "Use window.statusbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "stop",
            "message": "Use window.stop instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "toolbar",
            "message": "Use window.toolbar instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          },
          {
            "name": "top",
            "message": "Use window.top instead. https://github.com/facebook/create-react-app/blob/HEAD/packages/confusing-browser-globals/README.md"
          }
        ],
        "no-shadow-restricted-names": "error",
        "func-names": [
          "error",
          "as-needed"
        ],
        "max-params": [
          "error",
          5
        ],
        "new-parens": "off",
        "no-bitwise": "error",
        "no-lonely-if": "error",
        "no-multi-assign": "error",
        "no-plusplus": "error",
        "no-restricted-syntax": [
          "error",
          {
            "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array.",
            "selector": "ForInStatement"
          },
          {
            "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.",
            "selector": "ForOfStatement"
          },
          {
            "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand.",
            "selector": "LabeledStatement"
          },
          {
            "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize.",
            "selector": "WithStatement"
          },
          {
            "message": "`setInterval()` must be invoked with at least two arguments.",
            "selector": "CallExpression[callee.name='setInterval'][arguments.length<2]"
          },
          {
            "message": "Use `new` keyword when throwing an `Error`.",
            "selector": "ThrowStatement > CallExpression[callee.name=/Error$/]"
          },
          {
            "message": "Use String.prototype.slice() or String.prototype.substring() instead of String.prototype.substr()",
            "selector": "CallExpression[callee.property.name='substr']"
          },
          {
            "message": "`setTimeout()` must be invoked with at least two arguments.",
            "selector": "CallExpression[callee.name='setTimeout'][arguments.length<2]"
          },
          "TSEnumDeclaration[const=true]",
          "TSExportAssignment"
        ],
        "prefer-object-spread": "error",
        "callback-return": "off",
        "global-require": "off",
        "handle-callback-err": "off",
        "no-buffer-constructor": "off",
        "no-mixed-requires": "off",
        "no-new-require": "off",
        "no-path-concat": "off",
        "no-process-env": "off",
        "no-restricted-modules": "off",
        "no-sync": "off"
      },
      "index": 7
    },
    {
      "name": "@chronoverse/perfectionist/rules",
      "plugins": {
        "perfectionist": {}
      },
      "rules": {
        "perfectionist/sort-variable-declarations": "error",
        "perfectionist/sort-intersection-types": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-heritage-clauses": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-array-includes": "error",
        "perfectionist/sort-named-imports": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-named-exports": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-object-types": [
          "error",
          {
            "type": "natural",
            "ignoreCase": false,
            "partitionByComment": "^Part:.*",
            "partitionByNewLine": true,
            "customGroups": {
              "id": [
                "^id$",
                "^_?id$",
                "^key$",
                "^self$",
                "^userId$",
                "^sessionId$",
                "^accountId$",
                "^organizationId$",
                "^projectId$",
                "^teamId$",
                "^roleId$"
              ],
              "type": [
                "^type$",
                "^kind$",
                "^category$"
              ],
              "meta": [
                "^name$",
                "^title$",
                "^description$",
                "^meta$",
                "^summary$",
                "^label$",
                "^caption$",
                "^slug$"
              ],
              "alias": [
                "^alias$",
                "^as$"
              ],
              "status": [
                "^status$",
                "^state$",
                "^phase$",
                "^is[A-Z]",
                "^has[A-Z]"
              ],
              "counts": [
                "^count$",
                ".*Count$",
                "^size$",
                ".*Size$",
                "^total$",
                ".*Total$"
              ],
              "flags": [
                "^is[A-Z]",
                "^has[A-Z]",
                "^can[A-Z]",
                "^should[A-Z]",
                "^needs[A-Z]"
              ],
              "rules": [
                "^node$",
                "^messageId$",
                "^ruleId$"
              ],
              "timestamps": [
                "^createdAt$",
                "^updatedAt$",
                "^deletedAt$",
                "^startedAt$",
                "^endedAt$",
                "^publishedAt$"
              ]
            },
            "groups": [
              "id",
              "type",
              "meta",
              "alias",
              "status",
              "timestamps",
              "counts",
              "flags",
              "rules",
              "unknown"
            ]
          }
        ],
        "perfectionist/sort-union-types": "error",
        "perfectionist/sort-switch-case": "error",
        "perfectionist/sort-decorators": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-interfaces": [
          "error",
          {
            "type": "natural",
            "ignoreCase": false,
            "partitionByComment": "^Part:.*",
            "partitionByNewLine": true,
            "customGroups": {
              "id": [
                "^id$",
                "^_?id$",
                "^key$",
                "^self$",
                "^userId$",
                "^sessionId$",
                "^accountId$",
                "^organizationId$",
                "^projectId$",
                "^teamId$",
                "^roleId$"
              ],
              "type": [
                "^type$",
                "^kind$",
                "^category$"
              ],
              "meta": [
                "^name$",
                "^title$",
                "^description$",
                "^meta$",
                "^summary$",
                "^label$",
                "^caption$",
                "^slug$"
              ],
              "alias": [
                "^alias$",
                "^as$"
              ],
              "status": [
                "^status$",
                "^state$",
                "^phase$",
                "^is[A-Z]",
                "^has[A-Z]"
              ],
              "counts": [
                "^count$",
                ".*Count$",
                "^size$",
                ".*Size$",
                "^total$",
                ".*Total$"
              ],
              "flags": [
                "^is[A-Z]",
                "^has[A-Z]",
                "^can[A-Z]",
                "^should[A-Z]",
                "^needs[A-Z]"
              ],
              "rules": [
                "^node$",
                "^messageId$",
                "^ruleId$"
              ],
              "timestamps": [
                "^createdAt$",
                "^updatedAt$",
                "^deletedAt$",
                "^startedAt$",
                "^endedAt$",
                "^publishedAt$"
              ]
            },
            "groups": [
              "id",
              "type",
              "meta",
              "alias",
              "status",
              "timestamps",
              "counts",
              "flags",
              "rules",
              "unknown"
            ]
          }
        ],
        "perfectionist/sort-jsx-props": "error",
        "perfectionist/sort-modules": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-classes": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-imports": [
          "error",
          {
            "type": "natural",
            "groups": [
              "type",
              [
                "parent-type",
                "sibling-type",
                "index-type",
                "internal-type"
              ],
              "builtin",
              "external",
              "internal",
              [
                "parent",
                "sibling",
                "index"
              ],
              "side-effect",
              "object",
              "unknown"
            ],
            "newlinesBetween": "ignore",
            "order": "asc"
          }
        ],
        "perfectionist/sort-exports": [
          "error",
          {
            "type": "natural",
            "order": "asc"
          }
        ],
        "perfectionist/sort-objects": [
          "error",
          {
            "type": "natural",
            "ignoreCase": false,
            "partitionByComment": "^Part:.*",
            "partitionByNewLine": true,
            "customGroups": {
              "id": [
                "^id$",
                "^_?id$",
                "^key$",
                "^self$",
                "^userId$",
                "^sessionId$",
                "^accountId$",
                "^organizationId$",
                "^projectId$",
                "^teamId$",
                "^roleId$"
              ],
              "type": [
                "^type$",
                "^kind$",
                "^category$"
              ],
              "meta": [
                "^name$",
                "^title$",
                "^description$",
                "^meta$",
                "^summary$",
                "^label$",
                "^caption$",
                "^slug$"
              ],
              "alias": [
                "^alias$",
                "^as$"
              ],
              "status": [
                "^status$",
                "^state$",
                "^phase$",
                "^is[A-Z]",
                "^has[A-Z]"
              ],
              "counts": [
                "^count$",
                ".*Count$",
                "^size$",
                ".*Size$",
                "^total$",
                ".*Total$"
              ],
              "flags": [
                "^is[A-Z]",
                "^has[A-Z]",
                "^can[A-Z]",
                "^should[A-Z]",
                "^needs[A-Z]"
              ],
              "rules": [
                "^node$",
                "^messageId$",
                "^ruleId$"
              ],
              "timestamps": [
                "^createdAt$",
                "^updatedAt$",
                "^deletedAt$",
                "^startedAt$",
                "^endedAt$",
                "^publishedAt$"
              ]
            },
            "groups": [
              "id",
              "type",
              "meta",
              "alias",
              "status",
              "timestamps",
              "counts",
              "flags",
              "rules",
              "unknown"
            ]
          }
        ],
        "perfectionist/sort-enums": "error",
        "perfectionist/sort-sets": "error",
        "perfectionist/sort-maps": "error"
      },
      "index": 8
    },
    {
      "name": "@chronoverse/comments/rules",
      "plugins": {
        "@eslint-community/eslint-comments": {}
      },
      "rules": {
        "@eslint-community/eslint-comments/disable-enable-pair": "error",
        "@eslint-community/eslint-comments/no-aggregating-enable": "error",
        "@eslint-community/eslint-comments/no-duplicate-disable": "error",
        "@eslint-community/eslint-comments/no-unlimited-disable": "error",
        "@eslint-community/eslint-comments/no-unused-enable": "error"
      },
      "index": 9
    },
    {
      "name": "@chronoverse/node/rules",
      "plugins": {
        "n": {}
      },
      "rules": {
        "n/callback-return": [
          "error",
          [
            "cb",
            "callback",
            "next"
          ]
        ],
        "n/handle-callback-err": [
          "error",
          "err"
        ],
        "n/prefer-node-protocol": "error",
        "n/no-mixed-requires": "error",
        "n/no-new-require": "error",
        "n/no-path-concat": "error"
      },
      "index": 10
    },
    {
      "name": "@chronoverse/promise/rules",
      "plugins": {
        "promise": {}
      },
      "rules": {
        "promise/always-return": "off",
        "promise/no-return-wrap": [
          "error",
          {
            "allowReject": true
          }
        ],
        "promise/param-names": "error",
        "promise/catch-or-return": "off",
        "promise/no-native": "off",
        "promise/no-nesting": "warn",
        "promise/no-promise-in-callback": "warn",
        "promise/no-callback-in-promise": "warn",
        "promise/avoid-new": "off",
        "promise/no-new-statics": "error",
        "promise/no-return-in-finally": "warn",
        "promise/valid-params": "warn"
      },
      "index": 11
    },
    {
      "name": "@chronoverse/regexp/rules",
      "plugins": {
        "regexp": {}
      },
      "rules": {
        "no-control-regex": "error",
        "no-misleading-character-class": "error",
        "no-regex-spaces": "error",
        "prefer-regex-literals": "error",
        "no-invalid-regexp": "off",
        "no-useless-backreference": "off",
        "no-empty-character-class": "off",
        "regexp/confusing-quantifier": "warn",
        "regexp/control-character-escape": "error",
        "regexp/match-any": "error",
        "regexp/negation": "error",
        "regexp/no-contradiction-with-assertion": "error",
        "regexp/no-dupe-characters-character-class": "error",
        "regexp/no-dupe-disjunctions": "error",
        "regexp/no-empty-alternative": "warn",
        "regexp/no-empty-capturing-group": "error",
        "regexp/no-empty-character-class": "error",
        "regexp/no-empty-group": "error",
        "regexp/no-empty-lookarounds-assertion": "error",
        "regexp/no-empty-string-literal": "error",
        "regexp/no-escape-backspace": "error",
        "regexp/no-extra-lookaround-assertions": "error",
        "regexp/no-invalid-regexp": "error",
        "regexp/no-invisible-character": "error",
        "regexp/no-lazy-ends": "warn",
        "regexp/no-legacy-features": "error",
        "regexp/no-misleading-capturing-group": "error",
        "regexp/no-misleading-unicode-character": "error",
        "regexp/no-missing-g-flag": "error",
        "regexp/no-non-standard-flag": "error",
        "regexp/no-obscure-range": "error",
        "regexp/no-optional-assertion": "error",
        "regexp/no-potentially-useless-backreference": "warn",
        "regexp/no-super-linear-backtracking": "error",
        "regexp/no-trivially-nested-assertion": "error",
        "regexp/no-trivially-nested-quantifier": "error",
        "regexp/no-unused-capturing-group": "error",
        "regexp/no-useless-assertions": "error",
        "regexp/no-useless-backreference": "error",
        "regexp/no-useless-character-class": "error",
        "regexp/no-useless-dollar-replacements": "error",
        "regexp/no-useless-escape": "error",
        "regexp/no-useless-flag": "warn",
        "regexp/no-useless-lazy": "error",
        "regexp/no-useless-non-capturing-group": "error",
        "regexp/no-useless-quantifier": "error",
        "regexp/no-useless-range": "error",
        "regexp/no-useless-set-operand": "error",
        "regexp/no-useless-string-literal": "error",
        "regexp/no-useless-two-nums-quantifier": "error",
        "regexp/no-zero-quantifier": "error",
        "regexp/optimal-lookaround-quantifier": "warn",
        "regexp/optimal-quantifier-concatenation": "error",
        "regexp/prefer-character-class": "error",
        "regexp/prefer-d": "error",
        "regexp/prefer-plus-quantifier": "error",
        "regexp/prefer-predefined-assertion": "error",
        "regexp/prefer-question-quantifier": "error",
        "regexp/prefer-range": "error",
        "regexp/prefer-set-operation": "error",
        "regexp/prefer-star-quantifier": "error",
        "regexp/prefer-unicode-codepoint-escapes": "error",
        "regexp/prefer-w": "error",
        "regexp/simplify-set-operations": "error",
        "regexp/sort-flags": "error",
        "regexp/strict": "error",
        "regexp/use-ignore-case": "error"
      },
      "index": 12
    },
    {
      "plugins": {
        "depend": {}
      },
      "rules": {
        "depend/ban-dependencies": "error"
      },
      "name": "@chronoverse/dependency/setup > depend/flat/recommended",
      "index": 13
    },
    {
      "name": "@chronoverse/dependency/setup",
      "plugins": {
        "depend": {}
      },
      "index": 14
    },
    {
      "name": "@chronoverse/typescript/setup",
      "languageOptions": {
        "parser": "typescript-eslint/parser",
        "parserOptions": {
          "projectService": true,
          "sourceType": "module"
        }
      },
      "index": 15
    },
    {
      "name": "@chronoverse/typescript/rules",
      "files": [
        "**/*.?([m])ts?(x)"
      ],
      "plugins": {
        "@susisu/safe-typescript": {},
        "@typescript-eslint": {},
        "tsdoc": {}
      },
      "rules": {
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            "minimumDescriptionLength": 10
          }
        ],
        "no-array-constructor": "off",
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-empty-object-type": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-function-type": "error",
        "no-unused-expressions": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "args": "after-used",
            "argsIgnorePattern": "^_",
            "ignoreRestSiblings": false,
            "vars": "all",
            "varsIgnorePattern": "^_"
          }
        ],
        "@typescript-eslint/no-wrapper-object-types": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-void-expression": "error",
        "@typescript-eslint/no-deprecated": "error",
        "@typescript-eslint/no-duplicate-type-constituents": "error",
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "no-implied-eval": "off",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-meaningless-void-operator": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-misused-spread": "error",
        "@typescript-eslint/no-mixed-enums": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-template-expression": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-parameters": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-unsafe-unary-minus": "error",
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "no-throw-literal": "off",
        "@typescript-eslint/only-throw-error": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "prefer-promise-reject-errors": "off",
        "@typescript-eslint/prefer-promise-reject-errors": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/related-getter-setter-pairs": "error",
        "require-await": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNullish": false,
            "allowNumberAndString": false,
            "allowRegExp": false
          }
        ],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            "allowAny": false,
            "allowBoolean": false,
            "allowNever": false,
            "allowNullish": false,
            "allowNumber": false,
            "allowRegExp": false
          }
        ],
        "no-return-await": "off",
        "@typescript-eslint/return-await": [
          "error",
          "error-handling-correctness-only"
        ],
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "error",
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/class-literal-property-style": "error",
        "@typescript-eslint/consistent-generic-constructors": "error",
        "@typescript-eslint/consistent-indexed-object-style": "error",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": [
          "error",
          "interface"
        ],
        "dot-notation": "off",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "no-empty-function": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-find": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/no-loop-func": "error",
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "disallowTypeAnnotations": true,
            "fixStyle": "separate-type-imports",
            "prefer": "type-imports"
          }
        ],
        "tsdoc/syntax": "error",
        "@susisu/safe-typescript/no-object-assign": "error",
        "@susisu/safe-typescript/no-type-assertion": "error",
        "@susisu/safe-typescript/no-unsafe-object-enum-method": "error",
        "@susisu/safe-typescript/no-unsafe-object-property-check": "error",
        "@susisu/safe-typescript/no-unsafe-object-property-overwrite": "error"
      },
      "index": 16
    },
    {
      "name": "@chronoverse/react/setup",
      "languageOptions": {
        "globals": {
          "AbortController": false,
          "AbortSignal": false,
          "AbsoluteOrientationSensor": false,
          "AbstractRange": false,
          "Accelerometer": false,
          "addEventListener": false,
          "ai": false,
          "AI": false,
          "AITextSession": false,
          "alert": false,
          "AnalyserNode": false,
          "Animation": false,
          "AnimationEffect": false,
          "AnimationEvent": false,
          "AnimationPlaybackEvent": false,
          "AnimationTimeline": false,
          "atob": false,
          "Attr": false,
          "Audio": false,
          "AudioBuffer": false,
          "AudioBufferSourceNode": false,
          "AudioContext": false,
          "AudioData": false,
          "AudioDecoder": false,
          "AudioDestinationNode": false,
          "AudioEncoder": false,
          "AudioListener": false,
          "AudioNode": false,
          "AudioParam": false,
          "AudioParamMap": false,
          "AudioProcessingEvent": false,
          "AudioScheduledSourceNode": false,
          "AudioSinkInfo": false,
          "AudioWorklet": false,
          "AudioWorkletGlobalScope": false,
          "AudioWorkletNode": false,
          "AudioWorkletProcessor": false,
          "AuthenticatorAssertionResponse": false,
          "AuthenticatorAttestationResponse": false,
          "AuthenticatorResponse": false,
          "BackgroundFetchManager": false,
          "BackgroundFetchRecord": false,
          "BackgroundFetchRegistration": false,
          "BarcodeDetector": false,
          "BarProp": false,
          "BaseAudioContext": false,
          "BatteryManager": false,
          "BeforeUnloadEvent": false,
          "BiquadFilterNode": false,
          "Blob": false,
          "BlobEvent": false,
          "Bluetooth": false,
          "BluetoothCharacteristicProperties": false,
          "BluetoothDevice": false,
          "BluetoothRemoteGATTCharacteristic": false,
          "BluetoothRemoteGATTDescriptor": false,
          "BluetoothRemoteGATTServer": false,
          "BluetoothRemoteGATTService": false,
          "BluetoothUUID": false,
          "blur": false,
          "BroadcastChannel": false,
          "BrowserCaptureMediaStreamTrack": false,
          "btoa": false,
          "ByteLengthQueuingStrategy": false,
          "Cache": false,
          "caches": false,
          "CacheStorage": false,
          "cancelAnimationFrame": false,
          "cancelIdleCallback": false,
          "CanvasCaptureMediaStream": false,
          "CanvasCaptureMediaStreamTrack": false,
          "CanvasGradient": false,
          "CanvasPattern": false,
          "CanvasRenderingContext2D": false,
          "CaptureController": false,
          "CaretPosition": false,
          "CDATASection": false,
          "ChannelMergerNode": false,
          "ChannelSplitterNode": false,
          "ChapterInformation": false,
          "CharacterBoundsUpdateEvent": false,
          "CharacterData": false,
          "clearInterval": false,
          "clearTimeout": false,
          "clientInformation": false,
          "Clipboard": false,
          "ClipboardEvent": false,
          "ClipboardItem": false,
          "close": false,
          "closed": false,
          "CloseEvent": false,
          "CloseWatcher": false,
          "Comment": false,
          "CompositionEvent": false,
          "CompressionStream": false,
          "confirm": false,
          "console": false,
          "ConstantSourceNode": false,
          "ContentVisibilityAutoStateChangeEvent": false,
          "ConvolverNode": false,
          "CookieChangeEvent": false,
          "CookieDeprecationLabel": false,
          "cookieStore": false,
          "CookieStore": false,
          "CookieStoreManager": false,
          "CountQueuingStrategy": false,
          "createImageBitmap": false,
          "Credential": false,
          "credentialless": false,
          "CredentialsContainer": false,
          "CropTarget": false,
          "crossOriginIsolated": false,
          "crypto": false,
          "Crypto": false,
          "CryptoKey": false,
          "CSS": false,
          "CSSAnimation": false,
          "CSSConditionRule": false,
          "CSSContainerRule": false,
          "CSSCounterStyleRule": false,
          "CSSFontFaceRule": false,
          "CSSFontFeatureValuesRule": false,
          "CSSFontPaletteValuesRule": false,
          "CSSGroupingRule": false,
          "CSSImageValue": false,
          "CSSImportRule": false,
          "CSSKeyframeRule": false,
          "CSSKeyframesRule": false,
          "CSSKeywordValue": false,
          "CSSLayerBlockRule": false,
          "CSSLayerStatementRule": false,
          "CSSMarginRule": false,
          "CSSMathClamp": false,
          "CSSMathInvert": false,
          "CSSMathMax": false,
          "CSSMathMin": false,
          "CSSMathNegate": false,
          "CSSMathProduct": false,
          "CSSMathSum": false,
          "CSSMathValue": false,
          "CSSMatrixComponent": false,
          "CSSMediaRule": false,
          "CSSNamespaceRule": false,
          "CSSNestedDeclarations": false,
          "CSSNumericArray": false,
          "CSSNumericValue": false,
          "CSSPageDescriptors": false,
          "CSSPageRule": false,
          "CSSPerspective": false,
          "CSSPositionTryDescriptors": false,
          "CSSPositionTryRule": false,
          "CSSPositionValue": false,
          "CSSPropertyRule": false,
          "CSSRotate": false,
          "CSSRule": false,
          "CSSRuleList": false,
          "CSSScale": false,
          "CSSScopeRule": false,
          "CSSSkew": false,
          "CSSSkewX": false,
          "CSSSkewY": false,
          "CSSStartingStyleRule": false,
          "CSSStyleDeclaration": false,
          "CSSStyleRule": false,
          "CSSStyleSheet": false,
          "CSSStyleValue": false,
          "CSSSupportsRule": false,
          "CSSTransformComponent": false,
          "CSSTransformValue": false,
          "CSSTransition": false,
          "CSSTranslate": false,
          "CSSUnitValue": false,
          "CSSUnparsedValue": false,
          "CSSVariableReferenceValue": false,
          "CSSViewTransitionRule": false,
          "currentFrame": false,
          "currentTime": false,
          "CustomElementRegistry": false,
          "customElements": false,
          "CustomEvent": false,
          "CustomStateSet": false,
          "DataTransfer": false,
          "DataTransferItem": false,
          "DataTransferItemList": false,
          "DecompressionStream": false,
          "DelayNode": false,
          "DelegatedInkTrailPresenter": false,
          "DeviceMotionEvent": false,
          "DeviceMotionEventAcceleration": false,
          "DeviceMotionEventRotationRate": false,
          "DeviceOrientationEvent": false,
          "devicePixelRatio": false,
          "dispatchEvent": false,
          "document": false,
          "Document": false,
          "DocumentFragment": false,
          "documentPictureInPicture": false,
          "DocumentPictureInPicture": false,
          "DocumentPictureInPictureEvent": false,
          "DocumentTimeline": false,
          "DocumentType": false,
          "DOMError": false,
          "DOMException": false,
          "DOMImplementation": false,
          "DOMMatrix": false,
          "DOMMatrixReadOnly": false,
          "DOMParser": false,
          "DOMPoint": false,
          "DOMPointReadOnly": false,
          "DOMQuad": false,
          "DOMRect": false,
          "DOMRectList": false,
          "DOMRectReadOnly": false,
          "DOMStringList": false,
          "DOMStringMap": false,
          "DOMTokenList": false,
          "DragEvent": false,
          "DynamicsCompressorNode": false,
          "EditContext": false,
          "Element": false,
          "ElementInternals": false,
          "EncodedAudioChunk": false,
          "EncodedVideoChunk": false,
          "ErrorEvent": false,
          "event": false,
          "Event": false,
          "EventCounts": false,
          "EventSource": false,
          "EventTarget": false,
          "external": false,
          "External": false,
          "EyeDropper": false,
          "FeaturePolicy": false,
          "FederatedCredential": false,
          "fence": false,
          "Fence": false,
          "FencedFrameConfig": false,
          "fetch": false,
          "fetchLater": false,
          "FetchLaterResult": false,
          "File": false,
          "FileList": false,
          "FileReader": false,
          "FileSystem": false,
          "FileSystemDirectoryEntry": false,
          "FileSystemDirectoryHandle": false,
          "FileSystemDirectoryReader": false,
          "FileSystemEntry": false,
          "FileSystemFileEntry": false,
          "FileSystemFileHandle": false,
          "FileSystemHandle": false,
          "FileSystemWritableFileStream": false,
          "find": false,
          "Float16Array": false,
          "focus": false,
          "FocusEvent": false,
          "FontData": false,
          "FontFace": false,
          "FontFaceSet": false,
          "FontFaceSetLoadEvent": false,
          "FormData": false,
          "FormDataEvent": false,
          "FragmentDirective": false,
          "frameElement": false,
          "frames": false,
          "GainNode": false,
          "Gamepad": false,
          "GamepadAxisMoveEvent": false,
          "GamepadButton": false,
          "GamepadButtonEvent": false,
          "GamepadEvent": false,
          "GamepadHapticActuator": false,
          "GamepadPose": false,
          "Geolocation": false,
          "GeolocationCoordinates": false,
          "GeolocationPosition": false,
          "GeolocationPositionError": false,
          "getComputedStyle": false,
          "getScreenDetails": false,
          "getSelection": false,
          "GPU": false,
          "GPUAdapter": false,
          "GPUAdapterInfo": false,
          "GPUBindGroup": false,
          "GPUBindGroupLayout": false,
          "GPUBuffer": false,
          "GPUBufferUsage": false,
          "GPUCanvasContext": false,
          "GPUColorWrite": false,
          "GPUCommandBuffer": false,
          "GPUCommandEncoder": false,
          "GPUCompilationInfo": false,
          "GPUCompilationMessage": false,
          "GPUComputePassEncoder": false,
          "GPUComputePipeline": false,
          "GPUDevice": false,
          "GPUDeviceLostInfo": false,
          "GPUError": false,
          "GPUExternalTexture": false,
          "GPUInternalError": false,
          "GPUMapMode": false,
          "GPUOutOfMemoryError": false,
          "GPUPipelineError": false,
          "GPUPipelineLayout": false,
          "GPUQuerySet": false,
          "GPUQueue": false,
          "GPURenderBundle": false,
          "GPURenderBundleEncoder": false,
          "GPURenderPassEncoder": false,
          "GPURenderPipeline": false,
          "GPUSampler": false,
          "GPUShaderModule": false,
          "GPUShaderStage": false,
          "GPUSupportedFeatures": false,
          "GPUSupportedLimits": false,
          "GPUTexture": false,
          "GPUTextureUsage": false,
          "GPUTextureView": false,
          "GPUUncapturedErrorEvent": false,
          "GPUValidationError": false,
          "GravitySensor": false,
          "Gyroscope": false,
          "HashChangeEvent": false,
          "Headers": false,
          "HID": false,
          "HIDConnectionEvent": false,
          "HIDDevice": false,
          "HIDInputReportEvent": false,
          "Highlight": false,
          "HighlightRegistry": false,
          "history": false,
          "History": false,
          "HTMLAllCollection": false,
          "HTMLAnchorElement": false,
          "HTMLAreaElement": false,
          "HTMLAudioElement": false,
          "HTMLBaseElement": false,
          "HTMLBodyElement": false,
          "HTMLBRElement": false,
          "HTMLButtonElement": false,
          "HTMLCanvasElement": false,
          "HTMLCollection": false,
          "HTMLDataElement": false,
          "HTMLDataListElement": false,
          "HTMLDetailsElement": false,
          "HTMLDialogElement": false,
          "HTMLDirectoryElement": false,
          "HTMLDivElement": false,
          "HTMLDListElement": false,
          "HTMLDocument": false,
          "HTMLElement": false,
          "HTMLEmbedElement": false,
          "HTMLFencedFrameElement": false,
          "HTMLFieldSetElement": false,
          "HTMLFontElement": false,
          "HTMLFormControlsCollection": false,
          "HTMLFormElement": false,
          "HTMLFrameElement": false,
          "HTMLFrameSetElement": false,
          "HTMLHeadElement": false,
          "HTMLHeadingElement": false,
          "HTMLHRElement": false,
          "HTMLHtmlElement": false,
          "HTMLIFrameElement": false,
          "HTMLImageElement": false,
          "HTMLInputElement": false,
          "HTMLLabelElement": false,
          "HTMLLegendElement": false,
          "HTMLLIElement": false,
          "HTMLLinkElement": false,
          "HTMLMapElement": false,
          "HTMLMarqueeElement": false,
          "HTMLMediaElement": false,
          "HTMLMenuElement": false,
          "HTMLMetaElement": false,
          "HTMLMeterElement": false,
          "HTMLModElement": false,
          "HTMLObjectElement": false,
          "HTMLOListElement": false,
          "HTMLOptGroupElement": false,
          "HTMLOptionElement": false,
          "HTMLOptionsCollection": false,
          "HTMLOutputElement": false,
          "HTMLParagraphElement": false,
          "HTMLParamElement": false,
          "HTMLPictureElement": false,
          "HTMLPreElement": false,
          "HTMLProgressElement": false,
          "HTMLQuoteElement": false,
          "HTMLScriptElement": false,
          "HTMLSelectElement": false,
          "HTMLSlotElement": false,
          "HTMLSourceElement": false,
          "HTMLSpanElement": false,
          "HTMLStyleElement": false,
          "HTMLTableCaptionElement": false,
          "HTMLTableCellElement": false,
          "HTMLTableColElement": false,
          "HTMLTableElement": false,
          "HTMLTableRowElement": false,
          "HTMLTableSectionElement": false,
          "HTMLTemplateElement": false,
          "HTMLTextAreaElement": false,
          "HTMLTimeElement": false,
          "HTMLTitleElement": false,
          "HTMLTrackElement": false,
          "HTMLUListElement": false,
          "HTMLUnknownElement": false,
          "HTMLVideoElement": false,
          "IDBCursor": false,
          "IDBCursorWithValue": false,
          "IDBDatabase": false,
          "IDBFactory": false,
          "IDBIndex": false,
          "IDBKeyRange": false,
          "IDBObjectStore": false,
          "IDBOpenDBRequest": false,
          "IDBRequest": false,
          "IDBTransaction": false,
          "IDBVersionChangeEvent": false,
          "IdentityCredential": false,
          "IdentityCredentialError": false,
          "IdentityProvider": false,
          "IdleDeadline": false,
          "IdleDetector": false,
          "IIRFilterNode": false,
          "Image": false,
          "ImageBitmap": false,
          "ImageBitmapRenderingContext": false,
          "ImageCapture": false,
          "ImageData": false,
          "ImageDecoder": false,
          "ImageTrack": false,
          "ImageTrackList": false,
          "indexedDB": false,
          "Ink": false,
          "innerHeight": false,
          "innerWidth": false,
          "InputDeviceCapabilities": false,
          "InputDeviceInfo": false,
          "InputEvent": false,
          "IntersectionObserver": false,
          "IntersectionObserverEntry": false,
          "isSecureContext": false,
          "Keyboard": false,
          "KeyboardEvent": false,
          "KeyboardLayoutMap": false,
          "KeyframeEffect": false,
          "LargestContentfulPaint": false,
          "LaunchParams": false,
          "launchQueue": false,
          "LaunchQueue": false,
          "LayoutShift": false,
          "LayoutShiftAttribution": false,
          "length": false,
          "LinearAccelerationSensor": false,
          "localStorage": false,
          "location": true,
          "Location": false,
          "locationbar": false,
          "Lock": false,
          "LockManager": false,
          "matchMedia": false,
          "MathMLElement": false,
          "MediaCapabilities": false,
          "MediaCapabilitiesInfo": false,
          "MediaDeviceInfo": false,
          "MediaDevices": false,
          "MediaElementAudioSourceNode": false,
          "MediaEncryptedEvent": false,
          "MediaError": false,
          "MediaKeyError": false,
          "MediaKeyMessageEvent": false,
          "MediaKeys": false,
          "MediaKeySession": false,
          "MediaKeyStatusMap": false,
          "MediaKeySystemAccess": false,
          "MediaList": false,
          "MediaMetadata": false,
          "MediaQueryList": false,
          "MediaQueryListEvent": false,
          "MediaRecorder": false,
          "MediaRecorderErrorEvent": false,
          "MediaSession": false,
          "MediaSource": false,
          "MediaSourceHandle": false,
          "MediaStream": false,
          "MediaStreamAudioDestinationNode": false,
          "MediaStreamAudioSourceNode": false,
          "MediaStreamEvent": false,
          "MediaStreamTrack": false,
          "MediaStreamTrackAudioSourceNode": false,
          "MediaStreamTrackAudioStats": false,
          "MediaStreamTrackEvent": false,
          "MediaStreamTrackGenerator": false,
          "MediaStreamTrackProcessor": false,
          "MediaStreamTrackVideoStats": false,
          "menubar": false,
          "MessageChannel": false,
          "MessageEvent": false,
          "MessagePort": false,
          "MIDIAccess": false,
          "MIDIConnectionEvent": false,
          "MIDIInput": false,
          "MIDIInputMap": false,
          "MIDIMessageEvent": false,
          "MIDIOutput": false,
          "MIDIOutputMap": false,
          "MIDIPort": false,
          "MimeType": false,
          "MimeTypeArray": false,
          "model": false,
          "ModelGenericSession": false,
          "ModelManager": false,
          "MouseEvent": false,
          "moveBy": false,
          "moveTo": false,
          "MutationEvent": false,
          "MutationObserver": false,
          "MutationRecord": false,
          "name": false,
          "NamedNodeMap": false,
          "NavigateEvent": false,
          "navigation": false,
          "Navigation": false,
          "NavigationActivation": false,
          "NavigationCurrentEntryChangeEvent": false,
          "NavigationDestination": false,
          "NavigationHistoryEntry": false,
          "NavigationPreloadManager": false,
          "NavigationTransition": false,
          "navigator": false,
          "Navigator": false,
          "NavigatorLogin": false,
          "NavigatorManagedData": false,
          "NavigatorUAData": false,
          "NetworkInformation": false,
          "Node": false,
          "NodeFilter": false,
          "NodeIterator": false,
          "NodeList": false,
          "Notification": false,
          "NotifyPaintEvent": false,
          "NotRestoredReasonDetails": false,
          "NotRestoredReasons": false,
          "OfflineAudioCompletionEvent": false,
          "OfflineAudioContext": false,
          "offscreenBuffering": false,
          "OffscreenCanvas": false,
          "OffscreenCanvasRenderingContext2D": false,
          "onabort": true,
          "onafterprint": true,
          "onanimationcancel": true,
          "onanimationend": true,
          "onanimationiteration": true,
          "onanimationstart": true,
          "onappinstalled": true,
          "onauxclick": true,
          "onbeforeinput": true,
          "onbeforeinstallprompt": true,
          "onbeforematch": true,
          "onbeforeprint": true,
          "onbeforetoggle": true,
          "onbeforeunload": true,
          "onbeforexrselect": true,
          "onblur": true,
          "oncancel": true,
          "oncanplay": true,
          "oncanplaythrough": true,
          "onchange": true,
          "onclick": true,
          "onclose": true,
          "oncontentvisibilityautostatechange": true,
          "oncontextlost": true,
          "oncontextmenu": true,
          "oncontextrestored": true,
          "oncopy": true,
          "oncuechange": true,
          "oncut": true,
          "ondblclick": true,
          "ondevicemotion": true,
          "ondeviceorientation": true,
          "ondeviceorientationabsolute": true,
          "ondrag": true,
          "ondragend": true,
          "ondragenter": true,
          "ondragleave": true,
          "ondragover": true,
          "ondragstart": true,
          "ondrop": true,
          "ondurationchange": true,
          "onemptied": true,
          "onended": true,
          "onerror": true,
          "onfocus": true,
          "onformdata": true,
          "ongamepadconnected": true,
          "ongamepaddisconnected": true,
          "ongotpointercapture": true,
          "onhashchange": true,
          "oninput": true,
          "oninvalid": true,
          "onkeydown": true,
          "onkeypress": true,
          "onkeyup": true,
          "onlanguagechange": true,
          "onload": true,
          "onloadeddata": true,
          "onloadedmetadata": true,
          "onloadstart": true,
          "onlostpointercapture": true,
          "onmessage": true,
          "onmessageerror": true,
          "onmousedown": true,
          "onmouseenter": true,
          "onmouseleave": true,
          "onmousemove": true,
          "onmouseout": true,
          "onmouseover": true,
          "onmouseup": true,
          "onmousewheel": true,
          "onoffline": true,
          "ononline": true,
          "onpagehide": true,
          "onpagereveal": true,
          "onpageshow": true,
          "onpageswap": true,
          "onpaste": true,
          "onpause": true,
          "onplay": true,
          "onplaying": true,
          "onpointercancel": true,
          "onpointerdown": true,
          "onpointerenter": true,
          "onpointerleave": true,
          "onpointermove": true,
          "onpointerout": true,
          "onpointerover": true,
          "onpointerrawupdate": true,
          "onpointerup": true,
          "onpopstate": true,
          "onprogress": true,
          "onratechange": true,
          "onrejectionhandled": true,
          "onreset": true,
          "onresize": true,
          "onscroll": true,
          "onscrollend": true,
          "onscrollsnapchange": true,
          "onscrollsnapchanging": true,
          "onsearch": true,
          "onsecuritypolicyviolation": true,
          "onseeked": true,
          "onseeking": true,
          "onselect": true,
          "onselectionchange": true,
          "onselectstart": true,
          "onslotchange": true,
          "onstalled": true,
          "onstorage": true,
          "onsubmit": true,
          "onsuspend": true,
          "ontimeupdate": true,
          "ontoggle": true,
          "ontransitioncancel": true,
          "ontransitionend": true,
          "ontransitionrun": true,
          "ontransitionstart": true,
          "onunhandledrejection": true,
          "onunload": true,
          "onvolumechange": true,
          "onwaiting": true,
          "onwheel": true,
          "open": false,
          "opener": false,
          "Option": false,
          "OrientationSensor": false,
          "origin": false,
          "originAgentCluster": false,
          "OscillatorNode": false,
          "OTPCredential": false,
          "outerHeight": false,
          "outerWidth": false,
          "OverconstrainedError": false,
          "PageRevealEvent": false,
          "PageSwapEvent": false,
          "PageTransitionEvent": false,
          "pageXOffset": false,
          "pageYOffset": false,
          "PannerNode": false,
          "parent": false,
          "PasswordCredential": false,
          "Path2D": false,
          "PaymentAddress": false,
          "PaymentManager": false,
          "PaymentMethodChangeEvent": false,
          "PaymentRequest": false,
          "PaymentRequestUpdateEvent": false,
          "PaymentResponse": false,
          "performance": false,
          "Performance": false,
          "PerformanceElementTiming": false,
          "PerformanceEntry": false,
          "PerformanceEventTiming": false,
          "PerformanceLongAnimationFrameTiming": false,
          "PerformanceLongTaskTiming": false,
          "PerformanceMark": false,
          "PerformanceMeasure": false,
          "PerformanceNavigation": false,
          "PerformanceNavigationTiming": false,
          "PerformanceObserver": false,
          "PerformanceObserverEntryList": false,
          "PerformancePaintTiming": false,
          "PerformanceResourceTiming": false,
          "PerformanceScriptTiming": false,
          "PerformanceServerTiming": false,
          "PerformanceTiming": false,
          "PeriodicSyncManager": false,
          "PeriodicWave": false,
          "Permissions": false,
          "PermissionStatus": false,
          "PERSISTENT": false,
          "personalbar": false,
          "PictureInPictureEvent": false,
          "PictureInPictureWindow": false,
          "Plugin": false,
          "PluginArray": false,
          "PointerEvent": false,
          "PopStateEvent": false,
          "postMessage": false,
          "Presentation": false,
          "PresentationAvailability": false,
          "PresentationConnection": false,
          "PresentationConnectionAvailableEvent": false,
          "PresentationConnectionCloseEvent": false,
          "PresentationConnectionList": false,
          "PresentationReceiver": false,
          "PresentationRequest": false,
          "PressureObserver": false,
          "PressureRecord": false,
          "print": false,
          "ProcessingInstruction": false,
          "Profiler": false,
          "ProgressEvent": false,
          "PromiseRejectionEvent": false,
          "prompt": false,
          "ProtectedAudience": false,
          "PublicKeyCredential": false,
          "PushManager": false,
          "PushSubscription": false,
          "PushSubscriptionOptions": false,
          "queryLocalFonts": false,
          "queueMicrotask": false,
          "RadioNodeList": false,
          "Range": false,
          "ReadableByteStreamController": false,
          "ReadableStream": false,
          "ReadableStreamBYOBReader": false,
          "ReadableStreamBYOBRequest": false,
          "ReadableStreamDefaultController": false,
          "ReadableStreamDefaultReader": false,
          "registerProcessor": false,
          "RelativeOrientationSensor": false,
          "RemotePlayback": false,
          "removeEventListener": false,
          "reportError": false,
          "ReportingObserver": false,
          "Request": false,
          "requestAnimationFrame": false,
          "requestIdleCallback": false,
          "resizeBy": false,
          "ResizeObserver": false,
          "ResizeObserverEntry": false,
          "ResizeObserverSize": false,
          "resizeTo": false,
          "Response": false,
          "RTCCertificate": false,
          "RTCDataChannel": false,
          "RTCDataChannelEvent": false,
          "RTCDtlsTransport": false,
          "RTCDTMFSender": false,
          "RTCDTMFToneChangeEvent": false,
          "RTCEncodedAudioFrame": false,
          "RTCEncodedVideoFrame": false,
          "RTCError": false,
          "RTCErrorEvent": false,
          "RTCIceCandidate": false,
          "RTCIceTransport": false,
          "RTCPeerConnection": false,
          "RTCPeerConnectionIceErrorEvent": false,
          "RTCPeerConnectionIceEvent": false,
          "RTCRtpReceiver": false,
          "RTCRtpScriptTransform": false,
          "RTCRtpSender": false,
          "RTCRtpTransceiver": false,
          "RTCSctpTransport": false,
          "RTCSessionDescription": false,
          "RTCStatsReport": false,
          "RTCTrackEvent": false,
          "sampleRate": false,
          "scheduler": false,
          "Scheduler": false,
          "Scheduling": false,
          "screen": false,
          "Screen": false,
          "ScreenDetailed": false,
          "ScreenDetails": false,
          "screenLeft": false,
          "ScreenOrientation": false,
          "screenTop": false,
          "screenX": false,
          "screenY": false,
          "ScriptProcessorNode": false,
          "scroll": false,
          "scrollbars": false,
          "scrollBy": false,
          "ScrollTimeline": false,
          "scrollTo": false,
          "scrollX": false,
          "scrollY": false,
          "SecurityPolicyViolationEvent": false,
          "Selection": false,
          "self": false,
          "Sensor": false,
          "SensorErrorEvent": false,
          "Serial": false,
          "SerialPort": false,
          "ServiceWorker": false,
          "ServiceWorkerContainer": false,
          "ServiceWorkerRegistration": false,
          "sessionStorage": false,
          "setInterval": false,
          "setTimeout": false,
          "ShadowRoot": false,
          "sharedStorage": false,
          "SharedStorage": false,
          "SharedStorageWorklet": false,
          "SharedWorker": false,
          "showDirectoryPicker": false,
          "showOpenFilePicker": false,
          "showSaveFilePicker": false,
          "SnapEvent": false,
          "SourceBuffer": false,
          "SourceBufferList": false,
          "speechSynthesis": false,
          "SpeechSynthesis": false,
          "SpeechSynthesisErrorEvent": false,
          "SpeechSynthesisEvent": false,
          "SpeechSynthesisUtterance": false,
          "SpeechSynthesisVoice": false,
          "StaticRange": false,
          "status": false,
          "statusbar": false,
          "StereoPannerNode": false,
          "stop": false,
          "Storage": false,
          "StorageBucket": false,
          "StorageBucketManager": false,
          "StorageEvent": false,
          "StorageManager": false,
          "structuredClone": false,
          "styleMedia": false,
          "StylePropertyMap": false,
          "StylePropertyMapReadOnly": false,
          "StyleSheet": false,
          "StyleSheetList": false,
          "SubmitEvent": false,
          "SubtleCrypto": false,
          "SVGAElement": false,
          "SVGAngle": false,
          "SVGAnimatedAngle": false,
          "SVGAnimatedBoolean": false,
          "SVGAnimatedEnumeration": false,
          "SVGAnimatedInteger": false,
          "SVGAnimatedLength": false,
          "SVGAnimatedLengthList": false,
          "SVGAnimatedNumber": false,
          "SVGAnimatedNumberList": false,
          "SVGAnimatedPreserveAspectRatio": false,
          "SVGAnimatedRect": false,
          "SVGAnimatedString": false,
          "SVGAnimatedTransformList": false,
          "SVGAnimateElement": false,
          "SVGAnimateMotionElement": false,
          "SVGAnimateTransformElement": false,
          "SVGAnimationElement": false,
          "SVGCircleElement": false,
          "SVGClipPathElement": false,
          "SVGComponentTransferFunctionElement": false,
          "SVGDefsElement": false,
          "SVGDescElement": false,
          "SVGElement": false,
          "SVGEllipseElement": false,
          "SVGFEBlendElement": false,
          "SVGFEColorMatrixElement": false,
          "SVGFEComponentTransferElement": false,
          "SVGFECompositeElement": false,
          "SVGFEConvolveMatrixElement": false,
          "SVGFEDiffuseLightingElement": false,
          "SVGFEDisplacementMapElement": false,
          "SVGFEDistantLightElement": false,
          "SVGFEDropShadowElement": false,
          "SVGFEFloodElement": false,
          "SVGFEFuncAElement": false,
          "SVGFEFuncBElement": false,
          "SVGFEFuncGElement": false,
          "SVGFEFuncRElement": false,
          "SVGFEGaussianBlurElement": false,
          "SVGFEImageElement": false,
          "SVGFEMergeElement": false,
          "SVGFEMergeNodeElement": false,
          "SVGFEMorphologyElement": false,
          "SVGFEOffsetElement": false,
          "SVGFEPointLightElement": false,
          "SVGFESpecularLightingElement": false,
          "SVGFESpotLightElement": false,
          "SVGFETileElement": false,
          "SVGFETurbulenceElement": false,
          "SVGFilterElement": false,
          "SVGForeignObjectElement": false,
          "SVGGElement": false,
          "SVGGeometryElement": false,
          "SVGGradientElement": false,
          "SVGGraphicsElement": false,
          "SVGImageElement": false,
          "SVGLength": false,
          "SVGLengthList": false,
          "SVGLinearGradientElement": false,
          "SVGLineElement": false,
          "SVGMarkerElement": false,
          "SVGMaskElement": false,
          "SVGMatrix": false,
          "SVGMetadataElement": false,
          "SVGMPathElement": false,
          "SVGNumber": false,
          "SVGNumberList": false,
          "SVGPathElement": false,
          "SVGPatternElement": false,
          "SVGPoint": false,
          "SVGPointList": false,
          "SVGPolygonElement": false,
          "SVGPolylineElement": false,
          "SVGPreserveAspectRatio": false,
          "SVGRadialGradientElement": false,
          "SVGRect": false,
          "SVGRectElement": false,
          "SVGScriptElement": false,
          "SVGSetElement": false,
          "SVGStopElement": false,
          "SVGStringList": false,
          "SVGStyleElement": false,
          "SVGSVGElement": false,
          "SVGSwitchElement": false,
          "SVGSymbolElement": false,
          "SVGTextContentElement": false,
          "SVGTextElement": false,
          "SVGTextPathElement": false,
          "SVGTextPositioningElement": false,
          "SVGTitleElement": false,
          "SVGTransform": false,
          "SVGTransformList": false,
          "SVGTSpanElement": false,
          "SVGUnitTypes": false,
          "SVGUseElement": false,
          "SVGViewElement": false,
          "SyncManager": false,
          "TaskAttributionTiming": false,
          "TaskController": false,
          "TaskPriorityChangeEvent": false,
          "TaskSignal": false,
          "TEMPORARY": false,
          "Text": false,
          "TextDecoder": false,
          "TextDecoderStream": false,
          "TextEncoder": false,
          "TextEncoderStream": false,
          "TextEvent": false,
          "TextFormat": false,
          "TextFormatUpdateEvent": false,
          "TextMetrics": false,
          "TextTrack": false,
          "TextTrackCue": false,
          "TextTrackCueList": false,
          "TextTrackList": false,
          "TextUpdateEvent": false,
          "TimeEvent": false,
          "TimeRanges": false,
          "ToggleEvent": false,
          "toolbar": false,
          "top": false,
          "Touch": false,
          "TouchEvent": false,
          "TouchList": false,
          "TrackEvent": false,
          "TransformStream": false,
          "TransformStreamDefaultController": false,
          "TransitionEvent": false,
          "TreeWalker": false,
          "TrustedHTML": false,
          "TrustedScript": false,
          "TrustedScriptURL": false,
          "TrustedTypePolicy": false,
          "TrustedTypePolicyFactory": false,
          "trustedTypes": false,
          "UIEvent": false,
          "URL": false,
          "URLPattern": false,
          "URLSearchParams": false,
          "USB": false,
          "USBAlternateInterface": false,
          "USBConfiguration": false,
          "USBConnectionEvent": false,
          "USBDevice": false,
          "USBEndpoint": false,
          "USBInterface": false,
          "USBInTransferResult": false,
          "USBIsochronousInTransferPacket": false,
          "USBIsochronousInTransferResult": false,
          "USBIsochronousOutTransferPacket": false,
          "USBIsochronousOutTransferResult": false,
          "USBOutTransferResult": false,
          "UserActivation": false,
          "ValidityState": false,
          "VideoColorSpace": false,
          "VideoDecoder": false,
          "VideoEncoder": false,
          "VideoFrame": false,
          "VideoPlaybackQuality": false,
          "ViewTimeline": false,
          "ViewTransition": false,
          "ViewTransitionTypeSet": false,
          "VirtualKeyboard": false,
          "VirtualKeyboardGeometryChangeEvent": false,
          "VisibilityStateEntry": false,
          "visualViewport": false,
          "VisualViewport": false,
          "VTTCue": false,
          "VTTRegion": false,
          "WakeLock": false,
          "WakeLockSentinel": false,
          "WaveShaperNode": false,
          "WebAssembly": false,
          "WebGL2RenderingContext": false,
          "WebGLActiveInfo": false,
          "WebGLBuffer": false,
          "WebGLContextEvent": false,
          "WebGLFramebuffer": false,
          "WebGLObject": false,
          "WebGLProgram": false,
          "WebGLQuery": false,
          "WebGLRenderbuffer": false,
          "WebGLRenderingContext": false,
          "WebGLSampler": false,
          "WebGLShader": false,
          "WebGLShaderPrecisionFormat": false,
          "WebGLSync": false,
          "WebGLTexture": false,
          "WebGLTransformFeedback": false,
          "WebGLUniformLocation": false,
          "WebGLVertexArrayObject": false,
          "WebSocket": false,
          "WebSocketError": false,
          "WebSocketStream": false,
          "WebTransport": false,
          "WebTransportBidirectionalStream": false,
          "WebTransportDatagramDuplexStream": false,
          "WebTransportError": false,
          "WebTransportReceiveStream": false,
          "WebTransportSendStream": false,
          "WGSLLanguageFeatures": false,
          "WheelEvent": false,
          "window": false,
          "Window": false,
          "WindowControlsOverlay": false,
          "WindowControlsOverlayGeometryChangeEvent": false,
          "Worker": false,
          "Worklet": false,
          "WorkletGlobalScope": false,
          "WritableStream": false,
          "WritableStreamDefaultController": false,
          "WritableStreamDefaultWriter": false,
          "XMLDocument": false,
          "XMLHttpRequest": false,
          "XMLHttpRequestEventTarget": false,
          "XMLHttpRequestUpload": false,
          "XMLSerializer": false,
          "XPathEvaluator": false,
          "XPathExpression": false,
          "XPathResult": false,
          "XRAnchor": false,
          "XRAnchorSet": false,
          "XRBoundedReferenceSpace": false,
          "XRCamera": false,
          "XRCPUDepthInformation": false,
          "XRDepthInformation": false,
          "XRDOMOverlayState": false,
          "XRFrame": false,
          "XRHand": false,
          "XRHitTestResult": false,
          "XRHitTestSource": false,
          "XRInputSource": false,
          "XRInputSourceArray": false,
          "XRInputSourceEvent": false,
          "XRInputSourcesChangeEvent": false,
          "XRJointPose": false,
          "XRJointSpace": false,
          "XRLayer": false,
          "XRLightEstimate": false,
          "XRLightProbe": false,
          "XRPose": false,
          "XRRay": false,
          "XRReferenceSpace": false,
          "XRReferenceSpaceEvent": false,
          "XRRenderState": false,
          "XRRigidTransform": false,
          "XRSession": false,
          "XRSessionEvent": false,
          "XRSpace": false,
          "XRSystem": false,
          "XRTransientInputHitTestResult": false,
          "XRTransientInputHitTestSource": false,
          "XRView": false,
          "XRViewerPose": false,
          "XRViewport": false,
          "XRWebGLBinding": false,
          "XRWebGLDepthInformation": false,
          "XRWebGLLayer": false,
          "XSLTProcessor": false
        },
        "parserOptions": {
          "ecmaFeatures": {
            "jsx": true
          }
        }
      },
      "index": 17
    },
    {
      "name": "@chronoverse/react/rules > @eslint-react/recommended-typescript",
      "plugins": {
        "@eslint-react": {},
        "@eslint-react/dom": {},
        "@eslint-react/web-api": {},
        "@eslint-react/debug": {},
        "@eslint-react/hooks-extra": {},
        "@eslint-react/naming-convention": {}
      },
      "rules": {
        "@eslint-react/jsx-no-duplicate-props": "off",
        "@eslint-react/jsx-uses-react": "off",
        "@eslint-react/jsx-uses-vars": "off",
        "@eslint-react/no-access-state-in-setstate": "error",
        "@eslint-react/no-array-index-key": "warn",
        "@eslint-react/no-children-count": "warn",
        "@eslint-react/no-children-for-each": "warn",
        "@eslint-react/no-children-map": "warn",
        "@eslint-react/no-children-only": "warn",
        "@eslint-react/no-children-to-array": "warn",
        "@eslint-react/no-clone-element": "warn",
        "@eslint-react/no-comment-textnodes": "warn",
        "@eslint-react/no-component-will-mount": "error",
        "@eslint-react/no-component-will-receive-props": "error",
        "@eslint-react/no-component-will-update": "error",
        "@eslint-react/no-context-provider": "warn",
        "@eslint-react/no-create-ref": "error",
        "@eslint-react/no-default-props": "error",
        "@eslint-react/no-direct-mutation-state": "error",
        "@eslint-react/no-duplicate-key": "warn",
        "@eslint-react/no-forward-ref": "warn",
        "@eslint-react/no-implicit-key": "warn",
        "@eslint-react/no-missing-key": "error",
        "@eslint-react/no-misused-capture-owner-stack": "error",
        "@eslint-react/no-nested-component-definitions": "error",
        "@eslint-react/no-nested-lazy-component-declarations": "warn",
        "@eslint-react/no-prop-types": "error",
        "@eslint-react/no-redundant-should-component-update": "error",
        "@eslint-react/no-set-state-in-component-did-mount": "warn",
        "@eslint-react/no-set-state-in-component-did-update": "warn",
        "@eslint-react/no-set-state-in-component-will-update": "warn",
        "@eslint-react/no-string-refs": "error",
        "@eslint-react/no-unsafe-component-will-mount": "warn",
        "@eslint-react/no-unsafe-component-will-receive-props": "warn",
        "@eslint-react/no-unsafe-component-will-update": "warn",
        "@eslint-react/no-unstable-context-value": "warn",
        "@eslint-react/no-unstable-default-props": "warn",
        "@eslint-react/no-unused-class-component-members": "warn",
        "@eslint-react/no-unused-state": "warn",
        "@eslint-react/no-use-context": "warn",
        "@eslint-react/no-useless-forward-ref": "warn",
        "@eslint-react/dom/no-dangerously-set-innerhtml": "warn",
        "@eslint-react/dom/no-dangerously-set-innerhtml-with-children": "error",
        "@eslint-react/dom/no-find-dom-node": "error",
        "@eslint-react/dom/no-flush-sync": "error",
        "@eslint-react/dom/no-hydrate": "error",
        "@eslint-react/dom/no-missing-button-type": "warn",
        "@eslint-react/dom/no-missing-iframe-sandbox": "warn",
        "@eslint-react/dom/no-namespace": "error",
        "@eslint-react/dom/no-render": "error",
        "@eslint-react/dom/no-render-return-value": "error",
        "@eslint-react/dom/no-script-url": "warn",
        "@eslint-react/dom/no-unsafe-iframe-sandbox": "warn",
        "@eslint-react/dom/no-unsafe-target-blank": "warn",
        "@eslint-react/dom/no-use-form-state": "error",
        "@eslint-react/dom/no-void-elements-with-children": "error",
        "@eslint-react/web-api/no-leaked-event-listener": "warn",
        "@eslint-react/web-api/no-leaked-interval": "warn",
        "@eslint-react/web-api/no-leaked-resize-observer": "warn",
        "@eslint-react/web-api/no-leaked-timeout": "warn",
        "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect": "warn",
        "@eslint-react/hooks-extra/no-unnecessary-use-prefix": "warn",
        "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization": "warn",
        "@eslint-react/naming-convention/context-name": "warn",
        "@eslint-react/dom/no-unknown-property": "off"
      },
      "settings": {
        "react-x": {
          "version": "detect",
          "importSource": "react",
          "strict": true,
          "skipImportCheck": true,
          "polymorphicPropName": "as",
          "additionalComponents": [],
          "additionalHooks": {
            "useEffect": [
              "useIsomorphicLayoutEffect"
            ],
            "useLayoutEffect": [
              "useIsomorphicLayoutEffect"
            ]
          }
        }
      },
      "files": [
        "**/*.?([m])ts?(x)"
      ],
      "index": 18
    },
    {
      "name": "@chronoverse/react/rules",
      "files": [
        "**/*.?([m])ts?(x)"
      ],
      "index": 19
    },
    {
      "name": "@chronoverse/jsdoc/rules",
      "plugins": {
        "jsdoc": {}
      },
      "rules": {
        "jsdoc/check-access": "error",
        "jsdoc/check-alignment": "error",
        "jsdoc/check-examples": "off",
        "jsdoc/check-indentation": "off",
        "jsdoc/check-line-alignment": "off",
        "jsdoc/check-param-names": "error",
        "jsdoc/check-property-names": "error",
        "jsdoc/check-syntax": "error",
        "jsdoc/check-tag-names": "error",
        "jsdoc/check-template-names": "off",
        "jsdoc/check-types": "error",
        "jsdoc/check-values": [
          "error",
          {
            "allowedLicenses": true
          }
        ],
        "jsdoc/convert-to-jsdoc-comments": "off",
        "jsdoc/empty-tags": "error",
        "jsdoc/implements-on-classes": "error",
        "jsdoc/imports-as-dependencies": "off",
        "jsdoc/informative-docs": "off",
        "jsdoc/lines-before-block": "off",
        "jsdoc/match-description": "off",
        "jsdoc/match-name": "off",
        "jsdoc/multiline-blocks": "error",
        "jsdoc/no-bad-blocks": "error",
        "jsdoc/no-blank-block-descriptions": "off",
        "jsdoc/no-blank-blocks": "off",
        "jsdoc/no-defaults": "off",
        "jsdoc/no-missing-syntax": "off",
        "jsdoc/no-multi-asterisks": [
          "error",
          {
            "allowWhitespace": true
          }
        ],
        "jsdoc/no-restricted-syntax": "off",
        "jsdoc/no-types": "error",
        "jsdoc/no-undefined-types": "off",
        "jsdoc/require-asterisk-prefix": "error",
        "jsdoc/require-description": [
          "error",
          {
            "checkConstructors": false
          }
        ],
        "jsdoc/require-description-complete-sentence": "off",
        "jsdoc/require-example": "off",
        "jsdoc/require-file-overview": "off",
        "jsdoc/require-hyphen-before-param-description": [
          "error",
          "never"
        ],
        "jsdoc/require-jsdoc": [
          "error",
          {
            "require": {
              "ClassDeclaration": true
            }
          }
        ],
        "jsdoc/require-param": "error",
        "jsdoc/require-param-description": "error",
        "jsdoc/require-param-name": "error",
        "jsdoc/require-param-type": "error",
        "jsdoc/require-property": "error",
        "jsdoc/require-property-description": "error",
        "jsdoc/require-property-name": "error",
        "jsdoc/require-property-type": "error",
        "jsdoc/require-returns": [
          "error",
          {
            "forceRequireReturn": true,
            "forceReturnsWithAsync": true
          }
        ],
        "jsdoc/require-returns-check": "error",
        "jsdoc/require-returns-description": "error",
        "jsdoc/require-returns-type": "error",
        "jsdoc/require-template": "off",
        "jsdoc/require-throws": "error",
        "jsdoc/require-yields": "off",
        "jsdoc/require-yields-check": "error",
        "jsdoc/sort-tags": "off",
        "jsdoc/tag-lines": [
          "error",
          "never",
          {
            "tags": {
              "example": {
                "lines": "always"
              },
              "fileoverview": {
                "lines": "any"
              }
            },
            "startLines": 0
          }
        ],
        "jsdoc/text-escaping": "off",
        "jsdoc/valid-types": "error"
      },
      "index": 20
    },
    {
      "name": "@chronoverse/css/setup",
      "languageOptions": {
        "customSyntax": {
          "atrules": {
            "apply": {
              "prelude": "<ident>+"
            },
            "tailwind": {
              "prelude": "base | components | utilities"
            },
            "config": {
              "prelude": "<string>"
            }
          }
        }
      },
      "plugins": {
        "css": {}
      },
      "index": 21
    },
    {
      "name": "@chronoverse/css/rules",
      "files": [
        "**/*.css"
      ],
      "plugins": {
        "css": {}
      },
      "rules": {
        "css/no-empty-blocks": "error",
        "css/no-duplicate-imports": "error",
        "css/no-invalid-at-rules": "error",
        "css/no-invalid-properties": "error",
        "css/use-baseline": "warn"
      },
      "index": 22
    }
  ],
  "rules": {
    "accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true,
          "getWithoutSet": false,
          "setWithoutGet": true
        }
      ],
      "docs": {
        "description": "Enforce getter and setter pairs in objects and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/accessor-pairs"
      },
      "name": "accessor-pairs",
      "plugin": "eslint"
    },
    "array-bracket-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-bracket-newline",
              "url": "https://eslint.style/rules/js/array-bracket-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "name": "array-bracket-newline",
      "plugin": "eslint"
    },
    "array-bracket-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-bracket-spacing",
              "url": "https://eslint.style/rules/js/array-bracket-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "name": "array-bracket-spacing",
      "plugin": "eslint"
    },
    "array-callback-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false,
          "checkForEach": false,
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in callbacks of array methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-callback-return"
      },
      "hasSuggestions": true,
      "name": "array-callback-return",
      "plugin": "eslint"
    },
    "array-element-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "array-element-newline",
              "url": "https://eslint.style/rules/js/array-element-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "name": "array-element-newline",
      "plugin": "eslint"
    },
    "arrow-body-style": {
      "type": "suggestion",
      "defaultOptions": [
        "as-needed"
      ],
      "docs": {
        "description": "Require braces around arrow function bodies",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/arrow-body-style"
      },
      "fixable": "code",
      "name": "arrow-body-style",
      "plugin": "eslint"
    },
    "arrow-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "arrow-parens",
              "url": "https://eslint.style/rules/js/arrow-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around arrow function arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-parens"
      },
      "fixable": "code",
      "name": "arrow-parens",
      "plugin": "eslint"
    },
    "arrow-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "arrow-spacing",
              "url": "https://eslint.style/rules/js/arrow-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "name": "arrow-spacing",
      "plugin": "eslint"
    },
    "block-scoped-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of variables within the scope they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-scoped-var"
      },
      "name": "block-scoped-var",
      "plugin": "eslint"
    },
    "block-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "block-spacing",
              "url": "https://eslint.style/rules/js/block-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/block-spacing"
      },
      "fixable": "whitespace",
      "name": "block-spacing",
      "plugin": "eslint"
    },
    "brace-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "brace-style",
              "url": "https://eslint.style/rules/js/brace-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/brace-style"
      },
      "fixable": "whitespace",
      "name": "brace-style",
      "plugin": "eslint"
    },
    "callback-return": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "callback-return",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/callback-return.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements after callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/callback-return"
      },
      "name": "callback-return",
      "plugin": "eslint"
    },
    "camelcase": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "ignoreDestructuring": false,
          "ignoreGlobals": false,
          "ignoreImports": false,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce camelcase naming convention",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/camelcase"
      },
      "name": "camelcase",
      "plugin": "eslint"
    },
    "capitalized-comments": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce or disallow capitalization of the first letter of a comment",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/capitalized-comments"
      },
      "fixable": "code",
      "name": "capitalized-comments",
      "plugin": "eslint"
    },
    "class-methods-use-this": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassFields": true,
          "exceptMethods": [],
          "ignoreOverrideMethods": false
        }
      ],
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/class-methods-use-this"
      },
      "name": "class-methods-use-this",
      "plugin": "eslint"
    },
    "comma-dangle": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-dangle",
              "url": "https://eslint.style/rules/js/comma-dangle"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-dangle"
      },
      "fixable": "code",
      "name": "comma-dangle",
      "plugin": "eslint"
    },
    "comma-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-spacing",
              "url": "https://eslint.style/rules/js/comma-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "name": "comma-spacing",
      "plugin": "eslint"
    },
    "comma-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "comma-style",
              "url": "https://eslint.style/rules/js/comma-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/comma-style"
      },
      "fixable": "code",
      "name": "comma-style",
      "plugin": "eslint"
    },
    "complexity": {
      "type": "suggestion",
      "defaultOptions": [
        20
      ],
      "docs": {
        "description": "Enforce a maximum cyclomatic complexity allowed in a program",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/complexity"
      },
      "name": "complexity",
      "plugin": "eslint"
    },
    "computed-property-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "computed-property-spacing",
              "url": "https://eslint.style/rules/js/computed-property-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside computed property brackets",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/computed-property-spacing"
      },
      "fixable": "whitespace",
      "name": "computed-property-spacing",
      "plugin": "eslint"
    },
    "consistent-return": {
      "type": "suggestion",
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/consistent-return"
      },
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "name": "consistent-return",
      "plugin": "eslint"
    },
    "consistent-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent naming when capturing the current execution context",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/consistent-this"
      },
      "defaultOptions": [
        "that"
      ],
      "name": "consistent-this",
      "plugin": "eslint"
    },
    "constructor-super": {
      "type": "problem",
      "docs": {
        "description": "Require `super()` calls in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/constructor-super"
      },
      "name": "constructor-super",
      "plugin": "eslint"
    },
    "curly": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent brace style for all control statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/curly"
      },
      "defaultOptions": [
        "all"
      ],
      "fixable": "code",
      "name": "curly",
      "plugin": "eslint"
    },
    "default-case": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Require `default` cases in `switch` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case"
      },
      "name": "default-case",
      "plugin": "eslint"
    },
    "default-case-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `default` clauses in `switch` statements to be last",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/default-case-last"
      },
      "name": "default-case-last",
      "plugin": "eslint"
    },
    "default-param-last": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/default-param-last"
      },
      "name": "default-param-last",
      "plugin": "eslint"
    },
    "dot-location": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "dot-location",
              "url": "https://eslint.style/rules/js/dot-location"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/dot-location"
      },
      "fixable": "code",
      "name": "dot-location",
      "plugin": "eslint"
    },
    "dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowKeywords": true,
          "allowPattern": ""
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/dot-notation"
      },
      "fixable": "code",
      "name": "dot-notation",
      "plugin": "eslint"
    },
    "eol-last": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "eol-last",
              "url": "https://eslint.style/rules/js/eol-last"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow newline at the end of files",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eol-last"
      },
      "fixable": "whitespace",
      "name": "eol-last",
      "plugin": "eslint"
    },
    "eqeqeq": {
      "type": "suggestion",
      "docs": {
        "description": "Require the use of `===` and `!==`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/eqeqeq"
      },
      "fixable": "code",
      "name": "eqeqeq",
      "plugin": "eslint"
    },
    "for-direction": {
      "type": "problem",
      "docs": {
        "description": "Enforce `for` loop update clause moving the counter in the right direction",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/for-direction"
      },
      "fixable": null,
      "name": "for-direction",
      "plugin": "eslint"
    },
    "func-call-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/js/function-call-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "name": "func-call-spacing",
      "plugin": "eslint"
    },
    "func-name-matching": {
      "type": "suggestion",
      "docs": {
        "description": "Require function names to match the name of the variable or property to which they are assigned",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-name-matching"
      },
      "name": "func-name-matching",
      "plugin": "eslint"
    },
    "func-names": {
      "type": "suggestion",
      "defaultOptions": [
        "always",
        {}
      ],
      "docs": {
        "description": "Require or disallow named `function` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/func-names"
      },
      "name": "func-names",
      "plugin": "eslint"
    },
    "func-style": {
      "type": "suggestion",
      "defaultOptions": [
        "expression",
        {
          "allowArrowFunctions": false,
          "overrides": {}
        }
      ],
      "docs": {
        "description": "Enforce the consistent use of either `function` declarations or expressions assigned to variables",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/func-style"
      },
      "name": "func-style",
      "plugin": "eslint"
    },
    "function-call-argument-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-argument-newline",
              "url": "https://eslint.style/rules/js/function-call-argument-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks between arguments of a function call",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-call-argument-newline"
      },
      "fixable": "whitespace",
      "name": "function-call-argument-newline",
      "plugin": "eslint"
    },
    "function-paren-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-paren-newline",
              "url": "https://eslint.style/rules/js/function-paren-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks inside function parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/function-paren-newline"
      },
      "fixable": "whitespace",
      "name": "function-paren-newline",
      "plugin": "eslint"
    },
    "generator-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "generator-star-spacing",
              "url": "https://eslint.style/rules/js/generator-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing around `*` operators in generator functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/generator-star-spacing"
      },
      "fixable": "whitespace",
      "name": "generator-star-spacing",
      "plugin": "eslint"
    },
    "getter-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowImplicit": false
        }
      ],
      "docs": {
        "description": "Enforce `return` statements in getters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/getter-return"
      },
      "fixable": null,
      "name": "getter-return",
      "plugin": "eslint"
    },
    "global-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "global-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/global-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/global-require"
      },
      "name": "global-require",
      "plugin": "eslint"
    },
    "grouped-accessor-pairs": {
      "type": "suggestion",
      "defaultOptions": [
        "anyOrder"
      ],
      "docs": {
        "description": "Require grouped accessor pairs in object literals and classes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/grouped-accessor-pairs"
      },
      "name": "grouped-accessor-pairs",
      "plugin": "eslint"
    },
    "guard-for-in": {
      "type": "suggestion",
      "docs": {
        "description": "Require `for-in` loops to include an `if` statement",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/guard-for-in"
      },
      "name": "guard-for-in",
      "plugin": "eslint"
    },
    "handle-callback-err": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "handle-callback-err",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/handle-callback-err.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require error handling in callbacks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/handle-callback-err"
      },
      "name": "handle-callback-err",
      "plugin": "eslint"
    },
    "id-blacklist": {
      "deprecated": {
        "message": "The rule was renamed.",
        "url": "https://eslint.org/blog/2020/07/eslint-v7.5.0-released/#deprecating-id-blacklist",
        "deprecatedSince": "7.5.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "id-denylist",
              "url": "https://eslint.org/docs/rules/id-denylist"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/id-blacklist"
      },
      "name": "id-blacklist",
      "plugin": "eslint"
    },
    "id-denylist": {
      "type": "suggestion",
      "defaultOptions": [],
      "docs": {
        "description": "Disallow specified identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-denylist"
      },
      "name": "id-denylist",
      "plugin": "eslint"
    },
    "id-length": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptionPatterns": [],
          "exceptions": [],
          "min": 2,
          "properties": "always"
        }
      ],
      "docs": {
        "description": "Enforce minimum and maximum identifier lengths",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-length"
      },
      "name": "id-length",
      "plugin": "eslint"
    },
    "id-match": {
      "type": "suggestion",
      "defaultOptions": [
        "^.+$",
        {
          "classFields": false,
          "ignoreDestructuring": false,
          "onlyDeclarations": false,
          "properties": false
        }
      ],
      "docs": {
        "description": "Require identifiers to match a specified regular expression",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/id-match"
      },
      "name": "id-match",
      "plugin": "eslint"
    },
    "implicit-arrow-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "implicit-arrow-linebreak",
              "url": "https://eslint.style/rules/js/implicit-arrow-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of arrow function bodies",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/implicit-arrow-linebreak"
      },
      "fixable": "whitespace",
      "name": "implicit-arrow-linebreak",
      "plugin": "eslint"
    },
    "indent": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/js/indent"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent"
      },
      "fixable": "whitespace",
      "name": "indent",
      "plugin": "eslint"
    },
    "indent-legacy": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/indent-legacy"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "4.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "indent",
              "url": "https://eslint.style/rules/js/indent"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "indent-legacy",
      "plugin": "eslint"
    },
    "init-declarations": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/init-declarations"
      },
      "name": "init-declarations",
      "plugin": "eslint"
    },
    "jsx-quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "jsx-quotes",
              "url": "https://eslint.style/rules/js/jsx-quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either double or single quotes in JSX attributes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/jsx-quotes"
      },
      "fixable": "whitespace",
      "name": "jsx-quotes",
      "plugin": "eslint"
    },
    "key-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "key-spacing",
              "url": "https://eslint.style/rules/js/key-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between keys and values in object literal properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/key-spacing"
      },
      "fixable": "whitespace",
      "name": "key-spacing",
      "plugin": "eslint"
    },
    "keyword-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "keyword-spacing",
              "url": "https://eslint.style/rules/js/keyword-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "name": "keyword-spacing",
      "plugin": "eslint"
    },
    "line-comment-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "line-comment-position",
              "url": "https://eslint.style/rules/js/line-comment-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce position of line comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/line-comment-position"
      },
      "name": "line-comment-position",
      "plugin": "eslint"
    },
    "linebreak-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "linebreak-style",
              "url": "https://eslint.style/rules/js/linebreak-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/linebreak-style"
      },
      "fixable": "whitespace",
      "name": "linebreak-style",
      "plugin": "eslint"
    },
    "lines-around-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "lines-around-comment",
              "url": "https://eslint.style/rules/js/lines-around-comment"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require empty lines around comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-comment"
      },
      "fixable": "whitespace",
      "name": "lines-around-comment",
      "plugin": "eslint"
    },
    "lines-around-directive": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow newlines around directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-around-directive"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "lines-around-directive",
      "plugin": "eslint"
    },
    "lines-between-class-members": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "lines-between-class-members",
              "url": "https://eslint.style/rules/js/lines-between-class-members"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "name": "lines-between-class-members",
      "plugin": "eslint"
    },
    "logical-assignment-operators": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow logical assignment operator shorthand",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/logical-assignment-operators"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "logical-assignment-operators",
      "plugin": "eslint"
    },
    "max-classes-per-file": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of classes per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-classes-per-file"
      },
      "name": "max-classes-per-file",
      "plugin": "eslint"
    },
    "max-depth": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that blocks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-depth"
      },
      "name": "max-depth",
      "plugin": "eslint"
    },
    "max-len": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "max-len",
              "url": "https://eslint.style/rules/js/max-len"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum line length",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-len"
      },
      "name": "max-len",
      "plugin": "eslint"
    },
    "max-lines": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines per file",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines"
      },
      "name": "max-lines",
      "plugin": "eslint"
    },
    "max-lines-per-function": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of lines of code in a function",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-lines-per-function"
      },
      "name": "max-lines-per-function",
      "plugin": "eslint"
    },
    "max-nested-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum depth that callbacks can be nested",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-nested-callbacks"
      },
      "name": "max-nested-callbacks",
      "plugin": "eslint"
    },
    "max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-params"
      },
      "name": "max-params",
      "plugin": "eslint"
    },
    "max-statements": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of statements allowed in function blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements"
      },
      "name": "max-statements",
      "plugin": "eslint"
    },
    "max-statements-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "max-statements-per-line",
              "url": "https://eslint.style/rules/js/max-statements-per-line"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce a maximum number of statements allowed per line",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/max-statements-per-line"
      },
      "name": "max-statements-per-line",
      "plugin": "eslint"
    },
    "multiline-comment-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "9.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "multiline-comment-style",
              "url": "https://eslint.style/rules/js/multiline-comment-style"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce a particular style for multiline comments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-comment-style"
      },
      "fixable": "whitespace",
      "name": "multiline-comment-style",
      "plugin": "eslint"
    },
    "multiline-ternary": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "multiline-ternary",
              "url": "https://eslint.style/rules/js/multiline-ternary"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/multiline-ternary"
      },
      "fixable": "whitespace",
      "name": "multiline-ternary",
      "plugin": "eslint"
    },
    "new-cap": {
      "type": "suggestion",
      "docs": {
        "description": "Require constructor names to begin with a capital letter",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-cap"
      },
      "defaultOptions": [
        {
          "capIsNew": true,
          "capIsNewExceptions": [
            "Array",
            "Boolean",
            "Date",
            "Error",
            "Function",
            "Number",
            "Object",
            "RegExp",
            "String",
            "Symbol",
            "BigInt"
          ],
          "newIsCap": true,
          "newIsCapExceptions": [],
          "properties": true
        }
      ],
      "name": "new-cap",
      "plugin": "eslint"
    },
    "new-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "new-parens",
              "url": "https://eslint.style/rules/js/new-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce or disallow parentheses when invoking a constructor with no arguments",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/new-parens"
      },
      "fixable": "code",
      "name": "new-parens",
      "plugin": "eslint"
    },
    "newline-after-var": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line after variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-after-var"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-after-var",
      "plugin": "eslint"
    },
    "newline-before-return": {
      "type": "layout",
      "docs": {
        "description": "Require an empty line before `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-before-return"
      },
      "fixable": "whitespace",
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/blog/2017/06/eslint-v4.0.0-released/",
        "deprecatedSince": "4.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "The new rule moved to a plugin.",
            "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements#examples",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "name": "newline-before-return",
      "plugin": "eslint"
    },
    "newline-per-chained-call": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "newline-per-chained-call",
              "url": "https://eslint.style/rules/js/newline-per-chained-call"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require a newline after each call in a method chain",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/newline-per-chained-call"
      },
      "fixable": "whitespace",
      "name": "newline-per-chained-call",
      "plugin": "eslint"
    },
    "no-alert": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `alert`, `confirm`, and `prompt`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-alert"
      },
      "name": "no-alert",
      "plugin": "eslint"
    },
    "no-array-constructor": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Array` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-array-constructor"
      },
      "hasSuggestions": true,
      "name": "no-array-constructor",
      "plugin": "eslint"
    },
    "no-async-promise-executor": {
      "type": "problem",
      "docs": {
        "description": "Disallow using an async function as a Promise executor",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-async-promise-executor"
      },
      "fixable": null,
      "name": "no-async-promise-executor",
      "plugin": "eslint"
    },
    "no-await-in-loop": {
      "type": "problem",
      "docs": {
        "description": "Disallow `await` inside of loops",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-await-in-loop"
      },
      "name": "no-await-in-loop",
      "plugin": "eslint"
    },
    "no-bitwise": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "int32Hint": false
        }
      ],
      "docs": {
        "description": "Disallow bitwise operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-bitwise"
      },
      "name": "no-bitwise",
      "plugin": "eslint"
    },
    "no-buffer-constructor": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-deprecated-api",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-deprecated-api.md"
            }
          }
        ]
      },
      "type": "problem",
      "docs": {
        "description": "Disallow use of the `Buffer()` constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-buffer-constructor"
      },
      "name": "no-buffer-constructor",
      "plugin": "eslint"
    },
    "no-caller": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `arguments.caller` or `arguments.callee`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-caller"
      },
      "name": "no-caller",
      "plugin": "eslint"
    },
    "no-case-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow lexical declarations in case clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-case-declarations"
      },
      "hasSuggestions": true,
      "name": "no-case-declarations",
      "plugin": "eslint"
    },
    "no-catch-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `catch` clause parameters from shadowing variables in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-catch-shadow"
      },
      "deprecated": {
        "message": "This rule was renamed.",
        "url": "https://eslint.org/blog/2018/07/eslint-v5.1.0-released/",
        "deprecatedSince": "5.1.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-shadow",
              "url": "https://eslint.org/docs/rules/no-shadow"
            }
          }
        ]
      },
      "name": "no-catch-shadow",
      "plugin": "eslint"
    },
    "no-class-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-class-assign"
      },
      "name": "no-class-assign",
      "plugin": "eslint"
    },
    "no-compare-neg-zero": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparing against `-0`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-compare-neg-zero"
      },
      "fixable": null,
      "name": "no-compare-neg-zero",
      "plugin": "eslint"
    },
    "no-cond-assign": {
      "type": "problem",
      "defaultOptions": [
        "except-parens"
      ],
      "docs": {
        "description": "Disallow assignment operators in conditional expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-cond-assign"
      },
      "name": "no-cond-assign",
      "plugin": "eslint"
    },
    "no-confusing-arrow": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-confusing-arrow",
              "url": "https://eslint.style/rules/js/no-confusing-arrow"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow arrow functions where they could be confused with comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-confusing-arrow"
      },
      "fixable": "code",
      "name": "no-confusing-arrow",
      "plugin": "eslint"
    },
    "no-console": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow the use of `console`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-console"
      },
      "hasSuggestions": true,
      "name": "no-console",
      "plugin": "eslint"
    },
    "no-const-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `const` variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-const-assign"
      },
      "name": "no-const-assign",
      "plugin": "eslint"
    },
    "no-constant-binary-expression": {
      "type": "problem",
      "docs": {
        "description": "Disallow expressions where the operation doesn't affect the value",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-binary-expression"
      },
      "name": "no-constant-binary-expression",
      "plugin": "eslint"
    },
    "no-constant-condition": {
      "type": "problem",
      "defaultOptions": [
        {
          "checkLoops": "allExceptWhileTrue"
        }
      ],
      "docs": {
        "description": "Disallow constant expressions in conditions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-constant-condition"
      },
      "name": "no-constant-condition",
      "plugin": "eslint"
    },
    "no-constructor-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning value from constructor",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-constructor-return"
      },
      "fixable": null,
      "name": "no-constructor-return",
      "plugin": "eslint"
    },
    "no-continue": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `continue` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-continue"
      },
      "name": "no-continue",
      "plugin": "eslint"
    },
    "no-control-regex": {
      "type": "problem",
      "docs": {
        "description": "Disallow control characters in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-control-regex"
      },
      "name": "no-control-regex",
      "plugin": "eslint"
    },
    "no-debugger": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of `debugger`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-debugger"
      },
      "fixable": null,
      "name": "no-debugger",
      "plugin": "eslint"
    },
    "no-delete-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow deleting variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-delete-var"
      },
      "name": "no-delete-var",
      "plugin": "eslint"
    },
    "no-div-regex": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow equal signs explicitly at the beginning of regular expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-div-regex"
      },
      "fixable": "code",
      "name": "no-div-regex",
      "plugin": "eslint"
    },
    "no-dupe-args": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate arguments in `function` definitions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-args"
      },
      "name": "no-dupe-args",
      "plugin": "eslint"
    },
    "no-dupe-class-members": {
      "type": "problem",
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow duplicate class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-class-members"
      },
      "name": "no-dupe-class-members",
      "plugin": "eslint"
    },
    "no-dupe-else-if": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate conditions in if-else-if chains",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-else-if"
      },
      "name": "no-dupe-else-if",
      "plugin": "eslint"
    },
    "no-dupe-keys": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate keys in object literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-dupe-keys"
      },
      "name": "no-dupe-keys",
      "plugin": "eslint"
    },
    "no-duplicate-case": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate case labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-case"
      },
      "name": "no-duplicate-case",
      "plugin": "eslint"
    },
    "no-duplicate-imports": {
      "type": "problem",
      "defaultOptions": [
        {
          "includeExports": false
        }
      ],
      "docs": {
        "description": "Disallow duplicate module imports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-duplicate-imports"
      },
      "name": "no-duplicate-imports",
      "plugin": "eslint"
    },
    "no-else-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowElseIf": true
        }
      ],
      "docs": {
        "description": "Disallow `else` blocks after `return` statements in `if` statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-else-return"
      },
      "fixable": "code",
      "name": "no-else-return",
      "plugin": "eslint"
    },
    "no-empty": {
      "hasSuggestions": true,
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyCatch": false
        }
      ],
      "docs": {
        "description": "Disallow empty block statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty"
      },
      "name": "no-empty",
      "plugin": "eslint"
    },
    "no-empty-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty character classes in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-character-class"
      },
      "name": "no-empty-character-class",
      "plugin": "eslint"
    },
    "no-empty-function": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-empty-function"
      },
      "name": "no-empty-function",
      "plugin": "eslint"
    },
    "no-empty-pattern": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowObjectPatternsAsParameters": false
        }
      ],
      "docs": {
        "description": "Disallow empty destructuring patterns",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-pattern"
      },
      "name": "no-empty-pattern",
      "plugin": "eslint"
    },
    "no-empty-static-block": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty static blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-empty-static-block"
      },
      "name": "no-empty-static-block",
      "plugin": "eslint"
    },
    "no-eq-null": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `null` comparisons without type-checking operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eq-null"
      },
      "name": "no-eq-null",
      "plugin": "eslint"
    },
    "no-eval": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndirect": false
        }
      ],
      "docs": {
        "description": "Disallow the use of `eval()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-eval"
      },
      "name": "no-eval",
      "plugin": "eslint"
    },
    "no-ex-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning exceptions in `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-ex-assign"
      },
      "name": "no-ex-assign",
      "plugin": "eslint"
    },
    "no-extend-native": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow extending native types",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extend-native"
      },
      "name": "no-extend-native",
      "plugin": "eslint"
    },
    "no-extra-bind": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.bind()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-bind"
      },
      "fixable": "code",
      "name": "no-extra-bind",
      "plugin": "eslint"
    },
    "no-extra-boolean-cast": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow unnecessary boolean casts",
        "recommended": true,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-boolean-cast"
      },
      "fixable": "code",
      "name": "no-extra-boolean-cast",
      "plugin": "eslint"
    },
    "no-extra-label": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary labels",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-extra-label"
      },
      "fixable": "code",
      "name": "no-extra-label",
      "plugin": "eslint"
    },
    "no-extra-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-extra-parens",
              "url": "https://eslint.style/rules/js/no-extra-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-parens"
      },
      "fixable": "code",
      "name": "no-extra-parens",
      "plugin": "eslint"
    },
    "no-extra-semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-extra-semi",
              "url": "https://eslint.style/rules/js/no-extra-semi"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-extra-semi"
      },
      "fixable": "code",
      "name": "no-extra-semi",
      "plugin": "eslint"
    },
    "no-fallthrough": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowEmptyCase": false,
          "reportUnusedFallthroughComment": false
        }
      ],
      "docs": {
        "description": "Disallow fallthrough of `case` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-fallthrough"
      },
      "name": "no-fallthrough",
      "plugin": "eslint"
    },
    "no-floating-decimal": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-floating-decimal",
              "url": "https://eslint.style/rules/js/no-floating-decimal"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow leading or trailing decimal points in numeric literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-floating-decimal"
      },
      "fixable": "code",
      "name": "no-floating-decimal",
      "plugin": "eslint"
    },
    "no-func-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow reassigning `function` declarations",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-func-assign"
      },
      "name": "no-func-assign",
      "plugin": "eslint"
    },
    "no-global-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "exceptions": []
        }
      ],
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-global-assign"
      },
      "name": "no-global-assign",
      "plugin": "eslint"
    },
    "no-implicit-coercion": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow shorthand type conversions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-coercion"
      },
      "fixable": "code",
      "defaultOptions": [
        {
          "allow": [],
          "boolean": true,
          "disallowTemplateShorthand": false,
          "number": true,
          "string": true
        }
      ],
      "name": "no-implicit-coercion",
      "plugin": "eslint"
    },
    "no-implicit-globals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "lexicalBindings": false
        }
      ],
      "docs": {
        "description": "Disallow declarations in the global scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implicit-globals"
      },
      "name": "no-implicit-globals",
      "plugin": "eslint"
    },
    "no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-implied-eval"
      },
      "name": "no-implied-eval",
      "plugin": "eslint"
    },
    "no-import-assign": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning to imported bindings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-import-assign"
      },
      "name": "no-import-assign",
      "plugin": "eslint"
    },
    "no-inline-comments": {
      "type": "suggestion",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow inline comments after code",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-inline-comments"
      },
      "name": "no-inline-comments",
      "plugin": "eslint"
    },
    "no-inner-declarations": {
      "type": "problem",
      "defaultOptions": [
        "functions",
        {
          "blockScopedFunctions": "allow"
        }
      ],
      "docs": {
        "description": "Disallow variable or `function` declarations in nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-inner-declarations"
      },
      "name": "no-inner-declarations",
      "plugin": "eslint"
    },
    "no-invalid-regexp": {
      "type": "problem",
      "defaultOptions": [
        {}
      ],
      "docs": {
        "description": "Disallow invalid regular expression strings in `RegExp` constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-regexp"
      },
      "name": "no-invalid-regexp",
      "plugin": "eslint"
    },
    "no-invalid-this": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow use of `this` in contexts where the value of `this` is `undefined`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-invalid-this"
      },
      "name": "no-invalid-this",
      "plugin": "eslint"
    },
    "no-irregular-whitespace": {
      "type": "problem",
      "defaultOptions": [
        {
          "skipComments": false,
          "skipJSXText": false,
          "skipRegExps": false,
          "skipStrings": true,
          "skipTemplates": false
        }
      ],
      "docs": {
        "description": "Disallow irregular whitespace",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-irregular-whitespace"
      },
      "name": "no-irregular-whitespace",
      "plugin": "eslint"
    },
    "no-iterator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__iterator__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-iterator"
      },
      "name": "no-iterator",
      "plugin": "eslint"
    },
    "no-label-var": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow labels that share a name with a variable",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-label-var"
      },
      "name": "no-label-var",
      "plugin": "eslint"
    },
    "no-labels": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowLoop": false,
          "allowSwitch": false
        }
      ],
      "docs": {
        "description": "Disallow labeled statements",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-labels"
      },
      "name": "no-labels",
      "plugin": "eslint"
    },
    "no-lone-blocks": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary nested blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-lone-blocks"
      },
      "name": "no-lone-blocks",
      "plugin": "eslint"
    },
    "no-lonely-if": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `if` statements as the only statement in `else` blocks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-lonely-if"
      },
      "fixable": "code",
      "name": "no-lonely-if",
      "plugin": "eslint"
    },
    "no-loop-func": {
      "type": "suggestion",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-loop-func"
      },
      "name": "no-loop-func",
      "plugin": "eslint"
    },
    "no-loss-of-precision": {
      "type": "problem",
      "dialects": [
        "typescript",
        "javascript"
      ],
      "language": "javascript",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
      },
      "name": "no-loss-of-precision",
      "plugin": "eslint"
    },
    "no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-magic-numbers"
      },
      "name": "no-magic-numbers",
      "plugin": "eslint"
    },
    "no-misleading-character-class": {
      "type": "problem",
      "docs": {
        "description": "Disallow characters which are made with multiple code points in character class syntax",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-misleading-character-class"
      },
      "hasSuggestions": true,
      "name": "no-misleading-character-class",
      "plugin": "eslint"
    },
    "no-mixed-operators": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-mixed-operators",
              "url": "https://eslint.style/rules/js/no-mixed-operators"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow mixed binary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-operators"
      },
      "name": "no-mixed-operators",
      "plugin": "eslint"
    },
    "no-mixed-requires": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-mixed-requires",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-mixed-requires.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-requires"
      },
      "name": "no-mixed-requires",
      "plugin": "eslint"
    },
    "no-mixed-spaces-and-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-mixed-spaces-and-tabs",
              "url": "https://eslint.style/rules/js/no-mixed-spaces-and-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow mixed spaces and tabs for indentation",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-mixed-spaces-and-tabs"
      },
      "name": "no-mixed-spaces-and-tabs",
      "plugin": "eslint"
    },
    "no-multi-assign": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreNonDeclaration": false
        }
      ],
      "docs": {
        "description": "Disallow use of chained assignment expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-assign"
      },
      "name": "no-multi-assign",
      "plugin": "eslint"
    },
    "no-multi-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-multi-spaces",
              "url": "https://eslint.style/rules/js/no-multi-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple spaces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multi-spaces"
      },
      "fixable": "whitespace",
      "name": "no-multi-spaces",
      "plugin": "eslint"
    },
    "no-multi-str": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiline strings",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-multi-str"
      },
      "name": "no-multi-str",
      "plugin": "eslint"
    },
    "no-multiple-empty-lines": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-multiple-empty-lines",
              "url": "https://eslint.style/rules/js/no-multiple-empty-lines"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow multiple empty lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-multiple-empty-lines"
      },
      "fixable": "whitespace",
      "name": "no-multiple-empty-lines",
      "plugin": "eslint"
    },
    "no-native-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow assignments to native objects or read-only global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-native-reassign"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-global-assign",
              "url": "https://eslint.org/docs/rules/no-global-assign"
            }
          }
        ]
      },
      "name": "no-native-reassign",
      "plugin": "eslint"
    },
    "no-negated-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow negated conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-negated-condition"
      },
      "name": "no-negated-condition",
      "plugin": "eslint"
    },
    "no-negated-in-lhs": {
      "type": "problem",
      "docs": {
        "description": "Disallow negating the left operand in `in` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-negated-in-lhs"
      },
      "deprecated": {
        "message": "Renamed rule.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-unsafe-negation",
              "url": "https://eslint.org/docs/rules/no-unsafe-negation"
            }
          }
        ]
      },
      "name": "no-negated-in-lhs",
      "plugin": "eslint"
    },
    "no-nested-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested ternary expressions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-nested-ternary"
      },
      "name": "no-nested-ternary",
      "plugin": "eslint"
    },
    "no-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators outside of assignments or comparisons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new"
      },
      "name": "no-new",
      "plugin": "eslint"
    },
    "no-new-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `Function` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-func"
      },
      "name": "no-new-func",
      "plugin": "eslint"
    },
    "no-new-native-nonconstructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with global non-constructor functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
      },
      "name": "no-new-native-nonconstructor",
      "plugin": "eslint"
    },
    "no-new-object": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `Object` constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-object"
      },
      "deprecated": {
        "message": "The new rule flags more situations where object literal syntax can be used, and it does not report a problem when the `Object` constructor is invoked with an argument.",
        "url": "https://eslint.org/blog/2023/09/eslint-v8.50.0-released/",
        "deprecatedSince": "8.50.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-object-constructor",
              "url": "https://eslint.org/docs/rules/no-object-constructor"
            }
          }
        ]
      },
      "name": "no-new-object",
      "plugin": "eslint"
    },
    "no-new-require": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-new-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-new-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-require"
      },
      "name": "no-new-require",
      "plugin": "eslint"
    },
    "no-new-symbol": {
      "type": "problem",
      "docs": {
        "description": "Disallow `new` operators with the `Symbol` object",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-symbol"
      },
      "deprecated": {
        "message": "The rule was replaced with a more general rule.",
        "url": "https://eslint.org/docs/latest/use/migrate-to-9.0.0#eslint-recommended",
        "deprecatedSince": "9.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "rule": {
              "name": "no-new-native-nonconstructor",
              "url": "https://eslint.org/docs/latest/rules/no-new-native-nonconstructor"
            }
          }
        ]
      },
      "name": "no-new-symbol",
      "plugin": "eslint"
    },
    "no-new-wrappers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `new` operators with the `String`, `Number`, and `Boolean` objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-new-wrappers"
      },
      "name": "no-new-wrappers",
      "plugin": "eslint"
    },
    "no-nonoctal-decimal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `\\8` and `\\9` escape sequences in string literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-nonoctal-decimal-escape"
      },
      "hasSuggestions": true,
      "name": "no-nonoctal-decimal-escape",
      "plugin": "eslint"
    },
    "no-obj-calls": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling global object properties as functions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-obj-calls"
      },
      "name": "no-obj-calls",
      "plugin": "eslint"
    },
    "no-object-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calls to the `Object` constructor without an argument",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-object-constructor"
      },
      "hasSuggestions": true,
      "name": "no-object-constructor",
      "plugin": "eslint"
    },
    "no-octal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal literals",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-octal"
      },
      "name": "no-octal",
      "plugin": "eslint"
    },
    "no-octal-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow octal escape sequences in string literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-octal-escape"
      },
      "name": "no-octal-escape",
      "plugin": "eslint"
    },
    "no-param-reassign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow reassigning function parameters",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-param-reassign"
      },
      "name": "no-param-reassign",
      "plugin": "eslint"
    },
    "no-path-concat": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-path-concat",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-path-concat.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-path-concat"
      },
      "name": "no-path-concat",
      "plugin": "eslint"
    },
    "no-plusplus": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowForLoopAfterthoughts": false
        }
      ],
      "docs": {
        "description": "Disallow the unary operators `++` and `--`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-plusplus"
      },
      "name": "no-plusplus",
      "plugin": "eslint"
    },
    "no-process-env": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-env",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-env.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.env`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-env"
      },
      "name": "no-process-env",
      "plugin": "eslint"
    },
    "no-process-exit": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-process-exit",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-process-exit.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-process-exit"
      },
      "name": "no-process-exit",
      "plugin": "eslint"
    },
    "no-promise-executor-return": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowVoid": false
        }
      ],
      "docs": {
        "description": "Disallow returning values from Promise executor functions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-promise-executor-return"
      },
      "hasSuggestions": true,
      "name": "no-promise-executor-return",
      "plugin": "eslint"
    },
    "no-proto": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of the `__proto__` property",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-proto"
      },
      "name": "no-proto",
      "plugin": "eslint"
    },
    "no-prototype-builtins": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling some `Object.prototype` methods directly on objects",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-prototype-builtins"
      },
      "hasSuggestions": true,
      "name": "no-prototype-builtins",
      "plugin": "eslint"
    },
    "no-redeclare": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "builtinGlobals": true
        }
      ],
      "docs": {
        "description": "Disallow variable redeclaration",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-redeclare"
      },
      "name": "no-redeclare",
      "plugin": "eslint"
    },
    "no-regex-spaces": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow multiple spaces in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-regex-spaces"
      },
      "fixable": "code",
      "name": "no-regex-spaces",
      "plugin": "eslint"
    },
    "no-restricted-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified names in exports",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-exports"
      },
      "name": "no-restricted-exports",
      "plugin": "eslint"
    },
    "no-restricted-globals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified global variables",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-globals"
      },
      "name": "no-restricted-globals",
      "plugin": "eslint"
    },
    "no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-imports"
      },
      "name": "no-restricted-imports",
      "plugin": "eslint"
    },
    "no-restricted-modules": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-restricted-require",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-restricted-require.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-modules"
      },
      "name": "no-restricted-modules",
      "plugin": "eslint"
    },
    "no-restricted-properties": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain properties on certain objects",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-properties"
      },
      "name": "no-restricted-properties",
      "plugin": "eslint"
    },
    "no-restricted-syntax": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified syntax",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-restricted-syntax"
      },
      "name": "no-restricted-syntax",
      "plugin": "eslint"
    },
    "no-return-assign": {
      "type": "suggestion",
      "defaultOptions": [
        "except-parens"
      ],
      "docs": {
        "description": "Disallow assignment operators in `return` statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-assign"
      },
      "name": "no-return-assign",
      "plugin": "eslint"
    },
    "no-return-await": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `return await`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-return-await"
      },
      "fixable": null,
      "deprecated": {
        "message": "The original assumption of the rule no longer holds true because of engine optimization.",
        "deprecatedSince": "8.46.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "no-return-await",
      "plugin": "eslint"
    },
    "no-script-url": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `javascript:` URLs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-script-url"
      },
      "name": "no-script-url",
      "plugin": "eslint"
    },
    "no-self-assign": {
      "type": "problem",
      "defaultOptions": [
        {
          "props": true
        }
      ],
      "docs": {
        "description": "Disallow assignments where both sides are exactly the same",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-self-assign"
      },
      "name": "no-self-assign",
      "plugin": "eslint"
    },
    "no-self-compare": {
      "type": "problem",
      "docs": {
        "description": "Disallow comparisons where both sides are exactly the same",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-self-compare"
      },
      "name": "no-self-compare",
      "plugin": "eslint"
    },
    "no-sequences": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comma operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sequences"
      },
      "defaultOptions": [
        {
          "allowInParentheses": true
        }
      ],
      "name": "no-sequences",
      "plugin": "eslint"
    },
    "no-setter-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning values from setters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-setter-return"
      },
      "name": "no-setter-return",
      "plugin": "eslint"
    },
    "no-shadow": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "builtinGlobals": false,
          "hoist": "functions",
          "ignoreOnInitialization": false
        }
      ],
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-shadow"
      },
      "name": "no-shadow",
      "plugin": "eslint"
    },
    "no-shadow-restricted-names": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow identifiers from shadowing restricted names",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-shadow-restricted-names"
      },
      "name": "no-shadow-restricted-names",
      "plugin": "eslint"
    },
    "no-spaced-func": {
      "type": "layout",
      "docs": {
        "description": "Disallow spacing between function identifiers and their applications (deprecated)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-spaced-func"
      },
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2016/08/eslint-v3.3.0-released/#deprecated-rules",
        "deprecatedSince": "3.3.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "function-call-spacing",
              "url": "https://eslint.style/rules/js/function-call-spacing"
            }
          }
        ]
      },
      "fixable": "whitespace",
      "name": "no-spaced-func",
      "plugin": "eslint"
    },
    "no-sparse-arrays": {
      "type": "problem",
      "docs": {
        "description": "Disallow sparse arrays",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-sparse-arrays"
      },
      "name": "no-sparse-arrays",
      "plugin": "eslint"
    },
    "no-sync": {
      "deprecated": {
        "message": "Node.js rules were moved out of ESLint core.",
        "url": "https://eslint.org/docs/latest/use/migrating-to-7.0.0#deprecate-node-rules",
        "deprecatedSince": "7.0.0",
        "availableUntil": null,
        "replacedBy": [
          {
            "message": "eslint-plugin-n now maintains deprecated Node.js-related rules.",
            "plugin": {
              "name": "eslint-plugin-n",
              "url": "https://github.com/eslint-community/eslint-plugin-n"
            },
            "rule": {
              "name": "no-sync",
              "url": "https://github.com/eslint-community/eslint-plugin-n/tree/master/docs/rules/no-sync.md"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Disallow synchronous methods",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-sync"
      },
      "name": "no-sync",
      "plugin": "eslint"
    },
    "no-tabs": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-tabs",
              "url": "https://eslint.style/rules/js/no-tabs"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow all tabs",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-tabs"
      },
      "name": "no-tabs",
      "plugin": "eslint"
    },
    "no-template-curly-in-string": {
      "type": "problem",
      "docs": {
        "description": "Disallow template literal placeholder syntax in regular strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-template-curly-in-string"
      },
      "name": "no-template-curly-in-string",
      "plugin": "eslint"
    },
    "no-ternary": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow ternary operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-ternary"
      },
      "name": "no-ternary",
      "plugin": "eslint"
    },
    "no-this-before-super": {
      "type": "problem",
      "docs": {
        "description": "Disallow `this`/`super` before calling `super()` in constructors",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-this-before-super"
      },
      "name": "no-this-before-super",
      "plugin": "eslint"
    },
    "no-throw-literal": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-throw-literal"
      },
      "name": "no-throw-literal",
      "plugin": "eslint"
    },
    "no-trailing-spaces": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-trailing-spaces",
              "url": "https://eslint.style/rules/js/no-trailing-spaces"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow trailing whitespace at the end of lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-trailing-spaces"
      },
      "fixable": "whitespace",
      "name": "no-trailing-spaces",
      "plugin": "eslint"
    },
    "no-undef": {
      "type": "problem",
      "defaultOptions": [
        {
          "typeof": false
        }
      ],
      "docs": {
        "description": "Disallow the use of undeclared variables unless mentioned in `/*global */` comments",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef"
      },
      "name": "no-undef",
      "plugin": "eslint"
    },
    "no-undef-init": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow initializing variables to `undefined`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undef-init"
      },
      "fixable": "code",
      "name": "no-undef-init",
      "plugin": "eslint"
    },
    "no-undefined": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `undefined` as an identifier",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-undefined"
      },
      "name": "no-undefined",
      "plugin": "eslint"
    },
    "no-underscore-dangle": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": [],
          "allowAfterSuper": false,
          "allowAfterThis": false,
          "allowAfterThisConstructor": false,
          "allowFunctionParams": true,
          "allowInArrayDestructuring": true,
          "allowInObjectDestructuring": true,
          "enforceInClassFields": false,
          "enforceInMethodNames": false
        }
      ],
      "docs": {
        "description": "Disallow dangling underscores in identifiers",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-underscore-dangle"
      },
      "name": "no-underscore-dangle",
      "plugin": "eslint"
    },
    "no-unexpected-multiline": {
      "type": "problem",
      "docs": {
        "description": "Disallow confusing multiline expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unexpected-multiline"
      },
      "name": "no-unexpected-multiline",
      "plugin": "eslint"
    },
    "no-unmodified-loop-condition": {
      "type": "problem",
      "docs": {
        "description": "Disallow unmodified loop conditions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unmodified-loop-condition"
      },
      "name": "no-unmodified-loop-condition",
      "plugin": "eslint"
    },
    "no-unneeded-ternary": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "defaultAssignment": true
        }
      ],
      "docs": {
        "description": "Disallow ternary operators when simpler alternatives exist",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-unneeded-ternary"
      },
      "fixable": "code",
      "name": "no-unneeded-ternary",
      "plugin": "eslint"
    },
    "no-unreachable": {
      "type": "problem",
      "docs": {
        "description": "Disallow unreachable code after `return`, `throw`, `continue`, and `break` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable"
      },
      "name": "no-unreachable",
      "plugin": "eslint"
    },
    "no-unreachable-loop": {
      "type": "problem",
      "defaultOptions": [
        {
          "ignore": []
        }
      ],
      "docs": {
        "description": "Disallow loops with a body that allows only one iteration",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unreachable-loop"
      },
      "name": "no-unreachable-loop",
      "plugin": "eslint"
    },
    "no-unsafe-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow control flow statements in `finally` blocks",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-finally"
      },
      "name": "no-unsafe-finally",
      "plugin": "eslint"
    },
    "no-unsafe-negation": {
      "type": "problem",
      "defaultOptions": [
        {
          "enforceForOrderingRelations": false
        }
      ],
      "docs": {
        "description": "Disallow negating the left operand of relational operators",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-negation"
      },
      "hasSuggestions": true,
      "fixable": null,
      "name": "no-unsafe-negation",
      "plugin": "eslint"
    },
    "no-unsafe-optional-chaining": {
      "type": "problem",
      "defaultOptions": [
        {
          "disallowArithmeticOperators": false
        }
      ],
      "docs": {
        "description": "Disallow use of optional chaining in contexts where the `undefined` value is not allowed",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unsafe-optional-chaining"
      },
      "fixable": null,
      "name": "no-unsafe-optional-chaining",
      "plugin": "eslint"
    },
    "no-unused-expressions": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-unused-expressions"
      },
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTernary": false,
          "allowTaggedTemplates": false,
          "enforceForJSX": false
        }
      ],
      "name": "no-unused-expressions",
      "plugin": "eslint"
    },
    "no-unused-labels": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused labels",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-labels"
      },
      "fixable": "code",
      "name": "no-unused-labels",
      "plugin": "eslint"
    },
    "no-unused-private-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused private class members",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-private-class-members"
      },
      "name": "no-unused-private-class-members",
      "plugin": "eslint"
    },
    "no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-unused-vars"
      },
      "hasSuggestions": true,
      "name": "no-unused-vars",
      "plugin": "eslint"
    },
    "no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-use-before-define"
      },
      "defaultOptions": [
        {
          "classes": true,
          "functions": true,
          "variables": true,
          "allowNamedExports": false
        }
      ],
      "name": "no-use-before-define",
      "plugin": "eslint"
    },
    "no-useless-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow variable assignments when the value is not used",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-assignment"
      },
      "name": "no-useless-assignment",
      "plugin": "eslint"
    },
    "no-useless-backreference": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless backreferences in regular expressions",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-backreference"
      },
      "name": "no-useless-backreference",
      "plugin": "eslint"
    },
    "no-useless-call": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary calls to `.call()` and `.apply()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-call"
      },
      "name": "no-useless-call",
      "plugin": "eslint"
    },
    "no-useless-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary `catch` clauses",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-catch"
      },
      "name": "no-useless-catch",
      "plugin": "eslint"
    },
    "no-useless-computed-key": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "enforceForClassMembers": true
        }
      ],
      "docs": {
        "description": "Disallow unnecessary computed property keys in objects and classes",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-computed-key"
      },
      "fixable": "code",
      "name": "no-useless-computed-key",
      "plugin": "eslint"
    },
    "no-useless-concat": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary concatenation of literals or template literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-concat"
      },
      "name": "no-useless-concat",
      "plugin": "eslint"
    },
    "no-useless-constructor": {
      "dialects": [
        "javascript",
        "typescript"
      ],
      "language": "javascript",
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "no-useless-constructor",
      "plugin": "eslint"
    },
    "no-useless-escape": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary escape characters",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-useless-escape"
      },
      "hasSuggestions": true,
      "name": "no-useless-escape",
      "plugin": "eslint"
    },
    "no-useless-rename": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreDestructuring": false,
          "ignoreImport": false,
          "ignoreExport": false
        }
      ],
      "docs": {
        "description": "Disallow renaming import, export, and destructured assignments to the same name",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-rename"
      },
      "fixable": "code",
      "name": "no-useless-rename",
      "plugin": "eslint"
    },
    "no-useless-return": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow redundant return statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-useless-return"
      },
      "fixable": "code",
      "name": "no-useless-return",
      "plugin": "eslint"
    },
    "no-var": {
      "type": "suggestion",
      "docs": {
        "description": "Require `let` or `const` instead of `var`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-var"
      },
      "fixable": "code",
      "name": "no-var",
      "plugin": "eslint"
    },
    "no-void": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowAsStatement": false
        }
      ],
      "docs": {
        "description": "Disallow `void` operators",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-void"
      },
      "name": "no-void",
      "plugin": "eslint"
    },
    "no-warning-comments": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "location": "start",
          "terms": [
            "todo",
            "fixme",
            "xxx"
          ]
        }
      ],
      "docs": {
        "description": "Disallow specified warning terms in comments",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/no-warning-comments"
      },
      "name": "no-warning-comments",
      "plugin": "eslint"
    },
    "no-whitespace-before-property": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "no-whitespace-before-property",
              "url": "https://eslint.style/rules/js/no-whitespace-before-property"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Disallow whitespace before properties",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/no-whitespace-before-property"
      },
      "fixable": "whitespace",
      "name": "no-whitespace-before-property",
      "plugin": "eslint"
    },
    "no-with": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `with` statements",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/no-with"
      },
      "name": "no-with",
      "plugin": "eslint"
    },
    "nonblock-statement-body-position": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "nonblock-statement-body-position",
              "url": "https://eslint.style/rules/js/nonblock-statement-body-position"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the location of single-line statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/nonblock-statement-body-position"
      },
      "fixable": "whitespace",
      "name": "nonblock-statement-body-position",
      "plugin": "eslint"
    },
    "object-curly-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-curly-newline",
              "url": "https://eslint.style/rules/js/object-curly-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "name": "object-curly-newline",
      "plugin": "eslint"
    },
    "object-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-curly-spacing",
              "url": "https://eslint.style/rules/js/object-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "object-curly-spacing",
      "plugin": "eslint"
    },
    "object-property-newline": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "object-property-newline",
              "url": "https://eslint.style/rules/js/object-property-newline"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/object-property-newline"
      },
      "fixable": "whitespace",
      "name": "object-property-newline",
      "plugin": "eslint"
    },
    "object-shorthand": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow method and property shorthand syntax for object literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/object-shorthand"
      },
      "fixable": "code",
      "name": "object-shorthand",
      "plugin": "eslint"
    },
    "one-var": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce variables to be declared either together or separately in functions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/one-var"
      },
      "fixable": "code",
      "name": "one-var",
      "plugin": "eslint"
    },
    "one-var-declaration-per-line": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "one-var-declaration-per-line",
              "url": "https://eslint.style/rules/js/one-var-declaration-per-line"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow newlines around variable declarations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/one-var-declaration-per-line"
      },
      "fixable": "whitespace",
      "name": "one-var-declaration-per-line",
      "plugin": "eslint"
    },
    "operator-assignment": {
      "type": "suggestion",
      "defaultOptions": [
        "always"
      ],
      "docs": {
        "description": "Require or disallow assignment operator shorthand where possible",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/operator-assignment"
      },
      "fixable": "code",
      "name": "operator-assignment",
      "plugin": "eslint"
    },
    "operator-linebreak": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "operator-linebreak",
              "url": "https://eslint.style/rules/js/operator-linebreak"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/operator-linebreak"
      },
      "fixable": "code",
      "name": "operator-linebreak",
      "plugin": "eslint"
    },
    "padded-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padded-blocks",
              "url": "https://eslint.style/rules/js/padded-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding within blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padded-blocks"
      },
      "fixable": "whitespace",
      "name": "padded-blocks",
      "plugin": "eslint"
    },
    "padding-line-between-statements": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "padding-line-between-statements",
              "url": "https://eslint.style/rules/js/padding-line-between-statements"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "name": "padding-line-between-statements",
      "plugin": "eslint"
    },
    "prefer-arrow-callback": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowNamedFunctions": false,
          "allowUnboundThis": true
        }
      ],
      "docs": {
        "description": "Require using arrow functions for callbacks",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-arrow-callback"
      },
      "fixable": "code",
      "name": "prefer-arrow-callback",
      "plugin": "eslint"
    },
    "prefer-const": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "destructuring": "any",
          "ignoreReadBeforeAssign": false
        }
      ],
      "docs": {
        "description": "Require `const` declarations for variables that are never reassigned after declared",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-const"
      },
      "fixable": "code",
      "name": "prefer-const",
      "plugin": "eslint"
    },
    "prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "prefer-destructuring",
      "plugin": "eslint"
    },
    "prefer-exponentiation-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `Math.pow` in favor of the `**` operator",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-exponentiation-operator"
      },
      "fixable": "code",
      "name": "prefer-exponentiation-operator",
      "plugin": "eslint"
    },
    "prefer-named-capture-group": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using named capture group in regular expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-named-capture-group"
      },
      "hasSuggestions": true,
      "name": "prefer-named-capture-group",
      "plugin": "eslint"
    },
    "prefer-numeric-literals": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-numeric-literals"
      },
      "fixable": "code",
      "name": "prefer-numeric-literals",
      "plugin": "eslint"
    },
    "prefer-object-has-own": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow use of `Object.prototype.hasOwnProperty.call()` and prefer use of `Object.hasOwn()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-has-own"
      },
      "fixable": "code",
      "name": "prefer-object-has-own",
      "plugin": "eslint"
    },
    "prefer-object-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using `Object.assign` with an object literal as the first argument and prefer the use of object spread instead",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-object-spread"
      },
      "fixable": "code",
      "name": "prefer-object-spread",
      "plugin": "eslint"
    },
    "prefer-promise-reject-errors": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowEmptyReject": false
        }
      ],
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-promise-reject-errors"
      },
      "fixable": null,
      "name": "prefer-promise-reject-errors",
      "plugin": "eslint"
    },
    "prefer-reflect": {
      "type": "suggestion",
      "docs": {
        "description": "Require `Reflect` methods where applicable",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-reflect"
      },
      "deprecated": {
        "message": "The original intention of this rule was misguided.",
        "deprecatedSince": "3.9.0",
        "availableUntil": null,
        "replacedBy": []
      },
      "name": "prefer-reflect",
      "plugin": "eslint"
    },
    "prefer-regex-literals": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "disallowRedundantWrapping": false
        }
      ],
      "docs": {
        "description": "Disallow use of the `RegExp` constructor in favor of regular expression literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-regex-literals"
      },
      "hasSuggestions": true,
      "name": "prefer-regex-literals",
      "plugin": "eslint"
    },
    "prefer-rest-params": {
      "type": "suggestion",
      "docs": {
        "description": "Require rest parameters instead of `arguments`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/prefer-rest-params"
      },
      "name": "prefer-rest-params",
      "plugin": "eslint"
    },
    "prefer-spread": {
      "type": "suggestion",
      "docs": {
        "description": "Require spread operators instead of `.apply()`",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-spread"
      },
      "fixable": null,
      "name": "prefer-spread",
      "plugin": "eslint"
    },
    "prefer-template": {
      "type": "suggestion",
      "docs": {
        "description": "Require template literals instead of string concatenation",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/prefer-template"
      },
      "fixable": "code",
      "name": "prefer-template",
      "plugin": "eslint"
    },
    "quote-props": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "quote-props",
              "url": "https://eslint.style/rules/js/quote-props"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Require quotes around object literal property names",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quote-props"
      },
      "fixable": "code",
      "name": "quote-props",
      "plugin": "eslint"
    },
    "quotes": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "quotes",
              "url": "https://eslint.style/rules/js/quotes"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/quotes"
      },
      "fixable": "code",
      "name": "quotes",
      "plugin": "eslint"
    },
    "radix": {
      "type": "suggestion",
      "defaultOptions": [
        "always"
      ],
      "docs": {
        "description": "Enforce the consistent use of the radix argument when using `parseInt()`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/radix"
      },
      "hasSuggestions": true,
      "name": "radix",
      "plugin": "eslint"
    },
    "require-atomic-updates": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowProperties": false
        }
      ],
      "docs": {
        "description": "Disallow assignments that can lead to race conditions due to usage of `await` or `yield`",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-atomic-updates"
      },
      "fixable": null,
      "name": "require-atomic-updates",
      "plugin": "eslint"
    },
    "require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which have no `await` expression",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "require-await",
      "plugin": "eslint"
    },
    "require-unicode-regexp": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `u` or `v` flag on regular expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/require-unicode-regexp"
      },
      "hasSuggestions": true,
      "name": "require-unicode-regexp",
      "plugin": "eslint"
    },
    "require-yield": {
      "type": "suggestion",
      "docs": {
        "description": "Require generator functions to contain `yield`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/require-yield"
      },
      "name": "require-yield",
      "plugin": "eslint"
    },
    "rest-spread-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "rest-spread-spacing",
              "url": "https://eslint.style/rules/js/rest-spread-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing between rest and spread operators and their expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/rest-spread-spacing"
      },
      "fixable": "whitespace",
      "name": "rest-spread-spacing",
      "plugin": "eslint"
    },
    "semi": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi",
              "url": "https://eslint.style/rules/js/semi"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi"
      },
      "fixable": "code",
      "name": "semi",
      "plugin": "eslint"
    },
    "semi-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi-spacing",
              "url": "https://eslint.style/rules/js/semi-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-spacing"
      },
      "fixable": "whitespace",
      "name": "semi-spacing",
      "plugin": "eslint"
    },
    "semi-style": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "semi-style",
              "url": "https://eslint.style/rules/js/semi-style"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce location of semicolons",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/semi-style"
      },
      "fixable": "whitespace",
      "name": "semi-style",
      "plugin": "eslint"
    },
    "sort-imports": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowSeparatedGroups": false,
          "ignoreCase": false,
          "ignoreDeclarationSort": false,
          "ignoreMemberSort": false,
          "memberSyntaxSortOrder": [
            "none",
            "all",
            "multiple",
            "single"
          ]
        }
      ],
      "docs": {
        "description": "Enforce sorted `import` declarations within modules",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-imports"
      },
      "fixable": "code",
      "name": "sort-imports",
      "plugin": "eslint"
    },
    "sort-keys": {
      "type": "suggestion",
      "defaultOptions": [
        "asc",
        {
          "allowLineSeparatedGroups": false,
          "caseSensitive": true,
          "ignoreComputedKeys": false,
          "minKeys": 2,
          "natural": false
        }
      ],
      "docs": {
        "description": "Require object keys to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-keys"
      },
      "name": "sort-keys",
      "plugin": "eslint"
    },
    "sort-vars": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "ignoreCase": false
        }
      ],
      "docs": {
        "description": "Require variables within the same declaration block to be sorted",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/sort-vars"
      },
      "fixable": "code",
      "name": "sort-vars",
      "plugin": "eslint"
    },
    "space-before-blocks": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-before-blocks",
              "url": "https://eslint.style/rules/js/space-before-blocks"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "name": "space-before-blocks",
      "plugin": "eslint"
    },
    "space-before-function-paren": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-before-function-paren",
              "url": "https://eslint.style/rules/js/space-before-function-paren"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before `function` definition opening parenthesis",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "name": "space-before-function-paren",
      "plugin": "eslint"
    },
    "space-in-parens": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-in-parens",
              "url": "https://eslint.style/rules/js/space-in-parens"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "name": "space-in-parens",
      "plugin": "eslint"
    },
    "space-infix-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-infix-ops",
              "url": "https://eslint.style/rules/js/space-infix-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "name": "space-infix-ops",
      "plugin": "eslint"
    },
    "space-unary-ops": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "space-unary-ops",
              "url": "https://eslint.style/rules/js/space-unary-ops"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "name": "space-unary-ops",
      "plugin": "eslint"
    },
    "spaced-comment": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "spaced-comment",
              "url": "https://eslint.style/rules/js/spaced-comment"
            }
          }
        ]
      },
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent spacing after the `//` or `/*` in a comment",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/spaced-comment"
      },
      "fixable": "whitespace",
      "name": "spaced-comment",
      "plugin": "eslint"
    },
    "strict": {
      "type": "suggestion",
      "defaultOptions": [
        "safe"
      ],
      "docs": {
        "description": "Require or disallow strict mode directives",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/strict"
      },
      "fixable": "code",
      "name": "strict",
      "plugin": "eslint"
    },
    "switch-colon-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "switch-colon-spacing",
              "url": "https://eslint.style/rules/js/switch-colon-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Enforce spacing around colons of switch statements",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/switch-colon-spacing"
      },
      "fixable": "whitespace",
      "name": "switch-colon-spacing",
      "plugin": "eslint"
    },
    "symbol-description": {
      "type": "suggestion",
      "docs": {
        "description": "Require symbol descriptions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/symbol-description"
      },
      "fixable": null,
      "name": "symbol-description",
      "plugin": "eslint"
    },
    "template-curly-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "template-curly-spacing",
              "url": "https://eslint.style/rules/js/template-curly-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "name": "template-curly-spacing",
      "plugin": "eslint"
    },
    "template-tag-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "template-tag-spacing",
              "url": "https://eslint.style/rules/js/template-tag-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between template tags and their literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/template-tag-spacing"
      },
      "fixable": "whitespace",
      "name": "template-tag-spacing",
      "plugin": "eslint"
    },
    "unicode-bom": {
      "type": "layout",
      "defaultOptions": [
        "never"
      ],
      "docs": {
        "description": "Require or disallow Unicode byte order mark (BOM)",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/unicode-bom"
      },
      "fixable": "whitespace",
      "name": "unicode-bom",
      "plugin": "eslint"
    },
    "use-isnan": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Require calls to `isNaN()` when checking for `NaN`",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/use-isnan"
      },
      "defaultOptions": [
        {
          "enforceForIndexOf": false,
          "enforceForSwitchCase": true
        }
      ],
      "name": "use-isnan",
      "plugin": "eslint"
    },
    "valid-typeof": {
      "type": "problem",
      "defaultOptions": [
        {
          "requireStringLiterals": false
        }
      ],
      "docs": {
        "description": "Enforce comparing `typeof` expressions against valid strings",
        "recommended": true,
        "url": "https://eslint.org/docs/latest/rules/valid-typeof"
      },
      "hasSuggestions": true,
      "name": "valid-typeof",
      "plugin": "eslint"
    },
    "vars-on-top": {
      "type": "suggestion",
      "docs": {
        "description": "Require `var` declarations be placed at the top of their containing scope",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/vars-on-top"
      },
      "name": "vars-on-top",
      "plugin": "eslint"
    },
    "wrap-iife": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "wrap-iife",
              "url": "https://eslint.style/rules/js/wrap-iife"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parentheses around immediate `function` invocations",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-iife"
      },
      "fixable": "code",
      "name": "wrap-iife",
      "plugin": "eslint"
    },
    "wrap-regex": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "wrap-regex",
              "url": "https://eslint.style/rules/js/wrap-regex"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require parenthesis around regex literals",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/wrap-regex"
      },
      "fixable": "code",
      "name": "wrap-regex",
      "plugin": "eslint"
    },
    "yield-star-spacing": {
      "deprecated": {
        "message": "Formatting rules are being moved out of ESLint core.",
        "url": "https://eslint.org/blog/2023/10/deprecating-formatting-rules/",
        "deprecatedSince": "8.53.0",
        "availableUntil": "10.0.0",
        "replacedBy": [
          {
            "message": "ESLint Stylistic now maintains deprecated stylistic core rules.",
            "url": "https://eslint.style/guide/migration",
            "plugin": {
              "name": "@stylistic/eslint-plugin-js",
              "url": "https://eslint.style/packages/js"
            },
            "rule": {
              "name": "yield-star-spacing",
              "url": "https://eslint.style/rules/js/yield-star-spacing"
            }
          }
        ]
      },
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around the `*` in `yield*` expressions",
        "recommended": false,
        "url": "https://eslint.org/docs/latest/rules/yield-star-spacing"
      },
      "fixable": "whitespace",
      "name": "yield-star-spacing",
      "plugin": "eslint"
    },
    "yoda": {
      "type": "suggestion",
      "defaultOptions": [
        "never",
        {
          "exceptRange": false,
          "onlyEquality": false
        }
      ],
      "docs": {
        "description": "Require or disallow \"Yoda\" conditions",
        "recommended": false,
        "frozen": true,
        "url": "https://eslint.org/docs/latest/rules/yoda"
      },
      "fixable": "code",
      "name": "yoda",
      "plugin": "eslint"
    },
    "perfectionist/sort-variable-declarations": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-variable-declarations",
        "description": "Enforce sorted variable declarations.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-variable-declarations",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-intersection-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-intersection-types",
        "description": "Enforce sorted intersection types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-intersection-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-heritage-clauses": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-heritage-clauses",
        "description": "Enforce sorted heritage clauses.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-heritage-clauses",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-array-includes": {
      "docs": {
        "description": "Enforce sorted arrays before include method.",
        "url": "https://perfectionist.dev/rules/sort-array-includes",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-array-includes",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-named-imports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-named-imports",
        "description": "Enforce sorted named imports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-named-imports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-named-exports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-named-exports",
        "description": "Enforce sorted named exports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-named-exports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-object-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-object-types",
        "description": "Enforce sorted object types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-object-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-union-types": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-union-types",
        "description": "Enforce sorted union types.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-union-types",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-switch-case": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-switch-case",
        "description": "Enforce sorted switch cases.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-switch-case",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-decorators": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-decorators",
        "description": "Enforce sorted decorators.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-decorators",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-interfaces": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-interfaces",
        "description": "Enforce sorted interface properties.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-interfaces",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-jsx-props": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-jsx-props",
        "description": "Enforce sorted JSX props.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-jsx-props",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-modules": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-modules",
        "description": "Enforce sorted modules.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-modules",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-classes": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-classes",
        "description": "Enforce sorted classes.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-classes",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-imports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-imports",
        "description": "Enforce sorted imports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-imports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-exports": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-exports",
        "description": "Enforce sorted exports.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-exports",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-objects": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-objects",
        "description": "Enforce sorted objects.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-objects",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-enums": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-enums",
        "description": "Enforce sorted TypeScript enums.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-enums",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-sets": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-sets",
        "description": "Enforce sorted sets.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-sets",
      "plugin": "perfectionist"
    },
    "perfectionist/sort-maps": {
      "docs": {
        "url": "https://perfectionist.dev/rules/sort-maps",
        "description": "Enforce sorted Map elements.",
        "recommended": true
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "perfectionist/sort-maps",
      "plugin": "perfectionist"
    },
    "@eslint-community/eslint-comments/disable-enable-pair": {
      "docs": {
        "description": "require a `eslint-enable` comment for every `eslint-disable` comment",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/disable-enable-pair.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/disable-enable-pair",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-aggregating-enable": {
      "docs": {
        "description": "disallow a `eslint-enable` comment for multiple `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-aggregating-enable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/no-aggregating-enable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-duplicate-disable": {
      "docs": {
        "description": "disallow duplicate `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-duplicate-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "@eslint-community/eslint-comments/no-duplicate-disable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-restricted-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments about specific rules",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-restricted-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/no-restricted-disable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-unlimited-disable": {
      "docs": {
        "description": "disallow `eslint-disable` comments without rule names",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unlimited-disable.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/no-unlimited-disable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-unused-disable": {
      "docs": {
        "description": "disallow unused `eslint-disable` comments",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-disable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "@eslint-community/eslint-comments/no-unused-disable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-unused-enable": {
      "docs": {
        "description": "disallow unused `eslint-enable` comments",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-unused-enable.html"
      },
      "fixable": null,
      "type": "problem",
      "name": "@eslint-community/eslint-comments/no-unused-enable",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/no-use": {
      "docs": {
        "description": "disallow ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/no-use.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/no-use",
      "plugin": "@eslint-community/eslint-comments"
    },
    "@eslint-community/eslint-comments/require-description": {
      "docs": {
        "description": "require include descriptions in ESLint directive-comments",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://eslint-community.github.io/eslint-plugin-eslint-comments/rules/require-description.html"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "@eslint-community/eslint-comments/require-description",
      "plugin": "@eslint-community/eslint-comments"
    },
    "n/callback-return": {
      "type": "suggestion",
      "docs": {
        "description": "require `return` statements after callbacks",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/callback-return.md"
      },
      "fixable": null,
      "name": "n/callback-return",
      "plugin": "n"
    },
    "n/exports-style": {
      "docs": {
        "description": "enforce either `module.exports` or `exports`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/exports-style.md"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "n/exports-style",
      "plugin": "n"
    },
    "n/file-extension-in-import": {
      "docs": {
        "description": "enforce the style of file extensions in `import` declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/file-extension-in-import.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "n/file-extension-in-import",
      "plugin": "n"
    },
    "n/global-require": {
      "type": "suggestion",
      "docs": {
        "description": "require `require()` calls to be placed at top-level module scope",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/global-require.md"
      },
      "fixable": null,
      "name": "n/global-require",
      "plugin": "n"
    },
    "n/handle-callback-err": {
      "type": "suggestion",
      "docs": {
        "description": "require error handling in callbacks",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/handle-callback-err.md"
      },
      "fixable": null,
      "name": "n/handle-callback-err",
      "plugin": "n"
    },
    "n/no-callback-literal": {
      "docs": {
        "description": "enforce Node.js-style error-first callback pattern is followed",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-callback-literal.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-callback-literal",
      "plugin": "n"
    },
    "n/no-deprecated-api": {
      "docs": {
        "description": "disallow deprecated APIs",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-deprecated-api.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-deprecated-api",
      "plugin": "n"
    },
    "n/no-exports-assign": {
      "docs": {
        "description": "disallow the assignment to `exports`",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-exports-assign.md"
      },
      "fixable": null,
      "type": "problem",
      "name": "n/no-exports-assign",
      "plugin": "n"
    },
    "n/no-extraneous-import": {
      "docs": {
        "description": "disallow `import` declarations which import extraneous modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-extraneous-import",
      "plugin": "n"
    },
    "n/no-extraneous-require": {
      "docs": {
        "description": "disallow `require()` expressions which import extraneous modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-extraneous-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-extraneous-require",
      "plugin": "n"
    },
    "n/no-missing-import": {
      "docs": {
        "description": "disallow `import` declarations which import non-existence modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-missing-import",
      "plugin": "n"
    },
    "n/no-missing-require": {
      "docs": {
        "description": "disallow `require()` expressions which import non-existence modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-missing-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-missing-require",
      "plugin": "n"
    },
    "n/no-mixed-requires": {
      "type": "suggestion",
      "docs": {
        "description": "disallow `require` calls to be mixed with regular variable declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-mixed-requires.md"
      },
      "fixable": null,
      "name": "n/no-mixed-requires",
      "plugin": "n"
    },
    "n/no-new-require": {
      "type": "suggestion",
      "docs": {
        "description": "disallow `new` operators with calls to `require`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-new-require.md"
      },
      "fixable": null,
      "name": "n/no-new-require",
      "plugin": "n"
    },
    "n/no-path-concat": {
      "type": "suggestion",
      "docs": {
        "description": "disallow string concatenation with `__dirname` and `__filename`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-path-concat.md"
      },
      "fixable": null,
      "name": "n/no-path-concat",
      "plugin": "n"
    },
    "n/no-process-env": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of `process.env`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-env.md"
      },
      "fixable": null,
      "name": "n/no-process-env",
      "plugin": "n"
    },
    "n/no-process-exit": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of `process.exit()`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-process-exit.md"
      },
      "fixable": null,
      "name": "n/no-process-exit",
      "plugin": "n"
    },
    "n/no-restricted-import": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specified modules when loaded by `import` declarations",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-import.md"
      },
      "fixable": null,
      "name": "n/no-restricted-import",
      "plugin": "n"
    },
    "n/no-restricted-require": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specified modules when loaded by `require`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-restricted-require.md"
      },
      "fixable": null,
      "name": "n/no-restricted-require",
      "plugin": "n"
    },
    "n/no-sync": {
      "type": "suggestion",
      "docs": {
        "description": "disallow synchronous methods",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-sync.md"
      },
      "fixable": null,
      "name": "n/no-sync",
      "plugin": "n"
    },
    "n/no-unpublished-bin": {
      "docs": {
        "description": "disallow `bin` files that npm ignores",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-bin.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unpublished-bin",
      "plugin": "n"
    },
    "n/no-unpublished-import": {
      "docs": {
        "description": "disallow `import` declarations which import private modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-import.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unpublished-import",
      "plugin": "n"
    },
    "n/no-unpublished-require": {
      "docs": {
        "description": "disallow `require()` expressions which import private modules",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unpublished-require.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unpublished-require",
      "plugin": "n"
    },
    "n/no-unsupported-features/es-builtins": {
      "docs": {
        "description": "disallow unsupported ECMAScript built-ins on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-builtins.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unsupported-features/es-builtins",
      "plugin": "n"
    },
    "n/no-unsupported-features/es-syntax": {
      "docs": {
        "description": "disallow unsupported ECMAScript syntax on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/es-syntax.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unsupported-features/es-syntax",
      "plugin": "n"
    },
    "n/no-unsupported-features/node-builtins": {
      "docs": {
        "description": "disallow unsupported Node.js built-in APIs on the specified version",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-unsupported-features/node-builtins.md"
      },
      "type": "problem",
      "fixable": null,
      "name": "n/no-unsupported-features/node-builtins",
      "plugin": "n"
    },
    "n/prefer-global/buffer": {
      "docs": {
        "description": "enforce either `Buffer` or `require(\"buffer\").Buffer`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/buffer.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/buffer",
      "plugin": "n"
    },
    "n/prefer-global/console": {
      "docs": {
        "description": "enforce either `console` or `require(\"console\")`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/console.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/console",
      "plugin": "n"
    },
    "n/prefer-global/process": {
      "docs": {
        "description": "enforce either `process` or `require(\"process\")`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/process.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/process",
      "plugin": "n"
    },
    "n/prefer-global/text-decoder": {
      "docs": {
        "description": "enforce either `TextDecoder` or `require(\"util\").TextDecoder`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-decoder.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/text-decoder",
      "plugin": "n"
    },
    "n/prefer-global/text-encoder": {
      "docs": {
        "description": "enforce either `TextEncoder` or `require(\"util\").TextEncoder`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/text-encoder.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/text-encoder",
      "plugin": "n"
    },
    "n/prefer-global/url-search-params": {
      "docs": {
        "description": "enforce either `URLSearchParams` or `require(\"url\").URLSearchParams`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url-search-params.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/url-search-params",
      "plugin": "n"
    },
    "n/prefer-global/url": {
      "docs": {
        "description": "enforce either `URL` or `require(\"url\").URL`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-global/url.md"
      },
      "type": "suggestion",
      "fixable": null,
      "name": "n/prefer-global/url",
      "plugin": "n"
    },
    "n/prefer-node-protocol": {
      "docs": {
        "description": "enforce using the `node:` protocol when importing Node.js builtin modules.",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-node-protocol.md"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "n/prefer-node-protocol",
      "plugin": "n"
    },
    "n/prefer-promises/dns": {
      "docs": {
        "description": "enforce `require(\"dns\").promises`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/dns.md"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "n/prefer-promises/dns",
      "plugin": "n"
    },
    "n/prefer-promises/fs": {
      "docs": {
        "description": "enforce `require(\"fs\").promises`",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/prefer-promises/fs.md"
      },
      "fixable": null,
      "type": "suggestion",
      "name": "n/prefer-promises/fs",
      "plugin": "n"
    },
    "n/process-exit-as-throw": {
      "docs": {
        "description": "require that `process.exit()` expressions use the same code path as `throw`",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/process-exit-as-throw.md"
      },
      "type": "problem",
      "fixable": null,
      "supported": false,
      "name": "n/process-exit-as-throw",
      "plugin": "n"
    },
    "n/hashbang": {
      "docs": {
        "description": "require correct usage of hashbang",
        "recommended": true,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md"
      },
      "type": "problem",
      "fixable": "code",
      "name": "n/hashbang",
      "plugin": "n"
    },
    "n/no-hide-core-modules": {
      "docs": {
        "description": "disallow third-party modules which are hiding core modules",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/no-hide-core-modules.md"
      },
      "type": "problem",
      "deprecated": true,
      "fixable": null,
      "name": "n/no-hide-core-modules",
      "plugin": "n"
    },
    "n/shebang": {
      "docs": {
        "description": "require correct usage of hashbang",
        "recommended": false,
        "url": "https://github.com/eslint-community/eslint-plugin-n/blob/HEAD/docs/rules/hashbang.md"
      },
      "type": "problem",
      "fixable": "code",
      "deprecated": true,
      "replacedBy": [
        "n/hashbang"
      ],
      "name": "n/shebang",
      "plugin": "n"
    },
    "promise/param-names": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent param names and ordering when creating new promises.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/param-names.md"
      },
      "name": "promise/param-names",
      "plugin": "promise"
    },
    "promise/no-return-wrap": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow wrapping values in `Promise.resolve` or `Promise.reject` when not needed.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-wrap.md"
      },
      "name": "promise/no-return-wrap",
      "plugin": "promise"
    },
    "promise/always-return": {
      "type": "problem",
      "docs": {
        "description": "Require returning inside each `then()` to create readable and reusable Promise chains.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/always-return.md"
      },
      "name": "promise/always-return",
      "plugin": "promise"
    },
    "promise/catch-or-return": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of `catch()` on un-returned promises.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/catch-or-return.md"
      },
      "name": "promise/catch-or-return",
      "plugin": "promise"
    },
    "promise/prefer-await-to-callbacks": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `async`/`await` to the callback pattern.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-callbacks.md"
      },
      "name": "promise/prefer-await-to-callbacks",
      "plugin": "promise"
    },
    "promise/prefer-await-to-then": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `await` to `then()`/`catch()`/`finally()` for reading Promise values.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-await-to-then.md"
      },
      "name": "promise/prefer-await-to-then",
      "plugin": "promise"
    },
    "promise/prefer-catch": {
      "type": "suggestion",
      "docs": {
        "description": "Prefer `catch` to `then(a, b)`/`then(null, b)` for handling errors.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/prefer-catch.md"
      },
      "fixable": "code",
      "name": "promise/prefer-catch",
      "plugin": "promise"
    },
    "promise/no-native": {
      "type": "suggestion",
      "docs": {
        "description": "Require creating a `Promise` constructor before using it in an ES5 environment.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-native.md"
      },
      "name": "promise/no-native",
      "plugin": "promise"
    },
    "promise/no-callback-in-promise": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow calling `cb()` inside of a `then()` (use [util.callbackify][] instead).",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-callback-in-promise.md"
      },
      "name": "promise/no-callback-in-promise",
      "plugin": "promise"
    },
    "promise/no-promise-in-callback": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using promises inside of callbacks.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-promise-in-callback.md"
      },
      "name": "promise/no-promise-in-callback",
      "plugin": "promise"
    },
    "promise/no-nesting": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow nested `then()` or `catch()` statements.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-nesting.md"
      },
      "name": "promise/no-nesting",
      "plugin": "promise"
    },
    "promise/avoid-new": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow creating `new` promises outside of utility libs (use [util.promisify][] instead).",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/avoid-new.md"
      },
      "name": "promise/avoid-new",
      "plugin": "promise"
    },
    "promise/no-new-statics": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling `new` on a Promise static method.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-new-statics.md"
      },
      "fixable": "code",
      "name": "promise/no-new-statics",
      "plugin": "promise"
    },
    "promise/no-return-in-finally": {
      "type": "problem",
      "docs": {
        "description": "Disallow return statements in `finally()`.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-return-in-finally.md"
      },
      "name": "promise/no-return-in-finally",
      "plugin": "promise"
    },
    "promise/valid-params": {
      "type": "problem",
      "docs": {
        "description": "Enforces the proper number of arguments are passed to Promise functions.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/valid-params.md"
      },
      "name": "promise/valid-params",
      "plugin": "promise"
    },
    "promise/no-multiple-resolved": {
      "type": "problem",
      "docs": {
        "description": "Disallow creating new promises with paths that resolve multiple times.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/no-multiple-resolved.md"
      },
      "name": "promise/no-multiple-resolved",
      "plugin": "promise"
    },
    "promise/spec-only": {
      "type": "problem",
      "docs": {
        "description": "Disallow use of non-standard Promise static methods.",
        "url": "https://github.com/eslint-community/eslint-plugin-promise/blob/main/docs/rules/spec-only.md"
      },
      "name": "promise/spec-only",
      "plugin": "promise"
    },
    "regexp/confusing-quantifier": {
      "docs": {
        "description": "disallow confusing quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/confusing-quantifier.html",
        "ruleId": "regexp/confusing-quantifier",
        "ruleName": "confusing-quantifier"
      },
      "type": "problem",
      "name": "regexp/confusing-quantifier",
      "plugin": "regexp"
    },
    "regexp/control-character-escape": {
      "docs": {
        "description": "enforce consistent escaping of control characters",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/control-character-escape.html",
        "ruleId": "regexp/control-character-escape",
        "ruleName": "control-character-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/control-character-escape",
      "plugin": "regexp"
    },
    "regexp/grapheme-string-literal": {
      "docs": {
        "description": "enforce single grapheme in string literal",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/grapheme-string-literal.html",
        "ruleId": "regexp/grapheme-string-literal",
        "ruleName": "grapheme-string-literal"
      },
      "type": "suggestion",
      "name": "regexp/grapheme-string-literal",
      "plugin": "regexp"
    },
    "regexp/hexadecimal-escape": {
      "docs": {
        "description": "enforce consistent usage of hexadecimal escape",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/hexadecimal-escape.html",
        "ruleId": "regexp/hexadecimal-escape",
        "ruleName": "hexadecimal-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/hexadecimal-escape",
      "plugin": "regexp"
    },
    "regexp/letter-case": {
      "docs": {
        "description": "enforce into your favorite case",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/letter-case.html",
        "ruleId": "regexp/letter-case",
        "ruleName": "letter-case"
      },
      "fixable": "code",
      "type": "layout",
      "name": "regexp/letter-case",
      "plugin": "regexp"
    },
    "regexp/match-any": {
      "docs": {
        "description": "enforce match any character style",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/match-any.html",
        "ruleId": "regexp/match-any",
        "ruleName": "match-any"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/match-any",
      "plugin": "regexp"
    },
    "regexp/negation": {
      "docs": {
        "description": "enforce use of escapes on negation",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/negation.html",
        "ruleId": "regexp/negation",
        "ruleName": "negation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/negation",
      "plugin": "regexp"
    },
    "regexp/no-contradiction-with-assertion": {
      "docs": {
        "description": "disallow elements that contradict assertions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-contradiction-with-assertion.html",
        "ruleId": "regexp/no-contradiction-with-assertion",
        "ruleName": "no-contradiction-with-assertion"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-contradiction-with-assertion",
      "plugin": "regexp"
    },
    "regexp/no-control-character": {
      "docs": {
        "description": "disallow control characters",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-control-character.html",
        "ruleId": "regexp/no-control-character",
        "ruleName": "no-control-character"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-control-character",
      "plugin": "regexp"
    },
    "regexp/no-dupe-characters-character-class": {
      "type": "suggestion",
      "docs": {
        "description": "disallow duplicate characters in the RegExp character class",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-characters-character-class.html",
        "ruleId": "regexp/no-dupe-characters-character-class",
        "ruleName": "no-dupe-characters-character-class"
      },
      "fixable": "code",
      "name": "regexp/no-dupe-characters-character-class",
      "plugin": "regexp"
    },
    "regexp/no-dupe-disjunctions": {
      "docs": {
        "description": "disallow duplicate disjunctions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-dupe-disjunctions.html",
        "ruleId": "regexp/no-dupe-disjunctions",
        "ruleName": "no-dupe-disjunctions"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "regexp/no-dupe-disjunctions",
      "plugin": "regexp"
    },
    "regexp/no-empty-alternative": {
      "docs": {
        "description": "disallow alternatives without elements",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-alternative.html",
        "ruleId": "regexp/no-empty-alternative",
        "ruleName": "no-empty-alternative"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-empty-alternative",
      "plugin": "regexp"
    },
    "regexp/no-empty-capturing-group": {
      "docs": {
        "description": "disallow capturing group that captures empty.",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-capturing-group.html",
        "ruleId": "regexp/no-empty-capturing-group",
        "ruleName": "no-empty-capturing-group"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-empty-character-class": {
      "docs": {
        "description": "disallow character classes that match no characters",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-character-class.html",
        "ruleId": "regexp/no-empty-character-class",
        "ruleName": "no-empty-character-class"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-character-class",
      "plugin": "regexp"
    },
    "regexp/no-empty-group": {
      "docs": {
        "description": "disallow empty group",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-group.html",
        "ruleId": "regexp/no-empty-group",
        "ruleName": "no-empty-group"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-group",
      "plugin": "regexp"
    },
    "regexp/no-empty-lookarounds-assertion": {
      "docs": {
        "description": "disallow empty lookahead assertion or empty lookbehind assertion",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-lookarounds-assertion.html",
        "ruleId": "regexp/no-empty-lookarounds-assertion",
        "ruleName": "no-empty-lookarounds-assertion"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-lookarounds-assertion",
      "plugin": "regexp"
    },
    "regexp/no-empty-string-literal": {
      "docs": {
        "description": "disallow empty string literals in character classes",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-empty-string-literal.html",
        "ruleId": "regexp/no-empty-string-literal",
        "ruleName": "no-empty-string-literal"
      },
      "type": "suggestion",
      "name": "regexp/no-empty-string-literal",
      "plugin": "regexp"
    },
    "regexp/no-escape-backspace": {
      "docs": {
        "description": "disallow escape backspace (`[\\b]`)",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-escape-backspace.html",
        "ruleId": "regexp/no-escape-backspace",
        "ruleName": "no-escape-backspace"
      },
      "hasSuggestions": true,
      "type": "suggestion",
      "name": "regexp/no-escape-backspace",
      "plugin": "regexp"
    },
    "regexp/no-extra-lookaround-assertions": {
      "docs": {
        "description": "disallow unnecessary nested lookaround assertions",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-extra-lookaround-assertions.html",
        "ruleId": "regexp/no-extra-lookaround-assertions",
        "ruleName": "no-extra-lookaround-assertions"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-extra-lookaround-assertions",
      "plugin": "regexp"
    },
    "regexp/no-invalid-regexp": {
      "docs": {
        "description": "disallow invalid regular expression strings in `RegExp` constructors",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invalid-regexp.html",
        "ruleId": "regexp/no-invalid-regexp",
        "ruleName": "no-invalid-regexp"
      },
      "type": "problem",
      "name": "regexp/no-invalid-regexp",
      "plugin": "regexp"
    },
    "regexp/no-invisible-character": {
      "docs": {
        "description": "disallow invisible raw character",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-invisible-character.html",
        "ruleId": "regexp/no-invisible-character",
        "ruleName": "no-invisible-character"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-invisible-character",
      "plugin": "regexp"
    },
    "regexp/no-lazy-ends": {
      "docs": {
        "description": "disallow lazy quantifiers at the end of an expression",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-lazy-ends.html",
        "ruleId": "regexp/no-lazy-ends",
        "ruleName": "no-lazy-ends"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-lazy-ends",
      "plugin": "regexp"
    },
    "regexp/no-legacy-features": {
      "docs": {
        "description": "disallow legacy RegExp features",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-legacy-features.html",
        "ruleId": "regexp/no-legacy-features",
        "ruleName": "no-legacy-features"
      },
      "type": "suggestion",
      "name": "regexp/no-legacy-features",
      "plugin": "regexp"
    },
    "regexp/no-misleading-capturing-group": {
      "docs": {
        "description": "disallow capturing groups that do not behave as one would expect",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-capturing-group.html",
        "ruleId": "regexp/no-misleading-capturing-group",
        "ruleName": "no-misleading-capturing-group"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-misleading-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-misleading-unicode-character": {
      "docs": {
        "description": "disallow multi-code-point characters in character classes and quantifiers",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-misleading-unicode-character.html",
        "ruleId": "regexp/no-misleading-unicode-character",
        "ruleName": "no-misleading-unicode-character"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-misleading-unicode-character",
      "plugin": "regexp"
    },
    "regexp/no-missing-g-flag": {
      "docs": {
        "description": "disallow missing `g` flag in patterns used in `String#matchAll` and `String#replaceAll`",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-missing-g-flag.html",
        "ruleId": "regexp/no-missing-g-flag",
        "ruleName": "no-missing-g-flag"
      },
      "fixable": "code",
      "type": "problem",
      "name": "regexp/no-missing-g-flag",
      "plugin": "regexp"
    },
    "regexp/no-non-standard-flag": {
      "docs": {
        "description": "disallow non-standard flags",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-non-standard-flag.html",
        "ruleId": "regexp/no-non-standard-flag",
        "ruleName": "no-non-standard-flag"
      },
      "type": "suggestion",
      "name": "regexp/no-non-standard-flag",
      "plugin": "regexp"
    },
    "regexp/no-obscure-range": {
      "docs": {
        "description": "disallow obscure character ranges",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-obscure-range.html",
        "ruleId": "regexp/no-obscure-range",
        "ruleName": "no-obscure-range"
      },
      "type": "suggestion",
      "name": "regexp/no-obscure-range",
      "plugin": "regexp"
    },
    "regexp/no-octal": {
      "docs": {
        "description": "disallow octal escape sequence",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-octal.html",
        "ruleId": "regexp/no-octal",
        "ruleName": "no-octal"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-octal",
      "plugin": "regexp"
    },
    "regexp/no-optional-assertion": {
      "docs": {
        "description": "disallow optional assertions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-optional-assertion.html",
        "ruleId": "regexp/no-optional-assertion",
        "ruleName": "no-optional-assertion"
      },
      "type": "problem",
      "name": "regexp/no-optional-assertion",
      "plugin": "regexp"
    },
    "regexp/no-potentially-useless-backreference": {
      "docs": {
        "description": "disallow backreferences that reference a group that might not be matched",
        "category": "Possible Errors",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-potentially-useless-backreference.html",
        "ruleId": "regexp/no-potentially-useless-backreference",
        "ruleName": "no-potentially-useless-backreference"
      },
      "type": "problem",
      "name": "regexp/no-potentially-useless-backreference",
      "plugin": "regexp"
    },
    "regexp/no-standalone-backslash": {
      "docs": {
        "description": "disallow standalone backslashes (`\\`)",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-standalone-backslash.html",
        "ruleId": "regexp/no-standalone-backslash",
        "ruleName": "no-standalone-backslash"
      },
      "type": "suggestion",
      "name": "regexp/no-standalone-backslash",
      "plugin": "regexp"
    },
    "regexp/no-super-linear-backtracking": {
      "docs": {
        "description": "disallow exponential and polynomial backtracking",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-backtracking.html",
        "ruleId": "regexp/no-super-linear-backtracking",
        "ruleName": "no-super-linear-backtracking"
      },
      "fixable": "code",
      "type": "problem",
      "name": "regexp/no-super-linear-backtracking",
      "plugin": "regexp"
    },
    "regexp/no-super-linear-move": {
      "docs": {
        "description": "disallow quantifiers that cause quadratic moves",
        "category": "Possible Errors",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-super-linear-move.html",
        "ruleId": "regexp/no-super-linear-move",
        "ruleName": "no-super-linear-move"
      },
      "type": "problem",
      "name": "regexp/no-super-linear-move",
      "plugin": "regexp"
    },
    "regexp/no-trivially-nested-assertion": {
      "docs": {
        "description": "disallow trivially nested assertions",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-assertion.html",
        "ruleId": "regexp/no-trivially-nested-assertion",
        "ruleName": "no-trivially-nested-assertion"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-trivially-nested-assertion",
      "plugin": "regexp"
    },
    "regexp/no-trivially-nested-quantifier": {
      "docs": {
        "description": "disallow nested quantifiers that can be rewritten as one quantifier",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-trivially-nested-quantifier.html",
        "ruleId": "regexp/no-trivially-nested-quantifier",
        "ruleName": "no-trivially-nested-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-trivially-nested-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-unused-capturing-group": {
      "docs": {
        "description": "disallow unused capturing group",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-unused-capturing-group.html",
        "ruleId": "regexp/no-unused-capturing-group",
        "ruleName": "no-unused-capturing-group"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-unused-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-useless-assertions": {
      "docs": {
        "description": "disallow assertions that are known to always accept (or reject)",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-assertions.html",
        "ruleId": "regexp/no-useless-assertions",
        "ruleName": "no-useless-assertions"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/no-useless-assertions",
      "plugin": "regexp"
    },
    "regexp/no-useless-backreference": {
      "docs": {
        "description": "disallow useless backreferences in regular expressions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-backreference.html",
        "ruleId": "regexp/no-useless-backreference",
        "ruleName": "no-useless-backreference"
      },
      "type": "suggestion",
      "name": "regexp/no-useless-backreference",
      "plugin": "regexp"
    },
    "regexp/no-useless-character-class": {
      "docs": {
        "description": "disallow character class with one character",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-character-class.html",
        "ruleId": "regexp/no-useless-character-class",
        "ruleName": "no-useless-character-class"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-character-class",
      "plugin": "regexp"
    },
    "regexp/no-useless-dollar-replacements": {
      "docs": {
        "description": "disallow useless `$` replacements in replacement string",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-dollar-replacements.html",
        "ruleId": "regexp/no-useless-dollar-replacements",
        "ruleName": "no-useless-dollar-replacements"
      },
      "type": "suggestion",
      "name": "regexp/no-useless-dollar-replacements",
      "plugin": "regexp"
    },
    "regexp/no-useless-escape": {
      "docs": {
        "description": "disallow unnecessary escape characters in RegExp",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-escape.html",
        "ruleId": "regexp/no-useless-escape",
        "ruleName": "no-useless-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-escape",
      "plugin": "regexp"
    },
    "regexp/no-useless-flag": {
      "docs": {
        "description": "disallow unnecessary regex flags",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-flag.html",
        "ruleId": "regexp/no-useless-flag",
        "ruleName": "no-useless-flag"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-flag",
      "plugin": "regexp"
    },
    "regexp/no-useless-lazy": {
      "docs": {
        "description": "disallow unnecessarily non-greedy quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-lazy.html",
        "ruleId": "regexp/no-useless-lazy",
        "ruleName": "no-useless-lazy"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-lazy",
      "plugin": "regexp"
    },
    "regexp/no-useless-non-capturing-group": {
      "docs": {
        "description": "disallow unnecessary non-capturing group",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-non-capturing-group.html",
        "ruleId": "regexp/no-useless-non-capturing-group",
        "ruleName": "no-useless-non-capturing-group"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-non-capturing-group",
      "plugin": "regexp"
    },
    "regexp/no-useless-quantifier": {
      "docs": {
        "description": "disallow quantifiers that can be removed",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-quantifier.html",
        "ruleId": "regexp/no-useless-quantifier",
        "ruleName": "no-useless-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-useless-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-useless-range": {
      "docs": {
        "description": "disallow unnecessary character ranges",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-range.html",
        "ruleId": "regexp/no-useless-range",
        "ruleName": "no-useless-range"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-range",
      "plugin": "regexp"
    },
    "regexp/no-useless-set-operand": {
      "docs": {
        "description": "disallow unnecessary elements in expression character classes",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-set-operand.html",
        "ruleId": "regexp/no-useless-set-operand",
        "ruleName": "no-useless-set-operand"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-set-operand",
      "plugin": "regexp"
    },
    "regexp/no-useless-string-literal": {
      "docs": {
        "description": "disallow string disjunction of single characters in `\\q{...}`",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-string-literal.html",
        "ruleId": "regexp/no-useless-string-literal",
        "ruleName": "no-useless-string-literal"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "regexp/no-useless-string-literal",
      "plugin": "regexp"
    },
    "regexp/no-useless-two-nums-quantifier": {
      "docs": {
        "description": "disallow unnecessary `{n,m}` quantifier",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-useless-two-nums-quantifier.html",
        "ruleId": "regexp/no-useless-two-nums-quantifier",
        "ruleName": "no-useless-two-nums-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/no-useless-two-nums-quantifier",
      "plugin": "regexp"
    },
    "regexp/no-zero-quantifier": {
      "docs": {
        "description": "disallow quantifiers with a maximum of zero",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/no-zero-quantifier.html",
        "ruleId": "regexp/no-zero-quantifier",
        "ruleName": "no-zero-quantifier"
      },
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/no-zero-quantifier",
      "plugin": "regexp"
    },
    "regexp/optimal-lookaround-quantifier": {
      "docs": {
        "description": "disallow the alternatives of lookarounds that end with a non-constant quantifier",
        "category": "Best Practices",
        "recommended": true,
        "default": "warn",
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-lookaround-quantifier.html",
        "ruleId": "regexp/optimal-lookaround-quantifier",
        "ruleName": "optimal-lookaround-quantifier"
      },
      "hasSuggestions": true,
      "type": "problem",
      "name": "regexp/optimal-lookaround-quantifier",
      "plugin": "regexp"
    },
    "regexp/optimal-quantifier-concatenation": {
      "docs": {
        "description": "require optimal quantifiers for concatenated quantifiers",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/optimal-quantifier-concatenation.html",
        "ruleId": "regexp/optimal-quantifier-concatenation",
        "ruleName": "optimal-quantifier-concatenation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/optimal-quantifier-concatenation",
      "plugin": "regexp"
    },
    "regexp/prefer-character-class": {
      "docs": {
        "description": "enforce using character class",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-character-class.html",
        "ruleId": "regexp/prefer-character-class",
        "ruleName": "prefer-character-class"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-character-class",
      "plugin": "regexp"
    },
    "regexp/prefer-d": {
      "docs": {
        "description": "enforce using `\\d`",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-d.html",
        "ruleId": "regexp/prefer-d",
        "ruleName": "prefer-d"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-d",
      "plugin": "regexp"
    },
    "regexp/prefer-escape-replacement-dollar-char": {
      "docs": {
        "description": "enforces escape of replacement `$` character (`$$`).",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-escape-replacement-dollar-char.html",
        "ruleId": "regexp/prefer-escape-replacement-dollar-char",
        "ruleName": "prefer-escape-replacement-dollar-char"
      },
      "type": "suggestion",
      "name": "regexp/prefer-escape-replacement-dollar-char",
      "plugin": "regexp"
    },
    "regexp/prefer-lookaround": {
      "docs": {
        "description": "prefer lookarounds over capturing group that do not replace",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-lookaround.html",
        "ruleId": "regexp/prefer-lookaround",
        "ruleName": "prefer-lookaround"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-lookaround",
      "plugin": "regexp"
    },
    "regexp/prefer-named-backreference": {
      "docs": {
        "description": "enforce using named backreferences",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-backreference.html",
        "ruleId": "regexp/prefer-named-backreference",
        "ruleName": "prefer-named-backreference"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-named-backreference",
      "plugin": "regexp"
    },
    "regexp/prefer-named-capture-group": {
      "docs": {
        "description": "enforce using named capture groups",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-capture-group.html",
        "ruleId": "regexp/prefer-named-capture-group",
        "ruleName": "prefer-named-capture-group"
      },
      "type": "suggestion",
      "name": "regexp/prefer-named-capture-group",
      "plugin": "regexp"
    },
    "regexp/prefer-named-replacement": {
      "docs": {
        "description": "enforce using named replacement",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-named-replacement.html",
        "ruleId": "regexp/prefer-named-replacement",
        "ruleName": "prefer-named-replacement"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-named-replacement",
      "plugin": "regexp"
    },
    "regexp/prefer-plus-quantifier": {
      "docs": {
        "description": "enforce using `+` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-plus-quantifier.html",
        "ruleId": "regexp/prefer-plus-quantifier",
        "ruleName": "prefer-plus-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-plus-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-predefined-assertion": {
      "docs": {
        "description": "prefer predefined assertion over equivalent lookarounds",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-predefined-assertion.html",
        "ruleId": "regexp/prefer-predefined-assertion",
        "ruleName": "prefer-predefined-assertion"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-predefined-assertion",
      "plugin": "regexp"
    },
    "regexp/prefer-quantifier": {
      "docs": {
        "description": "enforce using quantifier",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-quantifier.html",
        "ruleId": "regexp/prefer-quantifier",
        "ruleName": "prefer-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-question-quantifier": {
      "docs": {
        "description": "enforce using `?` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-question-quantifier.html",
        "ruleId": "regexp/prefer-question-quantifier",
        "ruleName": "prefer-question-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-question-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-range": {
      "docs": {
        "description": "enforce using character class range",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-range.html",
        "ruleId": "regexp/prefer-range",
        "ruleName": "prefer-range"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-range",
      "plugin": "regexp"
    },
    "regexp/prefer-regexp-exec": {
      "docs": {
        "description": "enforce that `RegExp#exec` is used instead of `String#match` if no global flag is provided",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-exec.html",
        "ruleId": "regexp/prefer-regexp-exec",
        "ruleName": "prefer-regexp-exec"
      },
      "type": "suggestion",
      "name": "regexp/prefer-regexp-exec",
      "plugin": "regexp"
    },
    "regexp/prefer-regexp-test": {
      "docs": {
        "description": "enforce that `RegExp#test` is used instead of `String#match` and `RegExp#exec`",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-regexp-test.html",
        "ruleId": "regexp/prefer-regexp-test",
        "ruleName": "prefer-regexp-test"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-regexp-test",
      "plugin": "regexp"
    },
    "regexp/prefer-result-array-groups": {
      "docs": {
        "description": "enforce using result array `groups`",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-result-array-groups.html",
        "ruleId": "regexp/prefer-result-array-groups",
        "ruleName": "prefer-result-array-groups"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-result-array-groups",
      "plugin": "regexp"
    },
    "regexp/prefer-set-operation": {
      "docs": {
        "description": "prefer character class set operations instead of lookarounds",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-set-operation.html",
        "ruleId": "regexp/prefer-set-operation",
        "ruleName": "prefer-set-operation"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-set-operation",
      "plugin": "regexp"
    },
    "regexp/prefer-star-quantifier": {
      "docs": {
        "description": "enforce using `*` quantifier",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-star-quantifier.html",
        "ruleId": "regexp/prefer-star-quantifier",
        "ruleName": "prefer-star-quantifier"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-star-quantifier",
      "plugin": "regexp"
    },
    "regexp/prefer-unicode-codepoint-escapes": {
      "docs": {
        "description": "enforce use of unicode codepoint escapes",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-unicode-codepoint-escapes.html",
        "ruleId": "regexp/prefer-unicode-codepoint-escapes",
        "ruleName": "prefer-unicode-codepoint-escapes"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-unicode-codepoint-escapes",
      "plugin": "regexp"
    },
    "regexp/prefer-w": {
      "docs": {
        "description": "enforce using `\\w`",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/prefer-w.html",
        "ruleId": "regexp/prefer-w",
        "ruleName": "prefer-w"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/prefer-w",
      "plugin": "regexp"
    },
    "regexp/require-unicode-regexp": {
      "docs": {
        "description": "enforce the use of the `u` flag",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-regexp.html",
        "ruleId": "regexp/require-unicode-regexp",
        "ruleName": "require-unicode-regexp"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/require-unicode-regexp",
      "plugin": "regexp"
    },
    "regexp/require-unicode-sets-regexp": {
      "docs": {
        "description": "enforce the use of the `v` flag",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/require-unicode-sets-regexp.html",
        "ruleId": "regexp/require-unicode-sets-regexp",
        "ruleName": "require-unicode-sets-regexp"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/require-unicode-sets-regexp",
      "plugin": "regexp"
    },
    "regexp/simplify-set-operations": {
      "docs": {
        "description": "require simplify set operations",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/simplify-set-operations.html",
        "ruleId": "regexp/simplify-set-operations",
        "ruleName": "simplify-set-operations"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/simplify-set-operations",
      "plugin": "regexp"
    },
    "regexp/sort-alternatives": {
      "docs": {
        "description": "sort alternatives if order doesn't matter",
        "category": "Best Practices",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-alternatives.html",
        "ruleId": "regexp/sort-alternatives",
        "ruleName": "sort-alternatives"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/sort-alternatives",
      "plugin": "regexp"
    },
    "regexp/sort-character-class-elements": {
      "docs": {
        "description": "enforces elements order in character class",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-character-class-elements.html",
        "ruleId": "regexp/sort-character-class-elements",
        "ruleName": "sort-character-class-elements"
      },
      "fixable": "code",
      "type": "layout",
      "name": "regexp/sort-character-class-elements",
      "plugin": "regexp"
    },
    "regexp/sort-flags": {
      "docs": {
        "description": "require regex flags to be sorted",
        "category": "Stylistic Issues",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/sort-flags.html",
        "ruleId": "regexp/sort-flags",
        "ruleName": "sort-flags"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/sort-flags",
      "plugin": "regexp"
    },
    "regexp/strict": {
      "docs": {
        "description": "disallow not strictly valid regular expressions",
        "category": "Possible Errors",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/strict.html",
        "ruleId": "regexp/strict",
        "ruleName": "strict"
      },
      "fixable": "code",
      "type": "suggestion",
      "hasSuggestions": true,
      "name": "regexp/strict",
      "plugin": "regexp"
    },
    "regexp/unicode-escape": {
      "docs": {
        "description": "enforce consistent usage of unicode escape or unicode codepoint escape",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-escape.html",
        "ruleId": "regexp/unicode-escape",
        "ruleName": "unicode-escape"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/unicode-escape",
      "plugin": "regexp"
    },
    "regexp/unicode-property": {
      "docs": {
        "description": "enforce consistent naming of unicode properties",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/unicode-property.html",
        "ruleId": "regexp/unicode-property",
        "ruleName": "unicode-property"
      },
      "type": "suggestion",
      "fixable": "code",
      "name": "regexp/unicode-property",
      "plugin": "regexp"
    },
    "regexp/use-ignore-case": {
      "docs": {
        "description": "use the `i` flag if it simplifies the pattern",
        "category": "Best Practices",
        "recommended": true,
        "url": "https://ota-meshi.github.io/eslint-plugin-regexp/rules/use-ignore-case.html",
        "ruleId": "regexp/use-ignore-case",
        "ruleName": "use-ignore-case"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "regexp/use-ignore-case",
      "plugin": "regexp"
    },
    "depend/ban-dependencies": {
      "type": "suggestion",
      "docs": {
        "description": "Bans a list of dependencies from being used",
        "url": "https://github.com/es-tooling/eslint-plugin-depend/blob/main/docs/rules/ban-dependencies.md"
      },
      "name": "depend/ban-dependencies",
      "plugin": "depend"
    },
    "@susisu/safe-typescript/no-object-assign": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of Object.assign()",
        "url": "https://github.com/susisu/eslint-plugin-safe-typescript/blob/main/src/rules/no-object-assign/README.md"
      },
      "name": "@susisu/safe-typescript/no-object-assign",
      "plugin": "@susisu/safe-typescript"
    },
    "@susisu/safe-typescript/no-type-assertion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type assertions",
        "url": "https://github.com/susisu/eslint-plugin-safe-typescript/blob/main/src/rules/no-type-assertion/README.md"
      },
      "name": "@susisu/safe-typescript/no-type-assertion",
      "plugin": "@susisu/safe-typescript"
    },
    "@susisu/safe-typescript/no-unsafe-object-enum-method": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow possibly unsafe property enumeration methods of Object",
        "requiresTypeChecking": true,
        "url": "https://github.com/susisu/eslint-plugin-safe-typescript/blob/main/src/rules/no-unsafe-object-enum-method/README.md"
      },
      "name": "@susisu/safe-typescript/no-unsafe-object-enum-method",
      "plugin": "@susisu/safe-typescript"
    },
    "@susisu/safe-typescript/no-unsafe-object-property-check": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow possibly unsafe property checks of object",
        "requiresTypeChecking": true,
        "url": "https://github.com/susisu/eslint-plugin-safe-typescript/blob/main/src/rules/no-unsafe-object-property-check/README.md"
      },
      "name": "@susisu/safe-typescript/no-unsafe-object-property-check",
      "plugin": "@susisu/safe-typescript"
    },
    "@susisu/safe-typescript/no-unsafe-object-property-overwrite": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow possibly unsafe overwrites of object properties",
        "requiresTypeChecking": true,
        "url": "https://github.com/susisu/eslint-plugin-safe-typescript/blob/main/src/rules/no-unsafe-object-property-overwrite/README.md"
      },
      "name": "@susisu/safe-typescript/no-unsafe-object-property-overwrite",
      "plugin": "@susisu/safe-typescript"
    },
    "@typescript-eslint/adjacent-overload-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Require that function overload signatures be consecutive",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
      },
      "name": "@typescript-eslint/adjacent-overload-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/array-type": {
      "type": "suggestion",
      "docs": {
        "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/array-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/array-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/await-thenable": {
      "type": "problem",
      "docs": {
        "description": "Disallow awaiting a value that is not a Thenable",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/await-thenable"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/await-thenable",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-ts-comment": {
      "type": "problem",
      "docs": {
        "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "minimumDescriptionLength": 10
            }
          ]
        },
        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/ban-ts-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/ban-tslint-comment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `// tslint:<rule-flag>` comments",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
      },
      "fixable": "code",
      "name": "@typescript-eslint/ban-tslint-comment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-literal-property-style": {
      "type": "problem",
      "docs": {
        "description": "Enforce that literals on classes are exposed in a consistent style",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/class-literal-property-style"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/class-literal-property-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/class-methods-use-this": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that class methods utilize `this`",
        "extendsBaseRule": true,
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/class-methods-use-this"
      },
      "name": "@typescript-eslint/class-methods-use-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-generic-constructors": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-generic-constructors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-indexed-object-style": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow the `Record` type",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/consistent-indexed-object-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-return": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "treatUndefinedAsUnspecified": false
        }
      ],
      "docs": {
        "description": "Require `return` statements to either always or never specify values",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-return"
      },
      "name": "@typescript-eslint/consistent-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-assertions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type assertions",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/consistent-type-assertions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-definitions": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce type definitions to consistently use either `interface` or `type`",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-definitions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-exports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type exports",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-type-exports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-exports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/consistent-type-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type imports",
        "url": "https://typescript-eslint.io/rules/consistent-type-imports"
      },
      "fixable": "code",
      "name": "@typescript-eslint/consistent-type-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/default-param-last": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/default-param-last"
      },
      "name": "@typescript-eslint/default-param-last",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/dot-notation": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowIndexSignaturePropertyAccess": false,
          "allowKeywords": true,
          "allowPattern": "",
          "allowPrivateClassPropertyAccess": false,
          "allowProtectedClassPropertyAccess": false
        }
      ],
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/dot-notation"
      },
      "fixable": "code",
      "name": "@typescript-eslint/dot-notation",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-function-return-type": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return types on functions and class methods",
        "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
      },
      "name": "@typescript-eslint/explicit-function-return-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-member-accessibility": {
      "type": "problem",
      "docs": {
        "description": "Require explicit accessibility modifiers on class properties and methods",
        "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/explicit-member-accessibility",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/explicit-module-boundary-types": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
        "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
      },
      "name": "@typescript-eslint/explicit-module-boundary-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/init-declarations": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/init-declarations"
      },
      "name": "@typescript-eslint/init-declarations",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/max-params": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce a maximum number of parameters in function definitions",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/max-params"
      },
      "name": "@typescript-eslint/max-params",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/member-ordering": {
      "type": "suggestion",
      "docs": {
        "description": "Require a consistent member declaration order",
        "url": "https://typescript-eslint.io/rules/member-ordering"
      },
      "name": "@typescript-eslint/member-ordering",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/method-signature-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using a particular method signature syntax",
        "url": "https://typescript-eslint.io/rules/method-signature-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/method-signature-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/naming-convention": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce naming conventions for everything across a codebase",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/naming-convention"
      },
      "name": "@typescript-eslint/naming-convention",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-constructor": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow generic `Array` constructors",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-array-constructor"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-array-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-array-delete": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the `delete` operator on array values",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-array-delete"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-array-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-base-to-string": {
      "type": "suggestion",
      "docs": {
        "description": "Require `.toString()` and `.toLocaleString()` to only be called on objects which provide useful information when stringified",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-base-to-string"
      },
      "name": "@typescript-eslint/no-base-to-string",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertion in locations that may be confusing",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-confusing-void-expression": {
      "type": "problem",
      "docs": {
        "description": "Require expressions of type void to appear in statement position",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-confusing-void-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-deprecated": {
      "type": "problem",
      "docs": {
        "description": "Disallow using code marked as `@deprecated`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-deprecated"
      },
      "name": "@typescript-eslint/no-deprecated",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dupe-class-members": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
      },
      "name": "@typescript-eslint/no-dupe-class-members",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-enum-values": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate enum member values",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
      },
      "hasSuggestions": false,
      "name": "@typescript-eslint/no-duplicate-enum-values",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-duplicate-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow duplicate constituents of union or intersection types",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-duplicate-type-constituents"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-duplicate-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-dynamic-delete": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow using the `delete` operator on computed key expressions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-dynamic-delete",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-function": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allow": []
        }
      ],
      "docs": {
        "description": "Disallow empty functions",
        "extendsBaseRule": true,
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-empty-function"
      },
      "name": "@typescript-eslint/no-empty-function",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-interface": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-empty-object-type",
              "url": "https://typescript-eslint.io/rules/no-empty-object-type"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8977"
      },
      "docs": {
        "description": "Disallow the declaration of empty interfaces",
        "url": "https://typescript-eslint.io/rules/no-empty-interface"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": [
        "@typescript-eslint/no-empty-object-type"
      ],
      "name": "@typescript-eslint/no-empty-interface",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-empty-object-type": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow accidentally using the \"empty object\" type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-empty-object-type"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-empty-object-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-explicit-any": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `any` type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-explicit-any"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-explicit-any",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extra-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow extra non-null assertions",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-extra-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-extraneous-class": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes used as namespaces",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-extraneous-class"
      },
      "name": "@typescript-eslint/no-extraneous-class",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-floating-promises": {
      "type": "problem",
      "docs": {
        "description": "Require Promise-like statements to be handled appropriately",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-floating-promises"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-floating-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-for-in-array": {
      "type": "problem",
      "docs": {
        "description": "Disallow iterating over an array with a for-in loop",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-for-in-array"
      },
      "name": "@typescript-eslint/no-for-in-array",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-implied-eval": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the use of `eval()`-like functions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-implied-eval"
      },
      "name": "@typescript-eslint/no-implied-eval",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-import-type-side-effects": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
        "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-import-type-side-effects",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-inferrable-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/no-inferrable-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-inferrable-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-this": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "capIsConstructor": true
        }
      ],
      "docs": {
        "description": "Disallow `this` keywords outside of classes or class-like objects",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-invalid-this"
      },
      "name": "@typescript-eslint/no-invalid-this",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-invalid-void-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow `void` type outside of generic or return types",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
      },
      "name": "@typescript-eslint/no-invalid-void-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loop-func": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loop-func"
      },
      "name": "@typescript-eslint/no-loop-func",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-loss-of-precision": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "no-loss-of-precision",
              "url": "https://eslint.org/docs/latest/rules/no-loss-of-precision"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8832"
      },
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
      },
      "name": "@typescript-eslint/no-loss-of-precision",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-magic-numbers": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-magic-numbers"
      },
      "name": "@typescript-eslint/no-magic-numbers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-meaningless-void-operator": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `void` operator except when used to discard a value",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-meaningless-void-operator",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-new": {
      "type": "problem",
      "docs": {
        "description": "Enforce valid definition of `new` and `constructor`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-misused-new"
      },
      "name": "@typescript-eslint/no-misused-new",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-promises": {
      "type": "problem",
      "docs": {
        "description": "Disallow Promises in places not designed to handle them",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-promises"
      },
      "name": "@typescript-eslint/no-misused-promises",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-misused-spread": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the spread operator when it might cause unexpected behavior",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-spread"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-misused-spread",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-mixed-enums": {
      "type": "problem",
      "docs": {
        "description": "Disallow enums from having both number and string members",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-mixed-enums"
      },
      "name": "@typescript-eslint/no-mixed-enums",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-namespace": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow TypeScript namespaces",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-namespace"
      },
      "name": "@typescript-eslint/no-namespace",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-asserted-optional-chain": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions after an optional chain expression",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-asserted-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-non-null-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions using the `!` postfix operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-non-null-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redeclare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-redeclare"
      },
      "name": "@typescript-eslint/no-redeclare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-redundant-type-constituents": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow members of unions and intersections that do nothing or override type information",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
      },
      "name": "@typescript-eslint/no-redundant-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-require-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow invocation of `require()`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-require-imports"
      },
      "name": "@typescript-eslint/no-require-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-restricted-imports": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-restricted-imports"
      },
      "name": "@typescript-eslint/no-restricted-imports",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-restricted-types": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types",
        "url": "https://typescript-eslint.io/rules/no-restricted-types"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-restricted-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-shadow": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-shadow"
      },
      "name": "@typescript-eslint/no-shadow",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-this-alias": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow aliasing `this`",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-this-alias"
      },
      "name": "@typescript-eslint/no-this-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-type-alias": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "6.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/consistent-type-definitions",
              "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/6229"
      },
      "docs": {
        "description": "Disallow type aliases",
        "url": "https://typescript-eslint.io/rules/no-type-alias"
      },
      "name": "@typescript-eslint/no-type-alias",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary equality comparisons against boolean literals",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-boolean-literal-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-condition": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conditionals where the type is always truthy or always falsy",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-condition",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-parameter-property-assignment": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary assignment of constructor property parameter",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-parameter-property-assignment"
      },
      "name": "@typescript-eslint/no-unnecessary-parameter-property-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-qualifier": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary namespace qualifiers",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-qualifier",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-template-expression": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary template expressions",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-template-expression"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-template-expression",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-arguments": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type arguments that are equal to the default",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-type-arguments",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-assertion": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type assertions that do not change the type of an expression",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-unnecessary-type-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-constraint": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary constraints on generic types",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unnecessary-type-constraint",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unnecessary-type-parameters": {
      "type": "problem",
      "docs": {
        "description": "Disallow type parameters that aren't used multiple times",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-parameters"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unnecessary-type-parameters",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-argument": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a function with a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
      },
      "name": "@typescript-eslint/no-unsafe-argument",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-assignment": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning a value with type `any` to variables and properties",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
      },
      "name": "@typescript-eslint/no-unsafe-assignment",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-call": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-call"
      },
      "name": "@typescript-eslint/no-unsafe-call",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-declaration-merging": {
      "type": "problem",
      "docs": {
        "description": "Disallow unsafe declaration merging",
        "recommended": "recommended",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
      },
      "name": "@typescript-eslint/no-unsafe-declaration-merging",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-enum-comparison": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow comparing an enum value with a non-enum value",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-enum-comparison"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-unsafe-enum-comparison",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-function-type": {
      "type": "problem",
      "docs": {
        "description": "Disallow using the unsafe built-in Function type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unsafe-function-type"
      },
      "name": "@typescript-eslint/no-unsafe-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-member-access": {
      "type": "problem",
      "docs": {
        "description": "Disallow member access on a value with type `any`",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
      },
      "name": "@typescript-eslint/no-unsafe-member-access",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-return": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning a value with type `any` from a function",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-return"
      },
      "name": "@typescript-eslint/no-unsafe-return",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-type-assertion": {
      "type": "problem",
      "docs": {
        "description": "Disallow type assertions that narrow a type",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-type-assertion"
      },
      "name": "@typescript-eslint/no-unsafe-type-assertion",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unsafe-unary-minus": {
      "type": "problem",
      "docs": {
        "description": "Require unary negation to take a number",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-unary-minus"
      },
      "name": "@typescript-eslint/no-unsafe-unary-minus",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-expressions": {
      "type": "suggestion",
      "defaultOptions": [
        {
          "allowShortCircuit": false,
          "allowTaggedTemplates": false,
          "allowTernary": false
        }
      ],
      "docs": {
        "description": "Disallow unused expressions",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-expressions"
      },
      "name": "@typescript-eslint/no-unused-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-unused-vars": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-unused-vars"
      },
      "name": "@typescript-eslint/no-unused-vars",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-use-before-define": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-use-before-define"
      },
      "name": "@typescript-eslint/no-use-before-define",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-constructor": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "extendsBaseRule": true,
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-useless-constructor"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/no-useless-constructor",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-useless-empty-export": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty exports that don't change anything in a module file",
        "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "name": "@typescript-eslint/no-useless-empty-export",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-var-requires": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "8.0.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/no-require-imports",
              "url": "https://typescript-eslint.io/rules/no-require-imports"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/8334"
      },
      "docs": {
        "description": "Disallow `require` statements except in import statements",
        "url": "https://typescript-eslint.io/rules/no-var-requires"
      },
      "replacedBy": [
        "@typescript-eslint/no-require-imports"
      ],
      "name": "@typescript-eslint/no-var-requires",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/no-wrapper-object-types": {
      "type": "problem",
      "docs": {
        "description": "Disallow using confusing built-in primitive class wrappers",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/no-wrapper-object-types"
      },
      "fixable": "code",
      "name": "@typescript-eslint/no-wrapper-object-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/non-nullable-type-assertion-style": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce non-null assertions over explicit type assertions",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
      },
      "fixable": "code",
      "name": "@typescript-eslint/non-nullable-type-assertion-style",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/only-throw-error": {
      "type": "problem",
      "docs": {
        "description": "Disallow throwing non-`Error` values as exceptions",
        "extendsBaseRule": "no-throw-literal",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/only-throw-error"
      },
      "name": "@typescript-eslint/only-throw-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/parameter-properties": {
      "type": "problem",
      "docs": {
        "description": "Require or disallow parameter properties in class constructors",
        "url": "https://typescript-eslint.io/rules/parameter-properties"
      },
      "name": "@typescript-eslint/parameter-properties",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-as-const": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `as const` over literal type",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-as-const"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-as-const",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-destructuring": {
      "type": "suggestion",
      "docs": {
        "description": "Require destructuring from arrays and/or objects",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-destructuring"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-destructuring",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-enum-initializers": {
      "type": "suggestion",
      "docs": {
        "description": "Require each enum member value to be explicitly initialized",
        "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-enum-initializers",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-find": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of Array.prototype.find() over Array.prototype.filter() followed by [0] when looking for a single result",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-find"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-find",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-for-of": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-for-of"
      },
      "name": "@typescript-eslint/prefer-for-of",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-function-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using function types instead of interfaces with call signatures",
        "recommended": "stylistic",
        "url": "https://typescript-eslint.io/rules/prefer-function-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-function-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-includes": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `includes` method over `indexOf` method",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-includes"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-includes",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-literal-enum-member": {
      "type": "suggestion",
      "docs": {
        "description": "Require all enum members to be literal values",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
      },
      "name": "@typescript-eslint/prefer-literal-enum-member",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-namespace-keyword": {
      "type": "suggestion",
      "docs": {
        "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-namespace-keyword",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-nullish-coalescing": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the nullish coalescing operator instead of logical assignments or chaining",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-nullish-coalescing",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-optional-chain": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/prefer-optional-chain",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-promise-reject-errors": {
      "type": "suggestion",
      "docs": {
        "description": "Require using Error objects as Promise rejection reasons",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-promise-reject-errors"
      },
      "name": "@typescript-eslint/prefer-promise-reject-errors",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly": {
      "type": "suggestion",
      "docs": {
        "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-readonly",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-readonly-parameter-types": {
      "type": "suggestion",
      "docs": {
        "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
      },
      "name": "@typescript-eslint/prefer-readonly-parameter-types",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-reduce-type-parameter": {
      "type": "problem",
      "docs": {
        "description": "Enforce using type parameter when calling `Array#reduce` instead of using a type assertion",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-reduce-type-parameter",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-regexp-exec": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-regexp-exec",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-return-this-type": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that `this` is used when only `this` type is returned",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-return-this-type",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-string-starts-ends-with": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
        "recommended": "stylistic",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
      },
      "fixable": "code",
      "name": "@typescript-eslint/prefer-string-starts-ends-with",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/prefer-ts-expect-error": {
      "type": "problem",
      "deprecated": {
        "deprecatedSince": "7.11.0",
        "replacedBy": [
          {
            "rule": {
              "name": "@typescript-eslint/ban-ts-comment",
              "url": "https://typescript-eslint.io/rules/ban-ts-comment"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9081"
      },
      "docs": {
        "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
        "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
      },
      "fixable": "code",
      "replacedBy": [
        "@typescript-eslint/ban-ts-comment"
      ],
      "name": "@typescript-eslint/prefer-ts-expect-error",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/promise-function-async": {
      "type": "suggestion",
      "docs": {
        "description": "Require any function or method that returns a Promise to be marked async",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/promise-function-async"
      },
      "fixable": "code",
      "name": "@typescript-eslint/promise-function-async",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/related-getter-setter-pairs": {
      "type": "problem",
      "docs": {
        "description": "Enforce that `get()` types should be assignable to their equivalent `set()` type",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/related-getter-setter-pairs"
      },
      "name": "@typescript-eslint/related-getter-setter-pairs",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-array-sort-compare": {
      "type": "problem",
      "docs": {
        "description": "Require `Array#sort` and `Array#toSorted` calls to always provide a `compareFunction`",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
      },
      "name": "@typescript-eslint/require-array-sort-compare",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/require-await": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which do not return promises and have no `await` expression",
        "extendsBaseRule": true,
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-await"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/require-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-plus-operands": {
      "type": "problem",
      "docs": {
        "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNullish": false,
              "allowNumberAndString": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
      },
      "name": "@typescript-eslint/restrict-plus-operands",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/restrict-template-expressions": {
      "type": "problem",
      "docs": {
        "description": "Enforce template literal expressions to be of `string` type",
        "recommended": {
          "recommended": true,
          "strict": [
            {
              "allowAny": false,
              "allowBoolean": false,
              "allowNever": false,
              "allowNullish": false,
              "allowNumber": false,
              "allowRegExp": false
            }
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
      },
      "name": "@typescript-eslint/restrict-template-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/return-await": {
      "type": "problem",
      "docs": {
        "description": "Enforce consistent awaiting of returned promises",
        "recommended": {
          "strict": [
            "error-handling-correctness-only"
          ]
        },
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/return-await"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "name": "@typescript-eslint/return-await",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/sort-type-constituents": {
      "type": "suggestion",
      "deprecated": {
        "deprecatedSince": "7.13.0",
        "replacedBy": [
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-intersection-types",
              "url": "https://perfectionist.dev/rules/sort-intersection-types"
            }
          },
          {
            "plugin": {
              "name": "eslint-plugin-perfectionist",
              "url": "https://perfectionist.dev"
            },
            "rule": {
              "name": "perfectionist/sort-union-types",
              "url": "https://perfectionist.dev/rules/sort-union-types"
            }
          }
        ],
        "url": "https://github.com/typescript-eslint/typescript-eslint/pull/9253"
      },
      "docs": {
        "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
        "url": "https://typescript-eslint.io/rules/sort-type-constituents"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "replacedBy": [
        "perfectionist/sort-intersection-types",
        "perfectionist/sort-union-types"
      ],
      "name": "@typescript-eslint/sort-type-constituents",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/strict-boolean-expressions": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types in boolean expressions",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/strict-boolean-expressions",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/switch-exhaustiveness-check": {
      "type": "suggestion",
      "docs": {
        "description": "Require switch-case statements to be exhaustive",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/switch-exhaustiveness-check",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/triple-slash-reference": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
        "recommended": "recommended",
        "url": "https://typescript-eslint.io/rules/triple-slash-reference"
      },
      "name": "@typescript-eslint/triple-slash-reference",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/typedef": {
      "type": "suggestion",
      "docs": {
        "description": "Require type annotations in certain places",
        "url": "https://typescript-eslint.io/rules/typedef"
      },
      "name": "@typescript-eslint/typedef",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unbound-method": {
      "type": "problem",
      "docs": {
        "description": "Enforce unbound methods are called with their expected scope",
        "recommended": "recommended",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/unbound-method"
      },
      "name": "@typescript-eslint/unbound-method",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/unified-signatures": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/unified-signatures"
      },
      "name": "@typescript-eslint/unified-signatures",
      "plugin": "@typescript-eslint"
    },
    "@typescript-eslint/use-unknown-in-catch-callback-variable": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce typing arguments in Promise rejection callbacks as `unknown`",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/use-unknown-in-catch-callback-variable"
      },
      "hasSuggestions": true,
      "name": "@typescript-eslint/use-unknown-in-catch-callback-variable",
      "plugin": "@typescript-eslint"
    },
    "tsdoc/syntax": {
      "type": "problem",
      "docs": {
        "description": "Validates that TypeScript documentation comments conform to the TSDoc standard",
        "category": "Stylistic Issues",
        "recommended": false,
        "url": "https://tsdoc.org/pages/packages/eslint-plugin-tsdoc"
      },
      "name": "tsdoc/syntax",
      "plugin": "tsdoc"
    },
    "@eslint-react/avoid-shorthand-boolean": {
      "type": "problem",
      "docs": {
        "description": "Enforces explicit boolean values for boolean attributes.",
        "url": "https://eslint-react.xyz/docs/rules/avoid-shorthand-boolean"
      },
      "fixable": "code",
      "name": "@eslint-react/avoid-shorthand-boolean",
      "plugin": "@eslint-react"
    },
    "@eslint-react/avoid-shorthand-fragment": {
      "type": "problem",
      "docs": {
        "description": "Enforces explicit `<Fragment>` components instead of the shorthand `<>` or `</>` syntax.",
        "url": "https://eslint-react.xyz/docs/rules/avoid-shorthand-fragment"
      },
      "name": "@eslint-react/avoid-shorthand-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-access-state-in-setstate": {
      "type": "problem",
      "docs": {
        "description": "Disallow accessing `this.state` inside `setState` calls.",
        "url": "https://eslint-react.xyz/docs/rules/no-access-state-in-setstate"
      },
      "name": "@eslint-react/no-access-state-in-setstate",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-array-index-key": {
      "type": "problem",
      "docs": {
        "description": "Disallow an item's index in the array as its key.",
        "url": "https://eslint-react.xyz/docs/rules/no-array-index-key"
      },
      "name": "@eslint-react/no-array-index-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-count": {
      "type": "problem",
      "docs": {
        "description": "Disallow `Children.count`.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-count"
      },
      "name": "@eslint-react/no-children-count",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-for-each": {
      "type": "problem",
      "docs": {
        "description": "Disallow 'Children.forEach'.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-for-each"
      },
      "name": "@eslint-react/no-children-for-each",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-map": {
      "type": "problem",
      "docs": {
        "description": "Disallow `Children.map`.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-map"
      },
      "name": "@eslint-react/no-children-map",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-only": {
      "type": "problem",
      "docs": {
        "description": "Disallow `Children.only`.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-only"
      },
      "name": "@eslint-react/no-children-only",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-prop": {
      "type": "problem",
      "docs": {
        "description": "Disallow passing `children` as a prop.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-prop"
      },
      "name": "@eslint-react/no-children-prop",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-children-to-array": {
      "type": "problem",
      "docs": {
        "description": "Disallow `Children.toArray`.",
        "url": "https://eslint-react.xyz/docs/rules/no-children-to-array"
      },
      "name": "@eslint-react/no-children-to-array",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-class-component": {
      "type": "problem",
      "docs": {
        "description": "Disallow class components except for error boundaries.",
        "url": "https://eslint-react.xyz/docs/rules/no-class-component"
      },
      "name": "@eslint-react/no-class-component",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-clone-element": {
      "type": "problem",
      "docs": {
        "description": "Disallow `cloneElement`.",
        "url": "https://eslint-react.xyz/docs/rules/no-clone-element"
      },
      "name": "@eslint-react/no-clone-element",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-comment-textnodes": {
      "type": "problem",
      "docs": {
        "description": "Prevents comments from being inserted as text nodes.",
        "url": "https://eslint-react.xyz/docs/rules/no-comment-textnodes"
      },
      "name": "@eslint-react/no-comment-textnodes",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-complex-conditional-rendering": {
      "type": "problem",
      "docs": {
        "description": "Disallow complex conditional rendering in JSX expressions.",
        "url": "https://eslint-react.xyz/docs/rules/no-complex-conditional-rendering"
      },
      "name": "@eslint-react/no-complex-conditional-rendering",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-mount": {
      "type": "problem",
      "docs": {
        "description": "Replace usages of `componentWillMount` with `UNSAFE_componentWillMount`.",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-mount"
      },
      "fixable": "code",
      "name": "@eslint-react/no-component-will-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-receive-props": {
      "type": "problem",
      "docs": {
        "description": "Replace usages of `componentWillReceiveProps` with `UNSAFE_componentWillReceiveProps`.",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-receive-props"
      },
      "fixable": "code",
      "name": "@eslint-react/no-component-will-receive-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "Replace usages of `componentWillUpdate` with `UNSAFE_componentWillUpdate`.",
        "url": "https://eslint-react.xyz/docs/rules/no-component-will-update"
      },
      "fixable": "code",
      "name": "@eslint-react/no-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-context-provider": {
      "type": "problem",
      "docs": {
        "description": "Replace usages of `<Context.Provider>` with `<Context>`.",
        "url": "https://eslint-react.xyz/docs/rules/no-context-provider"
      },
      "fixable": "code",
      "name": "@eslint-react/no-context-provider",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-create-ref": {
      "type": "problem",
      "docs": {
        "description": "Disallow `createRef` in function components.",
        "url": "https://eslint-react.xyz/docs/rules/no-create-ref"
      },
      "name": "@eslint-react/no-create-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-default-props": {
      "type": "problem",
      "docs": {
        "description": "Disallow `defaultProps` property in favor of ES6 default parameters.",
        "url": "https://eslint-react.xyz/docs/rules/no-default-props"
      },
      "name": "@eslint-react/no-default-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-direct-mutation-state": {
      "type": "problem",
      "docs": {
        "description": "Disallow direct mutation of `this.state`.",
        "url": "https://eslint-react.xyz/docs/rules/no-direct-mutation-state"
      },
      "name": "@eslint-react/no-direct-mutation-state",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-duplicate-key": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate `key` on elements in the same array or a list of `children`.",
        "url": "https://eslint-react.xyz/docs/rules/no-duplicate-key"
      },
      "name": "@eslint-react/no-duplicate-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-forward-ref": {
      "type": "problem",
      "docs": {
        "description": "Replaces usages of `forwardRef` with passing `ref` as a prop.",
        "url": "https://eslint-react.xyz/docs/rules/no-forward-ref"
      },
      "fixable": "code",
      "name": "@eslint-react/no-forward-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-implicit-key": {
      "type": "problem",
      "docs": {
        "description": "Prevents `key` from not being explicitly specified (e.g. spreading `key` from objects).",
        "url": "https://eslint-react.xyz/docs/rules/no-implicit-key"
      },
      "name": "@eslint-react/no-implicit-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-leaked-conditional-rendering": {
      "type": "problem",
      "docs": {
        "description": "Prevents problematic leaked values from being rendered.",
        "url": "https://eslint-react.xyz/docs/rules/no-leaked-conditional-rendering"
      },
      "name": "@eslint-react/no-leaked-conditional-rendering",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-missing-component-display-name": {
      "type": "problem",
      "docs": {
        "description": "Enforces that all components have a `displayName` which can be used in devtools.",
        "url": "https://eslint-react.xyz/docs/rules/no-missing-component-display-name"
      },
      "name": "@eslint-react/no-missing-component-display-name",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-missing-context-display-name": {
      "type": "problem",
      "docs": {
        "description": "Enforces that all contexts have a `displayName` which can be used in devtools.",
        "url": "https://eslint-react.xyz/docs/rules/no-missing-context-display-name"
      },
      "name": "@eslint-react/no-missing-context-display-name",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-missing-key": {
      "type": "problem",
      "docs": {
        "description": "Disallow missing `key` on items in list rendering.",
        "url": "https://eslint-react.xyz/docs/rules/no-missing-key"
      },
      "name": "@eslint-react/no-missing-key",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-misused-capture-owner-stack": {
      "type": "problem",
      "docs": {
        "description": "Prevents incorrect usage of `captureOwnerStack`.",
        "url": "https://eslint-react.xyz/docs/rules/no-misused-capture-owner-stack"
      },
      "fixable": "code",
      "name": "@eslint-react/no-misused-capture-owner-stack",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-nested-component-definitions": {
      "type": "problem",
      "docs": {
        "description": "Disallow nesting component definitions inside other components.",
        "url": "https://eslint-react.xyz/docs/rules/no-nested-component-definitions"
      },
      "name": "@eslint-react/no-nested-component-definitions",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-nested-lazy-component-declarations": {
      "type": "problem",
      "docs": {
        "description": "Disallow nesting lazy component declarations inside other components.",
        "url": "https://eslint-react.xyz/docs/rules/no-nested-component-definitions"
      },
      "name": "@eslint-react/no-nested-lazy-component-declarations",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-prop-types": {
      "type": "problem",
      "docs": {
        "description": "Disallow `propTypes` in favor of TypeScript or another type-checking solution.",
        "url": "https://eslint-react.xyz/docs/rules/no-prop-types"
      },
      "name": "@eslint-react/no-prop-types",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-redundant-should-component-update": {
      "type": "problem",
      "docs": {
        "description": "Disallow `shouldComponentUpdate` when extending `React.PureComponent`.",
        "url": "https://eslint-react.xyz/docs/rules/no-redundant-should-component-update"
      },
      "name": "@eslint-react/no-redundant-should-component-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-did-mount": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling `this.setState` in `componentDidMount` outside of functions, such as callbacks.",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-did-mount"
      },
      "name": "@eslint-react/no-set-state-in-component-did-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-did-update": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling `this.setState` in `componentDidUpdate` outside of functions, such as callbacks.",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-did-update"
      },
      "name": "@eslint-react/no-set-state-in-component-did-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-set-state-in-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "Disallows calling `this.setState` in `componentWillUpdate` outside of functions, such as callbacks.",
        "url": "https://eslint-react.xyz/docs/rules/no-set-state-in-component-will-update"
      },
      "name": "@eslint-react/no-set-state-in-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-string-refs": {
      "type": "problem",
      "docs": {
        "description": "Replaces string refs with callback refs.",
        "url": "https://eslint-react.xyz/docs/rules/no-string-refs"
      },
      "fixable": "code",
      "name": "@eslint-react/no-string-refs",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-mount": {
      "type": "problem",
      "docs": {
        "description": "Warns the usage of `UNSAFE_componentWillMount` in class components.",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-mount"
      },
      "name": "@eslint-react/no-unsafe-component-will-mount",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-receive-props": {
      "type": "problem",
      "docs": {
        "description": "Warns the usage of `UNSAFE_componentWillReceiveProps` in class components.",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-receive-props"
      },
      "name": "@eslint-react/no-unsafe-component-will-receive-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unsafe-component-will-update": {
      "type": "problem",
      "docs": {
        "description": "Warns the usage of `UNSAFE_componentWillUpdate` in class components.",
        "url": "https://eslint-react.xyz/docs/rules/no-unsafe-component-will-update"
      },
      "name": "@eslint-react/no-unsafe-component-will-update",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unstable-context-value": {
      "type": "problem",
      "docs": {
        "description": "Prevents non-stable values (i.e. object literals) from being used as a value for `Context.Provider`.",
        "url": "https://eslint-react.xyz/docs/rules/no-unstable-context-value"
      },
      "name": "@eslint-react/no-unstable-context-value",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unstable-default-props": {
      "type": "problem",
      "docs": {
        "description": "Prevents using referential-type values as default props in object destructuring.",
        "url": "https://eslint-react.xyz/docs/rules/no-unstable-default-props"
      },
      "name": "@eslint-react/no-unstable-default-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unused-class-component-members": {
      "type": "problem",
      "docs": {
        "description": "Warns unused class component methods and properties.",
        "url": "https://eslint-react.xyz/docs/rules/no-unused-class-component-members"
      },
      "name": "@eslint-react/no-unused-class-component-members",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-unused-state": {
      "type": "problem",
      "docs": {
        "description": "Warns unused class component state.",
        "url": "https://eslint-react.xyz/docs/rules/no-unused-state"
      },
      "name": "@eslint-react/no-unused-state",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-use-context": {
      "type": "problem",
      "docs": {
        "description": "Replaces usages of `useContext` with `use`.",
        "url": "https://eslint-react.xyz/docs/rules/no-use-context"
      },
      "fixable": "code",
      "name": "@eslint-react/no-use-context",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-useless-forward-ref": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless `forwardRef` calls on components that don't use `ref`s.",
        "url": "https://eslint-react.xyz/docs/rules/no-useless-forward-ref"
      },
      "name": "@eslint-react/no-useless-forward-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-useless-fragment": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowExpressions": true
        }
      ],
      "docs": {
        "description": "Disallow useless fragment elements.",
        "url": "https://eslint-react.xyz/docs/rules/no-useless-fragment"
      },
      "fixable": "code",
      "name": "@eslint-react/no-useless-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-destructuring-assignment": {
      "type": "problem",
      "docs": {
        "description": "Enforces destructuring assignment for component props and context.",
        "url": "https://eslint-react.xyz/docs/rules/prefer-destructuring-assignment"
      },
      "name": "@eslint-react/prefer-destructuring-assignment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-react-namespace-import": {
      "type": "problem",
      "docs": {
        "description": "Enforces React is imported via a namespace import.",
        "url": "https://eslint-react.xyz/docs/rules/prefer-react-namespace-import"
      },
      "fixable": "code",
      "name": "@eslint-react/prefer-react-namespace-import",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-read-only-props": {
      "type": "problem",
      "docs": {
        "description": "Enforces read-only props in components.",
        "url": "https://eslint-react.xyz/docs/rules/prefer-read-only-props"
      },
      "name": "@eslint-react/prefer-read-only-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-shorthand-boolean": {
      "type": "problem",
      "docs": {
        "description": "Enforces shorthand syntax for boolean attributes.",
        "url": "https://eslint-react.xyz/docs/rules/prefer-shorthand-boolean"
      },
      "fixable": "code",
      "name": "@eslint-react/prefer-shorthand-boolean",
      "plugin": "@eslint-react"
    },
    "@eslint-react/prefer-shorthand-fragment": {
      "type": "problem",
      "docs": {
        "description": "Enforces shorthand syntax for fragments.",
        "url": "https://eslint-react.xyz/docs/rules/prefer-shorthand-fragment"
      },
      "fixable": "code",
      "name": "@eslint-react/prefer-shorthand-fragment",
      "plugin": "@eslint-react"
    },
    "@eslint-react/jsx-no-duplicate-props": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate props in JSX elements.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-no-duplicate-props"
      },
      "name": "@eslint-react/jsx-no-duplicate-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/jsx-no-undef": {
      "type": "problem",
      "docs": {
        "description": "Disallow undefined variables in JSX.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-no-undef"
      },
      "name": "@eslint-react/jsx-no-undef",
      "plugin": "@eslint-react"
    },
    "@eslint-react/jsx-uses-react": {
      "type": "problem",
      "docs": {
        "description": "Marks React variables as used when JSX is used.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-uses-react"
      },
      "name": "@eslint-react/jsx-uses-react",
      "plugin": "@eslint-react"
    },
    "@eslint-react/jsx-uses-vars": {
      "type": "problem",
      "docs": {
        "description": "Marks variables used in JSX elements as used.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-uses-vars"
      },
      "name": "@eslint-react/jsx-uses-vars",
      "plugin": "@eslint-react"
    },
    "@eslint-react/ensure-forward-ref-using-ref": {
      "type": "problem",
      "docs": {
        "description": "Disallow useless `forwardRef` calls on components that don't use `ref`s.",
        "url": "https://eslint-react.xyz/docs/rules/no-useless-forward-ref"
      },
      "name": "@eslint-react/ensure-forward-ref-using-ref",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-complicated-conditional-rendering": {
      "type": "problem",
      "docs": {
        "description": "Disallow complex conditional rendering in JSX expressions.",
        "url": "https://eslint-react.xyz/docs/rules/no-complex-conditional-rendering"
      },
      "name": "@eslint-react/no-complicated-conditional-rendering",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-duplicate-jsx-props": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate props in JSX elements.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-no-duplicate-props"
      },
      "name": "@eslint-react/no-duplicate-jsx-props",
      "plugin": "@eslint-react"
    },
    "@eslint-react/no-nested-components": {
      "type": "problem",
      "docs": {
        "description": "Disallow nesting component definitions inside other components.",
        "url": "https://eslint-react.xyz/docs/rules/no-nested-component-definitions"
      },
      "name": "@eslint-react/no-nested-components",
      "plugin": "@eslint-react"
    },
    "@eslint-react/use-jsx-vars": {
      "type": "problem",
      "docs": {
        "description": "Marks variables used in JSX elements as used.",
        "url": "https://eslint-react.xyz/docs/rules/jsx-uses-vars"
      },
      "name": "@eslint-react/use-jsx-vars",
      "plugin": "@eslint-react"
    },
    "@eslint-react/dom/no-dangerously-set-innerhtml": {
      "type": "problem",
      "docs": {
        "description": "Disallow `dangerouslySetInnerHTML`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-dangerously-set-innerhtml"
      },
      "name": "@eslint-react/dom/no-dangerously-set-innerhtml",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-dangerously-set-innerhtml-with-children": {
      "type": "problem",
      "docs": {
        "description": "Disallow `dangerouslySetInnerHTML` and `children` at the same time.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-dangerously-set-innerhtml-with-children"
      },
      "name": "@eslint-react/dom/no-dangerously-set-innerhtml-with-children",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-find-dom-node": {
      "type": "problem",
      "docs": {
        "description": "Disallow `findDOMNode`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-find-dom-node"
      },
      "name": "@eslint-react/dom/no-find-dom-node",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-flush-sync": {
      "type": "problem",
      "docs": {
        "description": "Disallow `flushSync`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-flush-sync"
      },
      "name": "@eslint-react/dom/no-flush-sync",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-hydrate": {
      "type": "problem",
      "docs": {
        "description": "Replaces usages of `ReactDom.hydrate()` with `hydrateRoot()`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-hydrate"
      },
      "fixable": "code",
      "name": "@eslint-react/dom/no-hydrate",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-missing-button-type": {
      "type": "problem",
      "docs": {
        "description": "Enforces explicit `type` attribute for `button` elements.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-missing-button-type"
      },
      "name": "@eslint-react/dom/no-missing-button-type",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-missing-iframe-sandbox": {
      "type": "problem",
      "docs": {
        "description": "Enforces explicit `sandbox` attribute for `iframe` elements.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-missing-iframe-sandbox"
      },
      "name": "@eslint-react/dom/no-missing-iframe-sandbox",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-namespace": {
      "type": "problem",
      "docs": {
        "description": "Enforces the absence of a `namespace` in React elements.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-namespace"
      },
      "name": "@eslint-react/dom/no-namespace",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-render": {
      "type": "problem",
      "docs": {
        "description": "Replaces usages of `ReactDom.render()` with `createRoot(node).render()`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-render"
      },
      "fixable": "code",
      "name": "@eslint-react/dom/no-render",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-render-return-value": {
      "type": "problem",
      "docs": {
        "description": "Disallow the return value of `ReactDOM.render`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-render-return-value"
      },
      "name": "@eslint-react/dom/no-render-return-value",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-script-url": {
      "type": "problem",
      "docs": {
        "description": "Disallow `javascript:` URLs as attribute values.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-script-url"
      },
      "name": "@eslint-react/dom/no-script-url",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-unknown-property": {
      "type": "problem",
      "docs": {
        "description": "Disallow unknown `DOM` property.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-unknown-property"
      },
      "fixable": "code",
      "name": "@eslint-react/dom/no-unknown-property",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-unsafe-iframe-sandbox": {
      "type": "problem",
      "docs": {
        "description": "Enforces `sandbox` attribute for `iframe` elements is not set to unsafe combinations.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-unsafe-iframe-sandbox"
      },
      "name": "@eslint-react/dom/no-unsafe-iframe-sandbox",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-unsafe-target-blank": {
      "type": "problem",
      "docs": {
        "description": "Disallow `target=\"_blank\"` without `rel=\"noreferrer noopener\"`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-unsafe-target-blank"
      },
      "name": "@eslint-react/dom/no-unsafe-target-blank",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-use-form-state": {
      "type": "problem",
      "docs": {
        "description": "Replaces usages of `useFormState` with `useActionState`.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-use-form-state"
      },
      "fixable": "code",
      "name": "@eslint-react/dom/no-use-form-state",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-void-elements-with-children": {
      "type": "problem",
      "docs": {
        "description": "Disallow `children` in void DOM elements.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-void-elements-with-children"
      },
      "name": "@eslint-react/dom/no-void-elements-with-children",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/dom/no-children-in-void-dom-elements": {
      "type": "problem",
      "docs": {
        "description": "Disallow `children` in void DOM elements.",
        "url": "https://eslint-react.xyz/docs/rules/dom-no-void-elements-with-children"
      },
      "name": "@eslint-react/dom/no-children-in-void-dom-elements",
      "plugin": "@eslint-react/dom"
    },
    "@eslint-react/web-api/no-leaked-event-listener": {
      "type": "problem",
      "docs": {
        "description": "Prevents leaked `addEventListener` in a component or custom Hook.",
        "url": "https://eslint-react.xyz/docs/rules/web-api-no-leaked-event-listener"
      },
      "name": "@eslint-react/web-api/no-leaked-event-listener",
      "plugin": "@eslint-react/web-api"
    },
    "@eslint-react/web-api/no-leaked-interval": {
      "type": "problem",
      "docs": {
        "description": "Prevents leaked `setInterval` in a component or custom Hook.",
        "url": "https://eslint-react.xyz/docs/rules/web-api-no-leaked-interval"
      },
      "name": "@eslint-react/web-api/no-leaked-interval",
      "plugin": "@eslint-react/web-api"
    },
    "@eslint-react/web-api/no-leaked-resize-observer": {
      "type": "problem",
      "docs": {
        "description": "Prevents leaked `ResizeObserver` in a component or custom Hook.",
        "url": "https://eslint-react.xyz/docs/rules/web-api-no-leaked-resize-observer"
      },
      "name": "@eslint-react/web-api/no-leaked-resize-observer",
      "plugin": "@eslint-react/web-api"
    },
    "@eslint-react/web-api/no-leaked-timeout": {
      "type": "problem",
      "docs": {
        "description": "Prevents leaked `setTimeout` in a component or custom Hook.",
        "url": "https://eslint-react.xyz/docs/rules/web-api-no-leaked-timeout"
      },
      "name": "@eslint-react/web-api/no-leaked-timeout",
      "plugin": "@eslint-react/web-api"
    },
    "@eslint-react/debug/class-component": {
      "type": "problem",
      "docs": {
        "description": "Reports all class components.",
        "url": "https://eslint-react.xyz/docs/rules/debug-class-component"
      },
      "name": "@eslint-react/debug/class-component",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/debug/function-component": {
      "type": "problem",
      "docs": {
        "description": "Reports all function components.",
        "url": "https://eslint-react.xyz/docs/rules/debug-function-component"
      },
      "name": "@eslint-react/debug/function-component",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/debug/hook": {
      "type": "problem",
      "docs": {
        "description": "Reports all React Hooks.",
        "url": "https://eslint-react.xyz/docs/rules/debug-hook"
      },
      "name": "@eslint-react/debug/hook",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/debug/is-from-react": {
      "type": "problem",
      "docs": {
        "description": "Reports all identifiers that are initialized from React.",
        "url": "https://eslint-react.xyz/docs/rules/debug-is-from-react"
      },
      "name": "@eslint-react/debug/is-from-react",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/debug/jsx": {
      "type": "problem",
      "docs": {
        "description": "Reports all JSX elements and fragments.",
        "url": "https://eslint-react.xyz/docs/rules/debug-jsx"
      },
      "name": "@eslint-react/debug/jsx",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/debug/react-hooks": {
      "type": "problem",
      "docs": {
        "description": "Reports all React Hooks.",
        "url": "https://eslint-react.xyz/docs/rules/debug-hook"
      },
      "name": "@eslint-react/debug/react-hooks",
      "plugin": "@eslint-react/debug"
    },
    "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect": {
      "type": "problem",
      "docs": {
        "description": "Disallow direct calls to the `set` function of `useState` in `useEffect`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-direct-set-state-in-use-effect"
      },
      "name": "@eslint-react/hooks-extra/no-direct-set-state-in-use-effect",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-direct-set-state-in-use-layout-effect": {
      "type": "problem",
      "docs": {
        "description": "Disallow direct calls to the `set` function of `useState` in `useLayoutEffect`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-direct-set-state-in-use-layout-effect"
      },
      "name": "@eslint-react/hooks-extra/no-direct-set-state-in-use-layout-effect",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-unnecessary-use-callback": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary usage of `useCallback`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-callback"
      },
      "name": "@eslint-react/hooks-extra/no-unnecessary-use-callback",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-unnecessary-use-memo": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary usage of `useMemo`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-memo"
      },
      "name": "@eslint-react/hooks-extra/no-unnecessary-use-memo",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-unnecessary-use-prefix": {
      "type": "problem",
      "docs": {
        "description": "Enforces that a function with the `use` prefix should use at least one Hook inside of it.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-prefix"
      },
      "name": "@eslint-react/hooks-extra/no-unnecessary-use-prefix",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization": {
      "type": "problem",
      "docs": {
        "description": "Enforces function calls made inside `useState` to be wrapped in an `initializer function`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-prefer-use-state-lazy-initialization"
      },
      "name": "@eslint-react/hooks-extra/prefer-use-state-lazy-initialization",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks": {
      "type": "problem",
      "docs": {
        "description": "Enforces that a function with the `use` prefix should use at least one Hook inside of it.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-prefix"
      },
      "name": "@eslint-react/hooks-extra/ensure-custom-hooks-using-other-hooks",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/ensure-use-callback-has-non-empty-deps": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary usage of `useCallback`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-callback"
      },
      "name": "@eslint-react/hooks-extra/ensure-use-callback-has-non-empty-deps",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/ensure-use-memo-has-non-empty-deps": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary usage of `useMemo`.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-memo"
      },
      "name": "@eslint-react/hooks-extra/ensure-use-memo-has-non-empty-deps",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-redundant-custom-hook": {
      "type": "problem",
      "docs": {
        "description": "Enforces that a function with the `use` prefix should use at least one Hook inside of it.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-prefix"
      },
      "name": "@eslint-react/hooks-extra/no-redundant-custom-hook",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/hooks-extra/no-useless-custom-hooks": {
      "type": "problem",
      "docs": {
        "description": "Enforces that a function with the `use` prefix should use at least one Hook inside of it.",
        "url": "https://eslint-react.xyz/docs/rules/hooks-extra-no-unnecessary-use-prefix"
      },
      "name": "@eslint-react/hooks-extra/no-useless-custom-hooks",
      "plugin": "@eslint-react/hooks-extra"
    },
    "@eslint-react/naming-convention/component-name": {
      "type": "problem",
      "defaultOptions": [
        {
          "allowAllCaps": false,
          "excepts": [],
          "rule": "PascalCase"
        }
      ],
      "docs": {
        "description": "Enforces naming conventions for components.",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-component-name"
      },
      "name": "@eslint-react/naming-convention/component-name",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/context-name": {
      "type": "problem",
      "docs": {
        "description": "Enforces context name to be a valid component name with the suffix `Context`.",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-context-name"
      },
      "name": "@eslint-react/naming-convention/context-name",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/filename": {
      "type": "problem",
      "defaultOptions": [
        {
          "excepts": [
            "^index$"
          ],
          "extensions": [
            ".js",
            ".jsx",
            ".ts",
            ".tsx"
          ],
          "rule": "PascalCase"
        }
      ],
      "docs": {
        "description": "Enforces consistent file naming conventions.",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-filename"
      },
      "name": "@eslint-react/naming-convention/filename",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/filename-extension": {
      "type": "problem",
      "defaultOptions": [
        {
          "allow": "as-needed",
          "extensions": [
            ".jsx",
            ".tsx"
          ],
          "ignoreFilesWithoutCode": false
        }
      ],
      "docs": {
        "description": "Enforces consistent file naming conventions.",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-filename-extension"
      },
      "name": "@eslint-react/naming-convention/filename-extension",
      "plugin": "@eslint-react/naming-convention"
    },
    "@eslint-react/naming-convention/use-state": {
      "type": "problem",
      "docs": {
        "description": "Enforces destructuring and symmetric naming of `useState` hook value and setter.",
        "url": "https://eslint-react.xyz/docs/rules/naming-convention-use-state"
      },
      "name": "@eslint-react/naming-convention/use-state",
      "plugin": "@eslint-react/naming-convention"
    },
    "jsdoc/check-access": {
      "docs": {
        "description": "Checks that `@access` tags have a valid value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-access.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/check-access",
      "plugin": "jsdoc"
    },
    "jsdoc/check-alignment": {
      "docs": {
        "description": "Reports invalid alignment of JSDoc block asterisks.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-alignment.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "layout",
      "name": "jsdoc/check-alignment",
      "plugin": "jsdoc"
    },
    "jsdoc/check-examples": {
      "docs": {
        "description": "Ensures that (JavaScript) examples within JSDoc adhere to ESLint rules.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-examples.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/check-examples",
      "plugin": "jsdoc"
    },
    "jsdoc/check-indentation": {
      "docs": {
        "description": "Reports invalid padding inside JSDoc blocks.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-indentation.md#repos-sticky-header"
      },
      "type": "layout",
      "name": "jsdoc/check-indentation",
      "plugin": "jsdoc"
    },
    "jsdoc/check-line-alignment": {
      "docs": {
        "description": "Reports invalid alignment of JSDoc block lines.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-line-alignment.md#repos-sticky-header"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "jsdoc/check-line-alignment",
      "plugin": "jsdoc"
    },
    "jsdoc/check-param-names": {
      "docs": {
        "description": "Ensures that parameter names in JSDoc match those in the function declaration.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-param-names.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/check-param-names",
      "plugin": "jsdoc"
    },
    "jsdoc/check-property-names": {
      "docs": {
        "description": "Ensures that property names in JSDoc are not duplicated on the same block and that nested properties have defined roots.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-property-names.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/check-property-names",
      "plugin": "jsdoc"
    },
    "jsdoc/check-syntax": {
      "docs": {
        "description": "Reports against syntax not valid for the mode (e.g., Google Closure Compiler in non-Closure mode).",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-syntax.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/check-syntax",
      "plugin": "jsdoc"
    },
    "jsdoc/check-tag-names": {
      "docs": {
        "description": "Reports invalid block tag names.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-tag-names.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/check-tag-names",
      "plugin": "jsdoc"
    },
    "jsdoc/check-template-names": {
      "docs": {
        "description": "Checks that any `@template` names are actually used in the connected `@typedef` or type alias.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-template-names.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/check-template-names",
      "plugin": "jsdoc"
    },
    "jsdoc/check-types": {
      "docs": {
        "description": "Reports invalid types.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-types.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/check-types",
      "plugin": "jsdoc"
    },
    "jsdoc/check-values": {
      "docs": {
        "description": "This rule checks the values for a handful of tags: `@version`, `@since`, `@license` and `@author`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/check-values.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/check-values",
      "plugin": "jsdoc"
    },
    "jsdoc/convert-to-jsdoc-comments": {
      "fixable": "code",
      "docs": {
        "description": "Converts non-JSDoc comments preceding or following nodes into JSDoc ones",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/convert-to-jsdoc-comments.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/convert-to-jsdoc-comments",
      "plugin": "jsdoc"
    },
    "jsdoc/empty-tags": {
      "docs": {
        "description": "Expects specific tags to be empty of any content.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/empty-tags.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/empty-tags",
      "plugin": "jsdoc"
    },
    "jsdoc/implements-on-classes": {
      "docs": {
        "description": "Reports an issue with any non-constructor function using `@implements`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/implements-on-classes.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/implements-on-classes",
      "plugin": "jsdoc"
    },
    "jsdoc/imports-as-dependencies": {
      "docs": {
        "description": "Reports if JSDoc `import()` statements point to a package which is not listed in `dependencies` or `devDependencies`",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/imports-as-dependencies.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/imports-as-dependencies",
      "plugin": "jsdoc"
    },
    "jsdoc/informative-docs": {
      "docs": {
        "description": "This rule reports doc comments that only restate their attached name.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/informative-docs.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/informative-docs",
      "plugin": "jsdoc"
    },
    "jsdoc/lines-before-block": {
      "fixable": "code",
      "docs": {
        "description": "Enforces minimum number of newlines before JSDoc comment blocks",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/lines-before-block.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/lines-before-block",
      "plugin": "jsdoc"
    },
    "jsdoc/match-description": {
      "docs": {
        "description": "Enforces a regular expression pattern on descriptions.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/match-description.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/match-description",
      "plugin": "jsdoc"
    },
    "jsdoc/match-name": {
      "docs": {
        "description": "Reports the name portion of a JSDoc tag if matching or not matching a given regular expression.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/match-name.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/match-name",
      "plugin": "jsdoc"
    },
    "jsdoc/multiline-blocks": {
      "docs": {
        "description": "Controls how and whether jsdoc blocks can be expressed as single or multiple line blocks.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/multiline-blocks.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/multiline-blocks",
      "plugin": "jsdoc"
    },
    "jsdoc/no-bad-blocks": {
      "docs": {
        "description": "This rule checks for multi-line-style comments which fail to meet the criteria of a jsdoc block.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-bad-blocks.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "layout",
      "name": "jsdoc/no-bad-blocks",
      "plugin": "jsdoc"
    },
    "jsdoc/no-blank-block-descriptions": {
      "docs": {
        "description": "Detects and removes extra lines of a blank block description",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-blank-block-descriptions.md#repos-sticky-header"
      },
      "fixable": "whitespace",
      "type": "layout",
      "name": "jsdoc/no-blank-block-descriptions",
      "plugin": "jsdoc"
    },
    "jsdoc/no-blank-blocks": {
      "docs": {
        "description": "Removes empty blocks with nothing but possibly line breaks",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-blank-blocks.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-blank-blocks",
      "plugin": "jsdoc"
    },
    "jsdoc/no-defaults": {
      "docs": {
        "description": "This rule reports defaults being used on the relevant portion of `@param` or `@default`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-defaults.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-defaults",
      "plugin": "jsdoc"
    },
    "jsdoc/no-missing-syntax": {
      "docs": {
        "description": "Reports when certain comment structures are always expected.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-missing-syntax.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-missing-syntax",
      "plugin": "jsdoc"
    },
    "jsdoc/no-multi-asterisks": {
      "docs": {
        "description": "Prevents use of multiple asterisks at the beginning of lines.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-multi-asterisks.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-multi-asterisks",
      "plugin": "jsdoc"
    },
    "jsdoc/no-restricted-syntax": {
      "docs": {
        "description": "Reports when certain comment structures are present.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-restricted-syntax.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-restricted-syntax",
      "plugin": "jsdoc"
    },
    "jsdoc/no-types": {
      "docs": {
        "description": "This rule reports types being used on `@param` or `@returns`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-types.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/no-types",
      "plugin": "jsdoc"
    },
    "jsdoc/no-undefined-types": {
      "docs": {
        "description": "Checks that types in jsdoc comments are defined.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/no-undefined-types.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/no-undefined-types",
      "plugin": "jsdoc"
    },
    "jsdoc/require-asterisk-prefix": {
      "docs": {
        "description": "Requires that each JSDoc line starts with an `*`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-asterisk-prefix.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "layout",
      "name": "jsdoc/require-asterisk-prefix",
      "plugin": "jsdoc"
    },
    "jsdoc/require-description": {
      "docs": {
        "description": "Requires that all functions have a description.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-description.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-description",
      "plugin": "jsdoc"
    },
    "jsdoc/require-description-complete-sentence": {
      "docs": {
        "description": "Requires that block description, explicit `@description`, and `@param`/`@returns` tag descriptions are written in complete sentences.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-description-complete-sentence.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-description-complete-sentence",
      "plugin": "jsdoc"
    },
    "jsdoc/require-example": {
      "docs": {
        "description": "Requires that all functions have examples.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-example.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-example",
      "plugin": "jsdoc"
    },
    "jsdoc/require-file-overview": {
      "docs": {
        "description": "Checks that all files have one `@file`, `@fileoverview`, or `@overview` tag at the beginning of the file.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-file-overview.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-file-overview",
      "plugin": "jsdoc"
    },
    "jsdoc/require-hyphen-before-param-description": {
      "docs": {
        "description": "Requires a hyphen before the `@param` description.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-hyphen-before-param-description.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "layout",
      "name": "jsdoc/require-hyphen-before-param-description",
      "plugin": "jsdoc"
    },
    "jsdoc/require-jsdoc": {
      "docs": {
        "category": "Stylistic Issues",
        "description": "Require JSDoc comments",
        "recommended": true,
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-jsdoc.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-jsdoc",
      "plugin": "jsdoc"
    },
    "jsdoc/require-param": {
      "docs": {
        "description": "Requires that all function parameters are documented.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-param",
      "plugin": "jsdoc"
    },
    "jsdoc/require-param-description": {
      "docs": {
        "description": "Requires that each `@param` tag has a `description` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-description.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-param-description",
      "plugin": "jsdoc"
    },
    "jsdoc/require-param-name": {
      "docs": {
        "description": "Requires that all function parameters have names.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-name.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-param-name",
      "plugin": "jsdoc"
    },
    "jsdoc/require-param-type": {
      "docs": {
        "description": "Requires that each `@param` tag has a `type` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-param-type.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-param-type",
      "plugin": "jsdoc"
    },
    "jsdoc/require-property": {
      "docs": {
        "description": "Requires that all `@typedef` and `@namespace` tags have `@property` when their type is a plain `object`, `Object`, or `PlainObject`.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-property",
      "plugin": "jsdoc"
    },
    "jsdoc/require-property-description": {
      "docs": {
        "description": "Requires that each `@property` tag has a `description` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-description.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-property-description",
      "plugin": "jsdoc"
    },
    "jsdoc/require-property-name": {
      "docs": {
        "description": "Requires that all function `@property` tags have names.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-name.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-property-name",
      "plugin": "jsdoc"
    },
    "jsdoc/require-property-type": {
      "docs": {
        "description": "Requires that each `@property` tag has a `type` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-property-type.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-property-type",
      "plugin": "jsdoc"
    },
    "jsdoc/require-returns": {
      "docs": {
        "description": "Requires that returns are documented.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/require-returns",
      "plugin": "jsdoc"
    },
    "jsdoc/require-returns-check": {
      "docs": {
        "description": "Requires a return statement in function body if a `@returns` tag is specified in jsdoc comment.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-check.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-returns-check",
      "plugin": "jsdoc"
    },
    "jsdoc/require-returns-description": {
      "docs": {
        "description": "Requires that the `@returns` tag has a `description` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-description.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-returns-description",
      "plugin": "jsdoc"
    },
    "jsdoc/require-returns-type": {
      "docs": {
        "description": "Requires that `@returns` tag has `type` value.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-returns-type.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-returns-type",
      "plugin": "jsdoc"
    },
    "jsdoc/require-template": {
      "docs": {
        "description": "Requires template tags for each generic type parameter",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-template.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-template",
      "plugin": "jsdoc"
    },
    "jsdoc/require-throws": {
      "docs": {
        "description": "Requires that throw statements are documented.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-throws.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-throws",
      "plugin": "jsdoc"
    },
    "jsdoc/require-yields": {
      "docs": {
        "description": "Requires yields are documented.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-yields.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-yields",
      "plugin": "jsdoc"
    },
    "jsdoc/require-yields-check": {
      "docs": {
        "description": "Requires a yield statement in function body if a `@yields` tag is specified in jsdoc comment.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/require-yields-check.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/require-yields-check",
      "plugin": "jsdoc"
    },
    "jsdoc/sort-tags": {
      "docs": {
        "description": "Sorts tags by a specified sequence according to tag name.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/sort-tags.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/sort-tags",
      "plugin": "jsdoc"
    },
    "jsdoc/tag-lines": {
      "docs": {
        "description": "Enforces lines (or no lines) between tags.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/tag-lines.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/tag-lines",
      "plugin": "jsdoc"
    },
    "jsdoc/text-escaping": {
      "docs": {
        "description": "Auto-escape certain characters that are input within block and tag descriptions.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/text-escaping.md#repos-sticky-header"
      },
      "fixable": "code",
      "type": "suggestion",
      "name": "jsdoc/text-escaping",
      "plugin": "jsdoc"
    },
    "jsdoc/valid-types": {
      "docs": {
        "description": "Requires all types to be valid JSDoc or Closure compiler types without syntax errors.",
        "url": "https://github.com/gajus/eslint-plugin-jsdoc/blob/main/docs/rules/valid-types.md#repos-sticky-header"
      },
      "type": "suggestion",
      "name": "jsdoc/valid-types",
      "plugin": "jsdoc"
    },
    "css/no-empty-blocks": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty blocks",
        "recommended": true,
        "url": "https://github.com/eslint/css/blob/main/docs/rules/no-empty-blocks.md"
      },
      "name": "css/no-empty-blocks",
      "plugin": "css"
    },
    "css/no-duplicate-imports": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate @import rules",
        "recommended": true,
        "url": "https://github.com/eslint/css/blob/main/docs/rules/no-duplicate-imports.md"
      },
      "name": "css/no-duplicate-imports",
      "plugin": "css"
    },
    "css/no-invalid-at-rules": {
      "type": "problem",
      "docs": {
        "description": "Disallow invalid at-rules",
        "recommended": true,
        "url": "https://github.com/eslint/css/blob/main/docs/rules/no-invalid-at-rules.md"
      },
      "name": "css/no-invalid-at-rules",
      "plugin": "css"
    },
    "css/no-invalid-properties": {
      "type": "problem",
      "docs": {
        "description": "Disallow invalid properties",
        "recommended": true,
        "url": "https://github.com/eslint/css/blob/main/docs/rules/no-invalid-properties.md"
      },
      "name": "css/no-invalid-properties",
      "plugin": "css"
    },
    "css/prefer-logical-properties": {
      "type": "problem",
      "fixable": "code",
      "docs": {
        "description": "Enforce the use of logical properties",
        "url": "https://github.com/eslint/css/blob/main/docs/rules/prefer-logical-properties.md"
      },
      "defaultOptions": [
        {
          "allowProperties": [],
          "allowUnits": []
        }
      ],
      "name": "css/prefer-logical-properties",
      "plugin": "css"
    },
    "css/use-layers": {
      "type": "problem",
      "docs": {
        "description": "Require use of layers",
        "url": "https://github.com/eslint/css/blob/main/docs/rules/use-layers.md"
      },
      "defaultOptions": [
        {
          "allowUnnamedLayers": false,
          "requireImportLayers": true,
          "layerNamePattern": ""
        }
      ],
      "name": "css/use-layers",
      "plugin": "css"
    },
    "css/use-baseline": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of baseline features",
        "recommended": true,
        "url": "https://github.com/eslint/css/blob/main/docs/rules/use-baseline.md"
      },
      "defaultOptions": [
        {
          "available": "widely"
        }
      ],
      "name": "css/use-baseline",
      "plugin": "css"
    }
  },
  "files": [
    {
      "filepath": "build.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "eslint.config.viewer.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/index.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/comments.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/css.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/depend.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/jsdoc.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/json.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/mutation.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/node.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/promise.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/regexp.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    },
    {
      "filepath": "src/shared/unicorn.js",
      "globs": [
        "**/*.js",
        "**/*.?([cm])js?(x)"
      ],
      "configs": [
        2,
        7
      ]
    }
  ],
  "meta": {
    "lastUpdate": 1746133921917,
    "basePath": "",
    "configPath": ""
  }
}