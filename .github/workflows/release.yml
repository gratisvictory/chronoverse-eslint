name: Release
on:
  pull_request:
    branches:
      - main
    types:
      - closed
permissions:
  id-token: write
  contents: write
  pull-requests: write
  packages: write
concurrency: '${{ github.workflow }}-${{ github.ref }}'

jobs:
  release:
    name: Release
    if: >-
      github.repository == 'gratisvictory/chronoverse-eslint' &&
      github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup CI
        uses: ./.github/actions/ci-setup

      - name: Configure Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Build packages
        run: bun run build

      - name: Get package versions
        id: versions
        run: |
          bun scripts/release.js

      - name: Check if tags already exist
        id: tag-check
        run: |
          for var in $(compgen -v | grep _VERSION$); do
            pkg=${var%_VERSION}
            version=${!var}
            tag="${pkg,,}-v${version}" # lowercase
            if git ls-remote --tags origin refs/tags/$tag | grep .; then
              echo "${pkg}_EXISTS=true" >> $GITHUB_ENV
            else
              echo "${pkg}_EXISTS=false" >> $GITHUB_ENV
            fi
          done

      - name: Create GitHub Releases
        run: |
          for var in $(compgen -v | grep _VERSION$); do
            pkg=${var%_VERSION}
            version=${!var}
            exists_var="${pkg}_EXISTS"
            if [ "${!exists_var}" = "false" ]; then
              tag="${pkg,,}-v${version}" # lowercase
              name="${pkg,,}" # lowercase
              echo "Creating release for $tag"
              gh release create "$tag" --title "$name - ${{ github.event.pull_request.title }}" --notes "${{ github.event.pull_request.body }}" --target ${{ github.sha }}
            fi
          done
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Wait for OTP
        uses: step-security/wait-for-secrets@v1
        id: wait-for-secrets
        with:
          secrets: |
            OTP:
              name: 'OTP to publish package'
              description: 'OTP from authenticator app'

      - name: Configure npm for publishing
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.PUBLISH_NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org" >> ~/.npmrc

      - name: Publish to npm
        run: 'bun run ci:release --otp ${{ steps.wait-for-secrets.outputs.OTP }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          NODE_AUTH_TOKEN: '${{ secrets.PUBLISH_NPM_TOKEN }}'

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            const pkgs = Object.entries(process.env)
              .filter(([key]) => key.endsWith('_VERSION'))
              .map(([key, version]) => {
                const name = key.replace('_VERSION', '').toLowerCase();
                return `- **@chronoverse-eslint/${name}**: \`${version}\``;
              })
              .join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Released Packages\n${pkgs}\nðŸŽ‰`
            });
