name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions:
  id-token: write
  contents: write
  pull-requests: write
  packages: write

concurrency:
  group: '${{ github.workflow }}-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  release:
    name: Release
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup CI
        uses: ./.github/actions/ci-setup

      - name: Configure Git Identity
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Install dependencies
        run: bun install
        env:
          NODE_ENV: production

      - name: Build packages
        run: bun run build
        env:
          NODE_ENV: production

      - name: Get package versions
        id: versions
        run: |
          set -e

          echo "--- Fetching changed packages ---"
          changed=$(bunx lerna changed --json || echo "[]")

          markdown=""
          main_version=""
          main_name=""
          main_safe=""
          index=0

          for row in $(echo "${changed}" | jq -c '.[]'); do
            private=$(echo "$row" | jq -r '.private')
            if [ "$private" = "true" ]; then
              continue
            fi

            name=$(echo "$row" | jq -r '.name')
            location=$(echo "$row" | jq -r '.location')
            version=$(jq -r '.version' "$location/package.json")
            safe_name=$(echo "$name" | sed 's/^@//' | sed 's/[-\/]/_/g' | tr '[:lower:]' '[:upper:]')

            echo "${safe_name}_VERSION=${version}" >> "$GITHUB_ENV"
            echo "${safe_name}_VERSION=${version}" >> "$GITHUB_OUTPUT"

            markdown="${markdown}- \`${name}\` â†’ \`${version}\`\n"

            if [ "$index" -eq 0 ]; then
              main_version="$version"
              main_name="$name"
              main_safe="$safe_name"
            fi

            index=$((index + 1))
          done

          echo -e "RELEASE_PACKAGES_MARKDOWN<<EOF\n${markdown:-_No public packages changed_}\nEOF" >> "$GITHUB_ENV"
          echo -e "RELEASE_PACKAGES_MARKDOWN<<EOF\n${markdown:-_No public packages changed_}\nEOF" >> "$GITHUB_OUTPUT"

          if [ -n "$main_version" ]; then
            echo "RELEASE_VERSION=${main_version}" >> "$GITHUB_ENV"
            echo "RELEASE_NAME_SAFE=${main_safe}" >> "$GITHUB_ENV"
            echo "RELEASE_VERSION=${main_version}" >> "$GITHUB_OUTPUT"
            echo "RELEASE_NAME_SAFE=${main_safe}" >> "$GITHUB_OUTPUT"
          fi
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Configure npm for publishing
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.PUBLISH_NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Wait for OTP
        uses: step-security/wait-for-secrets@v1
        id: wait-for-secrets
        with:
          secrets: |
            OTP:
              name: 'OTP to publish package'
              description: 'OTP from authenticator app'
        timeout-minutes: 5

      - name: Publish to npm
        run: |
          set -e
          if ! bun run ci:release --otp ${{ steps.wait-for-secrets.outputs.OTP }}; then
            echo "::error::Failed to publish packages"
            exit 1
          fi
        env:
          NODE_AUTH_TOKEN: '${{ secrets.PUBLISH_NPM_TOKEN }}'

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: ${{ always() && steps.versions.outputs.RELEASE_VERSION }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          tag_name: 'v${{ steps.versions.outputs.RELEASE_VERSION }}'
          name: '${{ github.event.pull_request.title }}'
          body: |
            ${{ github.event.pull_request.body }}

            ### Released Packages
            ${{ steps.versions.outputs.RELEASE_PACKAGES_MARKDOWN }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Comment on PR
        if: ${{ always() }}
        uses: actions/github-script@v7
        with:
          github-token: '${{ secrets.GITHUB_TOKEN }}'
          script: |
            try {
              const markdown = process.env.RELEASE_PACKAGES_MARKDOWN || '_No packages were released_';
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `### Released Packages ðŸš€\n\n${markdown}\n\nView release: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/v${process.env.RELEASE_VERSION}`
              });
            } catch (error) {
              console.log(`::warning::Failed to create comment: ${error.message}`);
            }
